extern crate c2rust_bitfields;
extern crate libc;
extern crate core;
extern "C" {
    pub type RedisModuleCommand;
    pub type clusterSlotToKeyMapping;
    fn sintercardGetKeys(
        cmd: *mut redisCommand,
        argv: *mut *mut robj,
        argc: libc::c_int,
        result: *mut getKeysResult,
    ) -> libc::c_int;
    fn zunionInterDiffGetKeys(
        cmd: *mut redisCommand,
        argv: *mut *mut robj,
        argc: libc::c_int,
        result: *mut getKeysResult,
    ) -> libc::c_int;
    fn zunionInterDiffStoreGetKeys(
        cmd: *mut redisCommand,
        argv: *mut *mut robj,
        argc: libc::c_int,
        result: *mut getKeysResult,
    ) -> libc::c_int;
    fn evalGetKeys(
        cmd: *mut redisCommand,
        argv: *mut *mut robj,
        argc: libc::c_int,
        result: *mut getKeysResult,
    ) -> libc::c_int;
    fn functionGetKeys(
        cmd: *mut redisCommand,
        argv: *mut *mut robj,
        argc: libc::c_int,
        result: *mut getKeysResult,
    ) -> libc::c_int;
    fn sortGetKeys(
        cmd: *mut redisCommand,
        argv: *mut *mut robj,
        argc: libc::c_int,
        result: *mut getKeysResult,
    ) -> libc::c_int;
    fn sortROGetKeys(
        cmd: *mut redisCommand,
        argv: *mut *mut robj,
        argc: libc::c_int,
        result: *mut getKeysResult,
    ) -> libc::c_int;
    fn migrateGetKeys(
        cmd: *mut redisCommand,
        argv: *mut *mut robj,
        argc: libc::c_int,
        result: *mut getKeysResult,
    ) -> libc::c_int;
    fn georadiusGetKeys(
        cmd: *mut redisCommand,
        argv: *mut *mut robj,
        argc: libc::c_int,
        result: *mut getKeysResult,
    ) -> libc::c_int;
    fn xreadGetKeys(
        cmd: *mut redisCommand,
        argv: *mut *mut robj,
        argc: libc::c_int,
        result: *mut getKeysResult,
    ) -> libc::c_int;
    fn lmpopGetKeys(
        cmd: *mut redisCommand,
        argv: *mut *mut robj,
        argc: libc::c_int,
        result: *mut getKeysResult,
    ) -> libc::c_int;
    fn blmpopGetKeys(
        cmd: *mut redisCommand,
        argv: *mut *mut robj,
        argc: libc::c_int,
        result: *mut getKeysResult,
    ) -> libc::c_int;
    fn zmpopGetKeys(
        cmd: *mut redisCommand,
        argv: *mut *mut robj,
        argc: libc::c_int,
        result: *mut getKeysResult,
    ) -> libc::c_int;
    fn setGetKeys(
        cmd: *mut redisCommand,
        argv: *mut *mut robj,
        argc: libc::c_int,
        result: *mut getKeysResult,
    ) -> libc::c_int;
    fn bitfieldGetKeys(
        cmd: *mut redisCommand,
        argv: *mut *mut robj,
        argc: libc::c_int,
        result: *mut getKeysResult,
    ) -> libc::c_int;
    fn sentinelCommand(c: *mut client);
    fn authCommand(c: *mut client);
    fn pingCommand(c: *mut client);
    fn echoCommand(c: *mut client);
    fn commandCommand(c: *mut client);
    fn commandCountCommand(c: *mut client);
    fn commandListCommand(c: *mut client);
    fn commandInfoCommand(c: *mut client);
    fn commandGetKeysCommand(c: *mut client);
    fn commandGetKeysAndFlagsCommand(c: *mut client);
    fn commandHelpCommand(c: *mut client);
    fn commandDocsCommand(c: *mut client);
    fn setCommand(c: *mut client);
    fn setnxCommand(c: *mut client);
    fn setexCommand(c: *mut client);
    fn psetexCommand(c: *mut client);
    fn getCommand(c: *mut client);
    fn getexCommand(c: *mut client);
    fn getdelCommand(c: *mut client);
    fn delCommand(c: *mut client);
    fn unlinkCommand(c: *mut client);
    fn existsCommand(c: *mut client);
    fn setbitCommand(c: *mut client);
    fn getbitCommand(c: *mut client);
    fn bitfieldCommand(c: *mut client);
    fn bitfieldroCommand(c: *mut client);
    fn setrangeCommand(c: *mut client);
    fn getrangeCommand(c: *mut client);
    fn incrCommand(c: *mut client);
    fn decrCommand(c: *mut client);
    fn incrbyCommand(c: *mut client);
    fn decrbyCommand(c: *mut client);
    fn incrbyfloatCommand(c: *mut client);
    fn selectCommand(c: *mut client);
    fn swapdbCommand(c: *mut client);
    fn randomkeyCommand(c: *mut client);
    fn keysCommand(c: *mut client);
    fn scanCommand(c: *mut client);
    fn dbsizeCommand(c: *mut client);
    fn lastsaveCommand(c: *mut client);
    fn saveCommand(c: *mut client);
    fn bgsaveCommand(c: *mut client);
    fn bgrewriteaofCommand(c: *mut client);
    fn shutdownCommand(c: *mut client);
    fn slowlogCommand(c: *mut client);
    fn moveCommand(c: *mut client);
    fn copyCommand(c: *mut client);
    fn renameCommand(c: *mut client);
    fn renamenxCommand(c: *mut client);
    fn lpushCommand(c: *mut client);
    fn rpushCommand(c: *mut client);
    fn lpushxCommand(c: *mut client);
    fn rpushxCommand(c: *mut client);
    fn linsertCommand(c: *mut client);
    fn lpopCommand(c: *mut client);
    fn rpopCommand(c: *mut client);
    fn lmpopCommand(c: *mut client);
    fn llenCommand(c: *mut client);
    fn lindexCommand(c: *mut client);
    fn lrangeCommand(c: *mut client);
    fn ltrimCommand(c: *mut client);
    fn typeCommand(c: *mut client);
    fn lsetCommand(c: *mut client);
    fn saddCommand(c: *mut client);
    fn sremCommand(c: *mut client);
    fn smoveCommand(c: *mut client);
    fn sismemberCommand(c: *mut client);
    fn smismemberCommand(c: *mut client);
    fn scardCommand(c: *mut client);
    fn spopCommand(c: *mut client);
    fn srandmemberCommand(c: *mut client);
    fn sinterCommand(c: *mut client);
    fn sinterCardCommand(c: *mut client);
    fn sinterstoreCommand(c: *mut client);
    fn sunionCommand(c: *mut client);
    fn sunionstoreCommand(c: *mut client);
    fn sdiffCommand(c: *mut client);
    fn sdiffstoreCommand(c: *mut client);
    fn sscanCommand(c: *mut client);
    fn syncCommand(c: *mut client);
    fn flushdbCommand(c: *mut client);
    fn flushallCommand(c: *mut client);
    fn sortCommand(c: *mut client);
    fn sortroCommand(c: *mut client);
    fn lremCommand(c: *mut client);
    fn lposCommand(c: *mut client);
    fn rpoplpushCommand(c: *mut client);
    fn lmoveCommand(c: *mut client);
    fn infoCommand(c: *mut client);
    fn mgetCommand(c: *mut client);
    fn monitorCommand(c: *mut client);
    fn expireCommand(c: *mut client);
    fn expireatCommand(c: *mut client);
    fn pexpireCommand(c: *mut client);
    fn pexpireatCommand(c: *mut client);
    fn getsetCommand(c: *mut client);
    fn ttlCommand(c: *mut client);
    fn touchCommand(c: *mut client);
    fn pttlCommand(c: *mut client);
    fn expiretimeCommand(c: *mut client);
    fn pexpiretimeCommand(c: *mut client);
    fn persistCommand(c: *mut client);
    fn replicaofCommand(c: *mut client);
    fn roleCommand(c: *mut client);
    fn debugCommand(c: *mut client);
    fn msetCommand(c: *mut client);
    fn msetnxCommand(c: *mut client);
    fn zaddCommand(c: *mut client);
    fn zincrbyCommand(c: *mut client);
    fn zrangeCommand(c: *mut client);
    fn zrangebyscoreCommand(c: *mut client);
    fn zrevrangebyscoreCommand(c: *mut client);
    fn zrangebylexCommand(c: *mut client);
    fn zrevrangebylexCommand(c: *mut client);
    fn zcountCommand(c: *mut client);
    fn zlexcountCommand(c: *mut client);
    fn zrevrangeCommand(c: *mut client);
    fn zcardCommand(c: *mut client);
    fn zremCommand(c: *mut client);
    fn zscoreCommand(c: *mut client);
    fn zmscoreCommand(c: *mut client);
    fn zremrangebyscoreCommand(c: *mut client);
    fn zremrangebylexCommand(c: *mut client);
    fn zpopminCommand(c: *mut client);
    fn zpopmaxCommand(c: *mut client);
    fn zmpopCommand(c: *mut client);
    fn bzpopminCommand(c: *mut client);
    fn bzpopmaxCommand(c: *mut client);
    fn bzmpopCommand(c: *mut client);
    fn zrandmemberCommand(c: *mut client);
    fn multiCommand(c: *mut client);
    fn execCommand(c: *mut client);
    fn discardCommand(c: *mut client);
    fn blpopCommand(c: *mut client);
    fn brpopCommand(c: *mut client);
    fn blmpopCommand(c: *mut client);
    fn brpoplpushCommand(c: *mut client);
    fn blmoveCommand(c: *mut client);
    fn appendCommand(c: *mut client);
    fn strlenCommand(c: *mut client);
    fn zrankCommand(c: *mut client);
    fn zrevrankCommand(c: *mut client);
    fn hsetCommand(c: *mut client);
    fn hsetnxCommand(c: *mut client);
    fn hgetCommand(c: *mut client);
    fn hmgetCommand(c: *mut client);
    fn hdelCommand(c: *mut client);
    fn hlenCommand(c: *mut client);
    fn hstrlenCommand(c: *mut client);
    fn zremrangebyrankCommand(c: *mut client);
    fn zunionstoreCommand(c: *mut client);
    fn zinterstoreCommand(c: *mut client);
    fn zdiffstoreCommand(c: *mut client);
    fn zunionCommand(c: *mut client);
    fn zinterCommand(c: *mut client);
    fn zinterCardCommand(c: *mut client);
    fn zrangestoreCommand(c: *mut client);
    fn zdiffCommand(c: *mut client);
    fn zscanCommand(c: *mut client);
    fn hkeysCommand(c: *mut client);
    fn hvalsCommand(c: *mut client);
    fn hgetallCommand(c: *mut client);
    fn hexistsCommand(c: *mut client);
    fn hscanCommand(c: *mut client);
    fn hrandfieldCommand(c: *mut client);
    fn configSetCommand(c: *mut client);
    fn configGetCommand(c: *mut client);
    fn configResetStatCommand(c: *mut client);
    fn configRewriteCommand(c: *mut client);
    fn configHelpCommand(c: *mut client);
    fn hincrbyCommand(c: *mut client);
    fn hincrbyfloatCommand(c: *mut client);
    fn subscribeCommand(c: *mut client);
    fn unsubscribeCommand(c: *mut client);
    fn psubscribeCommand(c: *mut client);
    fn punsubscribeCommand(c: *mut client);
    fn publishCommand(c: *mut client);
    fn pubsubCommand(c: *mut client);
    fn spublishCommand(c: *mut client);
    fn ssubscribeCommand(c: *mut client);
    fn sunsubscribeCommand(c: *mut client);
    fn watchCommand(c: *mut client);
    fn unwatchCommand(c: *mut client);
    fn clusterCommand(c: *mut client);
    fn restoreCommand(c: *mut client);
    fn migrateCommand(c: *mut client);
    fn askingCommand(c: *mut client);
    fn readonlyCommand(c: *mut client);
    fn readwriteCommand(c: *mut client);
    fn dumpCommand(c: *mut client);
    fn objectCommand(c: *mut client);
    fn memoryCommand(c: *mut client);
    fn clientCommand(c: *mut client);
    fn helloCommand(c: *mut client);
    fn evalCommand(c: *mut client);
    fn evalRoCommand(c: *mut client);
    fn evalShaCommand(c: *mut client);
    fn evalShaRoCommand(c: *mut client);
    fn scriptCommand(c: *mut client);
    fn fcallCommand(c: *mut client);
    fn fcallroCommand(c: *mut client);
    fn functionLoadCommand(c: *mut client);
    fn functionDeleteCommand(c: *mut client);
    fn functionKillCommand(c: *mut client);
    fn functionStatsCommand(c: *mut client);
    fn functionListCommand(c: *mut client);
    fn functionHelpCommand(c: *mut client);
    fn functionFlushCommand(c: *mut client);
    fn functionRestoreCommand(c: *mut client);
    fn functionDumpCommand(c: *mut client);
    fn timeCommand(c: *mut client);
    fn bitopCommand(c: *mut client);
    fn bitcountCommand(c: *mut client);
    fn bitposCommand(c: *mut client);
    fn replconfCommand(c: *mut client);
    fn waitCommand(c: *mut client);
    fn georadiusbymemberCommand(c: *mut client);
    fn georadiusbymemberroCommand(c: *mut client);
    fn georadiusCommand(c: *mut client);
    fn georadiusroCommand(c: *mut client);
    fn geoaddCommand(c: *mut client);
    fn geohashCommand(c: *mut client);
    fn geoposCommand(c: *mut client);
    fn geodistCommand(c: *mut client);
    fn geosearchCommand(c: *mut client);
    fn geosearchstoreCommand(c: *mut client);
    fn pfselftestCommand(c: *mut client);
    fn pfaddCommand(c: *mut client);
    fn pfcountCommand(c: *mut client);
    fn pfmergeCommand(c: *mut client);
    fn pfdebugCommand(c: *mut client);
    fn latencyCommand(c: *mut client);
    fn moduleCommand(c: *mut client);
    fn xaddCommand(c: *mut client);
    fn xrangeCommand(c: *mut client);
    fn xrevrangeCommand(c: *mut client);
    fn xlenCommand(c: *mut client);
    fn xreadCommand(c: *mut client);
    fn xgroupCommand(c: *mut client);
    fn xsetidCommand(c: *mut client);
    fn xackCommand(c: *mut client);
    fn xpendingCommand(c: *mut client);
    fn xclaimCommand(c: *mut client);
    fn xautoclaimCommand(c: *mut client);
    fn xinfoCommand(c: *mut client);
    fn xdelCommand(c: *mut client);
    fn xtrimCommand(c: *mut client);
    fn lolwutCommand(c: *mut client);
    fn aclCommand(c: *mut client);
    fn lcsCommand(c: *mut client);
    fn quitCommand(c: *mut client);
    fn resetCommand(c: *mut client);
    fn failoverCommand(c: *mut client);
}
pub type __int16_t = libc::c_short;
pub type __int32_t = libc::c_int;
pub type __uint32_t = libc::c_uint;
pub type __int64_t = libc::c_long;
pub type __uint64_t = libc::c_ulong;
pub type __off64_t = libc::c_long;
pub type __time_t = libc::c_long;
pub type __ssize_t = libc::c_long;
pub type size_t = libc::c_ulong;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct iovec {
    pub iov_base: *mut libc::c_void,
    pub iov_len: size_t,
}
pub type off_t = __off64_t;
pub type ssize_t = __ssize_t;
pub type time_t = __time_t;
pub type int16_t = __int16_t;
pub type int32_t = __int32_t;
pub type int64_t = __int64_t;
pub type uint32_t = __uint32_t;
pub type uint64_t = __uint64_t;
pub type sds = *mut libc::c_char;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct aeEventLoop {
    pub maxfd: libc::c_int,
    pub setsize: libc::c_int,
    pub timeEventNextId: libc::c_longlong,
    pub events: *mut aeFileEvent,
    pub fired: *mut aeFiredEvent,
    pub timeEventHead: *mut aeTimeEvent,
    pub stop: libc::c_int,
    pub apidata: *mut libc::c_void,
    pub beforesleep: Option::<aeBeforeSleepProc>,
    pub aftersleep: Option::<aeBeforeSleepProc>,
    pub flags: libc::c_int,
}
pub type aeBeforeSleepProc = unsafe extern "C" fn(*mut aeEventLoop) -> ();
#[derive(Copy, Clone)]
#[repr(C)]
pub struct aeTimeEvent {
    pub id: libc::c_longlong,
    pub when: monotime,
    pub timeProc: Option::<aeTimeProc>,
    pub finalizerProc: Option::<aeEventFinalizerProc>,
    pub clientData: *mut libc::c_void,
    pub prev: *mut aeTimeEvent,
    pub next: *mut aeTimeEvent,
    pub refcount: libc::c_int,
}
pub type aeEventFinalizerProc = unsafe extern "C" fn(
    *mut aeEventLoop,
    *mut libc::c_void,
) -> ();
pub type aeTimeProc = unsafe extern "C" fn(
    *mut aeEventLoop,
    libc::c_longlong,
    *mut libc::c_void,
) -> libc::c_int;
pub type monotime = uint64_t;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct aeFiredEvent {
    pub fd: libc::c_int,
    pub mask: libc::c_int,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct aeFileEvent {
    pub mask: libc::c_int,
    pub rfileProc: Option::<aeFileProc>,
    pub wfileProc: Option::<aeFileProc>,
    pub clientData: *mut libc::c_void,
}
pub type aeFileProc = unsafe extern "C" fn(
    *mut aeEventLoop,
    libc::c_int,
    *mut libc::c_void,
    libc::c_int,
) -> ();
#[derive(Copy, Clone)]
#[repr(C)]
pub struct connection {
    pub type_0: *mut ConnectionType,
    pub state: ConnectionState,
    pub flags: libc::c_short,
    pub refs: libc::c_short,
    pub last_errno: libc::c_int,
    pub private_data: *mut libc::c_void,
    pub conn_handler: ConnectionCallbackFunc,
    pub write_handler: ConnectionCallbackFunc,
    pub read_handler: ConnectionCallbackFunc,
    pub fd: libc::c_int,
}
pub type ConnectionCallbackFunc = Option::<unsafe extern "C" fn(*mut connection) -> ()>;
pub type ConnectionState = libc::c_uint;
pub const CONN_STATE_ERROR: ConnectionState = 5;
pub const CONN_STATE_CLOSED: ConnectionState = 4;
pub const CONN_STATE_CONNECTED: ConnectionState = 3;
pub const CONN_STATE_ACCEPTING: ConnectionState = 2;
pub const CONN_STATE_CONNECTING: ConnectionState = 1;
pub const CONN_STATE_NONE: ConnectionState = 0;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ConnectionType {
    pub ae_handler: Option::<
        unsafe extern "C" fn(
            *mut aeEventLoop,
            libc::c_int,
            *mut libc::c_void,
            libc::c_int,
        ) -> (),
    >,
    pub connect: Option::<
        unsafe extern "C" fn(
            *mut connection,
            *const libc::c_char,
            libc::c_int,
            *const libc::c_char,
            ConnectionCallbackFunc,
        ) -> libc::c_int,
    >,
    pub write: Option::<
        unsafe extern "C" fn(*mut connection, *const libc::c_void, size_t) -> libc::c_int,
    >,
    pub writev: Option::<
        unsafe extern "C" fn(*mut connection, *const iovec, libc::c_int) -> libc::c_int,
    >,
    pub read: Option::<
        unsafe extern "C" fn(*mut connection, *mut libc::c_void, size_t) -> libc::c_int,
    >,
    pub close: Option::<unsafe extern "C" fn(*mut connection) -> ()>,
    pub accept: Option::<
        unsafe extern "C" fn(*mut connection, ConnectionCallbackFunc) -> libc::c_int,
    >,
    pub set_write_handler: Option::<
        unsafe extern "C" fn(
            *mut connection,
            ConnectionCallbackFunc,
            libc::c_int,
        ) -> libc::c_int,
    >,
    pub set_read_handler: Option::<
        unsafe extern "C" fn(*mut connection, ConnectionCallbackFunc) -> libc::c_int,
    >,
    pub get_last_error: Option::<
        unsafe extern "C" fn(*mut connection) -> *const libc::c_char,
    >,
    pub blocking_connect: Option::<
        unsafe extern "C" fn(
            *mut connection,
            *const libc::c_char,
            libc::c_int,
            libc::c_longlong,
        ) -> libc::c_int,
    >,
    pub sync_write: Option::<
        unsafe extern "C" fn(
            *mut connection,
            *mut libc::c_char,
            ssize_t,
            libc::c_longlong,
        ) -> ssize_t,
    >,
    pub sync_read: Option::<
        unsafe extern "C" fn(
            *mut connection,
            *mut libc::c_char,
            ssize_t,
            libc::c_longlong,
        ) -> ssize_t,
    >,
    pub sync_readline: Option::<
        unsafe extern "C" fn(
            *mut connection,
            *mut libc::c_char,
            ssize_t,
            libc::c_longlong,
        ) -> ssize_t,
    >,
    pub get_type: Option::<unsafe extern "C" fn(*mut connection) -> libc::c_int>,
}
#[derive(Copy, Clone,c2rust_bitfields::BitfieldStruct)]
#[repr(C)]
pub struct redisObject {
    #[bitfield(name = "type_0", ty = "libc::c_uint", bits = "0..=3")]
    #[bitfield(name = "encoding", ty = "libc::c_uint", bits = "4..=7")]
    #[bitfield(name = "lru", ty = "libc::c_uint", bits = "8..=31")]
    pub type_0_encoding_lru: [u8; 4],
    pub refcount: libc::c_int,
    pub ptr: *mut libc::c_void,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct hdr_histogram {
    pub lowest_discernible_value: int64_t,
    pub highest_trackable_value: int64_t,
    pub unit_magnitude: int32_t,
    pub significant_figures: int32_t,
    pub sub_bucket_half_count_magnitude: int32_t,
    pub sub_bucket_half_count: int32_t,
    pub sub_bucket_mask: int64_t,
    pub sub_bucket_count: int32_t,
    pub bucket_count: int32_t,
    pub min_value: int64_t,
    pub max_value: int64_t,
    pub normalizing_index_offset: int32_t,
    pub conversion_ratio: libc::c_double,
    pub counts_len: int32_t,
    pub total_count: int64_t,
    pub counts: *mut int64_t,
}
pub type mstime_t = libc::c_longlong;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct dictEntry {
    pub key: *mut libc::c_void,
    pub v: C2RustUnnamed,
    pub next: *mut dictEntry,
    pub metadata: [*mut libc::c_void; 0],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed {
    pub val: *mut libc::c_void,
    pub u64_0: uint64_t,
    pub s64: int64_t,
    pub d: libc::c_double,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct dict {
    pub type_0: *mut dictType,
    pub ht_table: [*mut *mut dictEntry; 2],
    pub ht_used: [libc::c_ulong; 2],
    pub rehashidx: libc::c_long,
    pub pauserehash: int16_t,
    pub ht_size_exp: [libc::c_schar; 2],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct dictType {
    pub hashFunction: Option::<unsafe extern "C" fn(*const libc::c_void) -> uint64_t>,
    pub keyDup: Option::<
        unsafe extern "C" fn(*mut dict, *const libc::c_void) -> *mut libc::c_void,
    >,
    pub valDup: Option::<
        unsafe extern "C" fn(*mut dict, *const libc::c_void) -> *mut libc::c_void,
    >,
    pub keyCompare: Option::<
        unsafe extern "C" fn(
            *mut dict,
            *const libc::c_void,
            *const libc::c_void,
        ) -> libc::c_int,
    >,
    pub keyDestructor: Option::<
        unsafe extern "C" fn(*mut dict, *mut libc::c_void) -> (),
    >,
    pub valDestructor: Option::<
        unsafe extern "C" fn(*mut dict, *mut libc::c_void) -> (),
    >,
    pub expandAllowed: Option::<
        unsafe extern "C" fn(size_t, libc::c_double) -> libc::c_int,
    >,
    pub dictEntryMetadataBytes: Option::<unsafe extern "C" fn(*mut dict) -> size_t>,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct listNode {
    pub prev: *mut listNode,
    pub next: *mut listNode,
    pub value: *mut libc::c_void,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct list {
    pub head: *mut listNode,
    pub tail: *mut listNode,
    pub dup: Option::<unsafe extern "C" fn(*mut libc::c_void) -> *mut libc::c_void>,
    pub free: Option::<unsafe extern "C" fn(*mut libc::c_void) -> ()>,
    pub match_0: Option::<
        unsafe extern "C" fn(*mut libc::c_void, *mut libc::c_void) -> libc::c_int,
    >,
    pub len: libc::c_ulong,
}
#[derive(Copy, Clone,c2rust_bitfields::BitfieldStruct)]
#[repr(C)]
pub struct raxNode {
    #[bitfield(name = "iskey", ty = "uint32_t", bits = "0..=0")]
    #[bitfield(name = "isnull", ty = "uint32_t", bits = "1..=1")]
    #[bitfield(name = "iscompr", ty = "uint32_t", bits = "2..=2")]
    #[bitfield(name = "size", ty = "uint32_t", bits = "3..=31")]
    pub iskey_isnull_iscompr_size: [u8; 4],
    pub data: [libc::c_uchar; 0],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct rax {
    pub head: *mut raxNode,
    pub numele: uint64_t,
    pub numnodes: uint64_t,
}
pub type robj = redisObject;
pub type RedisModuleUserChangedFunc = Option::<
    unsafe extern "C" fn(uint64_t, *mut libc::c_void) -> (),
>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct redisDb {
    pub dict: *mut dict,
    pub expires: *mut dict,
    pub blocking_keys: *mut dict,
    pub ready_keys: *mut dict,
    pub watched_keys: *mut dict,
    pub id: libc::c_int,
    pub avg_ttl: libc::c_longlong,
    pub expires_cursor: libc::c_ulong,
    pub defrag_later: *mut list,
    pub slots_to_keys: *mut clusterSlotToKeyMapping,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct multiCmd {
    pub argv: *mut *mut robj,
    pub argv_len: libc::c_int,
    pub argc: libc::c_int,
    pub cmd: *mut redisCommand,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct redisCommand {
    pub declared_name: *const libc::c_char,
    pub summary: *const libc::c_char,
    pub complexity: *const libc::c_char,
    pub since: *const libc::c_char,
    pub doc_flags: libc::c_int,
    pub replaced_by: *const libc::c_char,
    pub deprecated_since: *const libc::c_char,
    pub group: redisCommandGroup,
    pub history: *mut commandHistory,
    pub tips: *mut *const libc::c_char,
    pub proc_0: Option::<redisCommandProc>,
    pub arity: libc::c_int,
    pub flags: uint64_t,
    pub acl_categories: uint64_t,
    pub key_specs_static: [keySpec; 4],
    pub getkeys_proc: Option::<redisGetKeysProc>,
    pub subcommands: *mut redisCommand,
    pub args: *mut redisCommandArg,
    pub microseconds: libc::c_longlong,
    pub calls: libc::c_longlong,
    pub rejected_calls: libc::c_longlong,
    pub failed_calls: libc::c_longlong,
    pub id: libc::c_int,
    pub fullname: sds,
    pub latency_histogram: *mut hdr_histogram,
    pub key_specs: *mut keySpec,
    pub legacy_range_key_spec: keySpec,
    pub num_args: libc::c_int,
    pub num_history: libc::c_int,
    pub num_tips: libc::c_int,
    pub key_specs_num: libc::c_int,
    pub key_specs_max: libc::c_int,
    pub subcommands_dict: *mut dict,
    pub parent: *mut redisCommand,
    pub module_cmd: *mut RedisModuleCommand,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct keySpec {
    pub notes: *const libc::c_char,
    pub flags: uint64_t,
    pub begin_search_type: kspec_bs_type,
    pub bs: C2RustUnnamed_3,
    pub find_keys_type: kspec_fk_type,
    pub fk: C2RustUnnamed_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_0 {
    pub range: C2RustUnnamed_2,
    pub keynum: C2RustUnnamed_1,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_1 {
    pub keynumidx: libc::c_int,
    pub firstkey: libc::c_int,
    pub keystep: libc::c_int,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_2 {
    pub lastkey: libc::c_int,
    pub keystep: libc::c_int,
    pub limit: libc::c_int,
}
pub type kspec_fk_type = libc::c_uint;
pub const KSPEC_FK_KEYNUM: kspec_fk_type = 3;
pub const KSPEC_FK_RANGE: kspec_fk_type = 2;
pub const KSPEC_FK_UNKNOWN: kspec_fk_type = 1;
pub const KSPEC_FK_INVALID: kspec_fk_type = 0;
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_3 {
    pub index: C2RustUnnamed_5,
    pub keyword: C2RustUnnamed_4,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_4 {
    pub keyword: *const libc::c_char,
    pub startfrom: libc::c_int,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_5 {
    pub pos: libc::c_int,
}
pub type kspec_bs_type = libc::c_uint;
pub const KSPEC_BS_KEYWORD: kspec_bs_type = 3;
pub const KSPEC_BS_INDEX: kspec_bs_type = 2;
pub const KSPEC_BS_UNKNOWN: kspec_bs_type = 1;
pub const KSPEC_BS_INVALID: kspec_bs_type = 0;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct redisCommandArg {
    pub name: *const libc::c_char,
    pub type_0: redisCommandArgType,
    pub key_spec_index: libc::c_int,
    pub token: *const libc::c_char,
    pub summary: *const libc::c_char,
    pub since: *const libc::c_char,
    pub flags: libc::c_int,
    pub deprecated_since: *const libc::c_char,
    pub subargs: *mut redisCommandArg,
    pub num_args: libc::c_int,
}
pub type redisCommandArgType = libc::c_uint;
pub const ARG_TYPE_BLOCK: redisCommandArgType = 8;
pub const ARG_TYPE_ONEOF: redisCommandArgType = 7;
pub const ARG_TYPE_PURE_TOKEN: redisCommandArgType = 6;
pub const ARG_TYPE_UNIX_TIME: redisCommandArgType = 5;
pub const ARG_TYPE_PATTERN: redisCommandArgType = 4;
pub const ARG_TYPE_KEY: redisCommandArgType = 3;
pub const ARG_TYPE_DOUBLE: redisCommandArgType = 2;
pub const ARG_TYPE_INTEGER: redisCommandArgType = 1;
pub const ARG_TYPE_STRING: redisCommandArgType = 0;
pub type redisGetKeysProc = unsafe extern "C" fn(
    *mut redisCommand,
    *mut *mut robj,
    libc::c_int,
    *mut getKeysResult,
) -> libc::c_int;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct getKeysResult {
    pub keysbuf: [keyReference; 256],
    pub keys: *mut keyReference,
    pub numkeys: libc::c_int,
    pub size: libc::c_int,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct keyReference {
    pub pos: libc::c_int,
    pub flags: libc::c_int,
}
pub type redisCommandProc = unsafe extern "C" fn(*mut client) -> ();
#[derive(Copy, Clone)]
#[repr(C)]
pub struct client {
    pub id: uint64_t,
    pub flags: uint64_t,
    pub conn: *mut connection,
    pub resp: libc::c_int,
    pub db: *mut redisDb,
    pub name: *mut robj,
    pub querybuf: sds,
    pub qb_pos: size_t,
    pub querybuf_peak: size_t,
    pub argc: libc::c_int,
    pub argv: *mut *mut robj,
    pub argv_len: libc::c_int,
    pub original_argc: libc::c_int,
    pub original_argv: *mut *mut robj,
    pub argv_len_sum: size_t,
    pub cmd: *mut redisCommand,
    pub lastcmd: *mut redisCommand,
    pub realcmd: *mut redisCommand,
    pub user: *mut user,
    pub reqtype: libc::c_int,
    pub multibulklen: libc::c_int,
    pub bulklen: libc::c_long,
    pub reply: *mut list,
    pub reply_bytes: libc::c_ulonglong,
    pub deferred_reply_errors: *mut list,
    pub sentlen: size_t,
    pub ctime: time_t,
    pub duration: libc::c_long,
    pub slot: libc::c_int,
    pub cur_script: *mut dictEntry,
    pub lastinteraction: time_t,
    pub obuf_soft_limit_reached_time: time_t,
    pub authenticated: libc::c_int,
    pub replstate: libc::c_int,
    pub repl_start_cmd_stream_on_ack: libc::c_int,
    pub repldbfd: libc::c_int,
    pub repldboff: off_t,
    pub repldbsize: off_t,
    pub replpreamble: sds,
    pub read_reploff: libc::c_longlong,
    pub reploff: libc::c_longlong,
    pub repl_applied: libc::c_longlong,
    pub repl_ack_off: libc::c_longlong,
    pub repl_ack_time: libc::c_longlong,
    pub repl_last_partial_write: libc::c_longlong,
    pub psync_initial_offset: libc::c_longlong,
    pub replid: [libc::c_char; 41],
    pub slave_listening_port: libc::c_int,
    pub slave_addr: *mut libc::c_char,
    pub slave_capa: libc::c_int,
    pub slave_req: libc::c_int,
    pub mstate: multiState,
    pub btype: libc::c_int,
    pub bpop: blockingState,
    pub woff: libc::c_longlong,
    pub watched_keys: *mut list,
    pub pubsub_channels: *mut dict,
    pub pubsub_patterns: *mut list,
    pub pubsubshard_channels: *mut dict,
    pub peerid: sds,
    pub sockname: sds,
    pub client_list_node: *mut listNode,
    pub postponed_list_node: *mut listNode,
    pub pending_read_list_node: *mut listNode,
    pub auth_callback: RedisModuleUserChangedFunc,
    pub auth_callback_privdata: *mut libc::c_void,
    pub auth_module: *mut libc::c_void,
    pub client_tracking_redirection: uint64_t,
    pub client_tracking_prefixes: *mut rax,
    pub last_memory_usage: size_t,
    pub last_memory_type: libc::c_int,
    pub mem_usage_bucket_node: *mut listNode,
    pub mem_usage_bucket: *mut clientMemUsageBucket,
    pub ref_repl_buf_node: *mut listNode,
    pub ref_block_pos: size_t,
    pub buf_peak: size_t,
    pub buf_peak_last_reset_time: mstime_t,
    pub bufpos: libc::c_int,
    pub buf_usable_size: size_t,
    pub buf: *mut libc::c_char,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct clientMemUsageBucket {
    pub clients: *mut list,
    pub mem_usage_sum: size_t,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct blockingState {
    pub count: libc::c_long,
    pub timeout: mstime_t,
    pub keys: *mut dict,
    pub target: *mut robj,
    pub blockpos: blockPos,
    pub xread_count: size_t,
    pub xread_group: *mut robj,
    pub xread_consumer: *mut robj,
    pub xread_group_noack: libc::c_int,
    pub numreplicas: libc::c_int,
    pub reploffset: libc::c_longlong,
    pub module_blocked_handle: *mut libc::c_void,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct blockPos {
    pub wherefrom: libc::c_int,
    pub whereto: libc::c_int,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct multiState {
    pub commands: *mut multiCmd,
    pub count: libc::c_int,
    pub cmd_flags: libc::c_int,
    pub cmd_inv_flags: libc::c_int,
    pub argv_len_sums: size_t,
    pub alloc_count: libc::c_int,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct user {
    pub name: sds,
    pub flags: uint32_t,
    pub passwords: *mut list,
    pub selectors: *mut list,
    pub acl_string: *mut robj,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct commandHistory {
    pub since: *const libc::c_char,
    pub changes: *const libc::c_char,
}
pub type redisCommandGroup = libc::c_uint;
pub const COMMAND_GROUP_MODULE: redisCommandGroup = 17;
pub const COMMAND_GROUP_BITMAP: redisCommandGroup = 16;
pub const COMMAND_GROUP_STREAM: redisCommandGroup = 15;
pub const COMMAND_GROUP_GEO: redisCommandGroup = 14;
pub const COMMAND_GROUP_SENTINEL: redisCommandGroup = 13;
pub const COMMAND_GROUP_CLUSTER: redisCommandGroup = 12;
pub const COMMAND_GROUP_HYPERLOGLOG: redisCommandGroup = 11;
pub const COMMAND_GROUP_SCRIPTING: redisCommandGroup = 10;
pub const COMMAND_GROUP_SERVER: redisCommandGroup = 9;
pub const COMMAND_GROUP_CONNECTION: redisCommandGroup = 8;
pub const COMMAND_GROUP_TRANSACTIONS: redisCommandGroup = 7;
pub const COMMAND_GROUP_PUBSUB: redisCommandGroup = 6;
pub const COMMAND_GROUP_HASH: redisCommandGroup = 5;
pub const COMMAND_GROUP_SORTED_SET: redisCommandGroup = 4;
pub const COMMAND_GROUP_SET: redisCommandGroup = 3;
pub const COMMAND_GROUP_LIST: redisCommandGroup = 2;
pub const COMMAND_GROUP_STRING: redisCommandGroup = 1;
pub const COMMAND_GROUP_GENERIC: redisCommandGroup = 0;
#[no_mangle]
pub static mut BITCOUNT_History: [commandHistory; 2] = [
    {
        let mut init = commandHistory {
            since: b"7.0.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added the `BYTE|BIT` option.\0" as *const u8
                as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut BITCOUNT_index_index_unit_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"byte\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"BYTE\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"bit\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"BIT\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut BITCOUNT_index_Subargs: [redisCommandArg; 4] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"start\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_INTEGER,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"end\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_INTEGER,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"index_unit\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: b"7.0.0\0" as *const u8 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: BITCOUNT_index_index_unit_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut BITCOUNT_Args: [redisCommandArg; 3] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"key\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_KEY,
                key_spec_index: 0 as libc::c_int,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"index\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_BLOCK,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: BITCOUNT_index_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut BITFIELD_operation_encoding_offset_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"encoding\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"offset\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut BITFIELD_operation_write_wrap_sat_fail_Subargs: [redisCommandArg; 4] = [
    {
        let mut init = redisCommandArg {
            name: b"wrap\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"WRAP\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"sat\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"SAT\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"fail\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"FAIL\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut BITFIELD_operation_write_write_operation_encoding_offset_value_Subargs: [redisCommandArg; 4] = [
    {
        let mut init = redisCommandArg {
            name: b"encoding\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"offset\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"value\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut BITFIELD_operation_write_write_operation_encoding_offset_increment_Subargs: [redisCommandArg; 4] = [
    {
        let mut init = redisCommandArg {
            name: b"encoding\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"offset\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"increment\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut BITFIELD_operation_write_write_operation_Subargs: [redisCommandArg; 3] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"encoding_offset_value\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_BLOCK,
                key_spec_index: -(1 as libc::c_int),
                token: b"SET\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: BITFIELD_operation_write_write_operation_encoding_offset_value_Subargs
                    .as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"encoding_offset_increment\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_BLOCK,
                key_spec_index: -(1 as libc::c_int),
                token: b"INCRBY\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: BITFIELD_operation_write_write_operation_encoding_offset_increment_Subargs
                    .as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut BITFIELD_operation_write_Subargs: [redisCommandArg; 3] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"wrap_sat_fail\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: b"OVERFLOW\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: BITFIELD_operation_write_wrap_sat_fail_Subargs.as_ptr()
                    as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"write_operation\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: BITFIELD_operation_write_write_operation_Subargs.as_ptr()
                    as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut BITFIELD_operation_Subargs: [redisCommandArg; 3] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"encoding_offset\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_BLOCK,
                key_spec_index: -(1 as libc::c_int),
                token: b"GET\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: BITFIELD_operation_encoding_offset_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"write\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_BLOCK,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: BITFIELD_operation_write_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut BITFIELD_Args: [redisCommandArg; 3] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"key\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_KEY,
                key_spec_index: 0 as libc::c_int,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"operation\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 1 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: BITFIELD_operation_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut BITFIELD_RO_encoding_offset_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"encoding\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"offset\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut BITFIELD_RO_Args: [redisCommandArg; 3] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"key\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_KEY,
                key_spec_index: 0 as libc::c_int,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"encoding_offset\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_BLOCK,
                key_spec_index: -(1 as libc::c_int),
                token: b"GET\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 1 as libc::c_int
                    | (1 as libc::c_int) << 2 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: BITFIELD_RO_encoding_offset_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut BITOP_Args: [redisCommandArg; 4] = [
    {
        let mut init = redisCommandArg {
            name: b"operation\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"destkey\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 1 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut BITPOS_History: [commandHistory; 2] = [
    {
        let mut init = commandHistory {
            since: b"7.0.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added the `BYTE|BIT` option.\0" as *const u8
                as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut BITPOS_index_end_index_index_unit_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"byte\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"BYTE\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"bit\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"BIT\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut BITPOS_index_end_index_Subargs: [redisCommandArg; 3] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"end\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_INTEGER,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"index_unit\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: b"7.0.0\0" as *const u8 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: BITPOS_index_end_index_index_unit_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut BITPOS_index_Subargs: [redisCommandArg; 3] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"start\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_INTEGER,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"end_index\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_BLOCK,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: BITPOS_index_end_index_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut BITPOS_Args: [redisCommandArg; 4] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"key\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_KEY,
                key_spec_index: 0 as libc::c_int,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"bit\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_INTEGER,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"index\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_BLOCK,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: BITPOS_index_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut GETBIT_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"offset\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut SETBIT_Args: [redisCommandArg; 4] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"offset\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"value\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut CLUSTER_ADDSLOTS_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"slot\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut CLUSTER_ADDSLOTSRANGE_start_slot_end_slot_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"start-slot\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"end-slot\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut CLUSTER_ADDSLOTSRANGE_Args: [redisCommandArg; 2] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"start-slot_end-slot\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_BLOCK,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 1 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: CLUSTER_ADDSLOTSRANGE_start_slot_end_slot_Subargs.as_ptr()
                    as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut CLUSTER_BUMPEPOCH_tips: [*const libc::c_char; 2] = [
    b"nondeterministic_output\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut CLUSTER_COUNT_FAILURE_REPORTS_tips: [*const libc::c_char; 2] = [
    b"nondeterministic_output\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut CLUSTER_COUNT_FAILURE_REPORTS_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"node-id\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut CLUSTER_COUNTKEYSINSLOT_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"slot\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut CLUSTER_DELSLOTS_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"slot\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut CLUSTER_DELSLOTSRANGE_start_slot_end_slot_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"start-slot\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"end-slot\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut CLUSTER_DELSLOTSRANGE_Args: [redisCommandArg; 2] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"start-slot_end-slot\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_BLOCK,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 1 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: CLUSTER_DELSLOTSRANGE_start_slot_end_slot_Subargs.as_ptr()
                    as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut CLUSTER_FAILOVER_options_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"force\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"FORCE\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"takeover\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"TAKEOVER\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut CLUSTER_FAILOVER_Args: [redisCommandArg; 2] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"options\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: CLUSTER_FAILOVER_options_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut CLUSTER_FORGET_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"node-id\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut CLUSTER_GETKEYSINSLOT_tips: [*const libc::c_char; 2] = [
    b"nondeterministic_output\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut CLUSTER_GETKEYSINSLOT_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"slot\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"count\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut CLUSTER_INFO_tips: [*const libc::c_char; 2] = [
    b"nondeterministic_output\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut CLUSTER_KEYSLOT_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut CLUSTER_LINKS_tips: [*const libc::c_char; 2] = [
    b"nondeterministic_output\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut CLUSTER_MEET_History: [commandHistory; 2] = [
    {
        let mut init = commandHistory {
            since: b"4.0.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added the optional `cluster_bus_port` argument.\0" as *const u8
                as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut CLUSTER_MEET_Args: [redisCommandArg; 4] = [
    {
        let mut init = redisCommandArg {
            name: b"ip\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"port\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"cluster_bus_port\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: b"4.0.0\0" as *const u8 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut CLUSTER_NODES_tips: [*const libc::c_char; 2] = [
    b"nondeterministic_output\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut CLUSTER_REPLICAS_tips: [*const libc::c_char; 2] = [
    b"nondeterministic_output\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut CLUSTER_REPLICAS_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"node-id\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut CLUSTER_REPLICATE_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"node-id\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut CLUSTER_RESET_hard_soft_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"hard\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"HARD\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"soft\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"SOFT\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut CLUSTER_RESET_Args: [redisCommandArg; 2] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"hard_soft\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: CLUSTER_RESET_hard_soft_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut CLUSTER_SET_CONFIG_EPOCH_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"config-epoch\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut CLUSTER_SETSLOT_subcommand_Subargs: [redisCommandArg; 5] = [
    {
        let mut init = redisCommandArg {
            name: b"node-id\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: b"IMPORTING\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"node-id\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: b"MIGRATING\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"node-id\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: b"NODE\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"stable\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"STABLE\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut CLUSTER_SETSLOT_Args: [redisCommandArg; 3] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"slot\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_INTEGER,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"subcommand\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: CLUSTER_SETSLOT_subcommand_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut CLUSTER_SHARDS_tips: [*const libc::c_char; 2] = [
    b"nondeterministic_output\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut CLUSTER_SLAVES_tips: [*const libc::c_char; 2] = [
    b"nondeterministic_output\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut CLUSTER_SLAVES_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"node-id\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut CLUSTER_SLOTS_History: [commandHistory; 3] = [
    {
        let mut init = commandHistory {
            since: b"4.0.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added node IDs.\0" as *const u8 as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: b"7.0.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added additional networking metadata field.\0" as *const u8
                as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut CLUSTER_SLOTS_tips: [*const libc::c_char; 2] = [
    b"nondeterministic_output\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut CLUSTER_Subcommands: [redisCommand; 28] = unsafe {
    [
        {
            let mut init = redisCommand {
                declared_name: b"addslots\0" as *const u8 as *const libc::c_char,
                summary: b"Assign new hash slots to receiving node\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N) where N is the total number of hash slot arguments\0"
                    as *const u8 as *const libc::c_char,
                since: b"3.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_CLUSTER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(clusterCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 23 as libc::c_int
                    | (1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: CLUSTER_ADDSLOTS_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"addslotsrange\0" as *const u8 as *const libc::c_char,
                summary: b"Assign new hash slots to receiving node\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N) where N is the total number of the slots between the start slot and end slot arguments.\0"
                    as *const u8 as *const libc::c_char,
                since: b"7.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_CLUSTER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(clusterCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(4 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 23 as libc::c_int
                    | (1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: CLUSTER_ADDSLOTSRANGE_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"bumpepoch\0" as *const u8 as *const libc::c_char,
                summary: b"Advance the cluster config epoch\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"3.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_CLUSTER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: CLUSTER_BUMPEPOCH_tips.as_ptr() as *mut _,
                proc_0: Some(clusterCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 23 as libc::c_int
                    | (1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"count-failure-reports\0" as *const u8
                    as *const libc::c_char,
                summary: b"Return the number of failure reports active for a given node\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(N) where N is the number of failure reports\0"
                    as *const u8 as *const libc::c_char,
                since: b"3.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_CLUSTER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: CLUSTER_COUNT_FAILURE_REPORTS_tips.as_ptr() as *mut _,
                proc_0: Some(clusterCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 3 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: CLUSTER_COUNT_FAILURE_REPORTS_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"countkeysinslot\0" as *const u8 as *const libc::c_char,
                summary: b"Return the number of local keys in the specified hash slot\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"3.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_CLUSTER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(clusterCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 3 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: CLUSTER_COUNTKEYSINSLOT_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"delslots\0" as *const u8 as *const libc::c_char,
                summary: b"Set hash slots as unbound in receiving node\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N) where N is the total number of hash slot arguments\0"
                    as *const u8 as *const libc::c_char,
                since: b"3.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_CLUSTER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(clusterCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 23 as libc::c_int
                    | (1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: CLUSTER_DELSLOTS_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"delslotsrange\0" as *const u8 as *const libc::c_char,
                summary: b"Set hash slots as unbound in receiving node\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N) where N is the total number of the slots between the start slot and end slot arguments.\0"
                    as *const u8 as *const libc::c_char,
                since: b"7.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_CLUSTER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(clusterCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(4 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 23 as libc::c_int
                    | (1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: CLUSTER_DELSLOTSRANGE_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"failover\0" as *const u8 as *const libc::c_char,
                summary: b"Forces a replica to perform a manual failover of its master.\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"3.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_CLUSTER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(clusterCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(2 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 23 as libc::c_int
                    | (1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: CLUSTER_FAILOVER_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"flushslots\0" as *const u8 as *const libc::c_char,
                summary: b"Delete a node's own slots information\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"3.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_CLUSTER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(clusterCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 23 as libc::c_int
                    | (1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"forget\0" as *const u8 as *const libc::c_char,
                summary: b"Remove a node from the nodes table\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"3.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_CLUSTER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(clusterCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 3 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 23 as libc::c_int
                    | (1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: CLUSTER_FORGET_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"getkeysinslot\0" as *const u8 as *const libc::c_char,
                summary: b"Return local key names in the specified hash slot\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(log(N)) where N is the number of requested keys\0"
                    as *const u8 as *const libc::c_char,
                since: b"3.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_CLUSTER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: CLUSTER_GETKEYSINSLOT_tips.as_ptr() as *mut _,
                proc_0: Some(clusterCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 4 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: CLUSTER_GETKEYSINSLOT_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"help\0" as *const u8 as *const libc::c_char,
                summary: b"Show helpful text about the different subcommands\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"5.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_CLUSTER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(clusterCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"info\0" as *const u8 as *const libc::c_char,
                summary: b"Provides info about Redis Cluster node state\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"3.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_CLUSTER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: CLUSTER_INFO_tips.as_ptr() as *mut _,
                proc_0: Some(clusterCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"keyslot\0" as *const u8 as *const libc::c_char,
                summary: b"Returns the hash slot of the specified key\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N) where N is the number of bytes in the key\0"
                    as *const u8 as *const libc::c_char,
                since: b"3.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_CLUSTER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(clusterCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 3 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: CLUSTER_KEYSLOT_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"links\0" as *const u8 as *const libc::c_char,
                summary: b"Returns a list of all TCP links to and from peer nodes in cluster\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(N) where N is the total number of Cluster nodes\0"
                    as *const u8 as *const libc::c_char,
                since: b"7.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_CLUSTER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: CLUSTER_LINKS_tips.as_ptr() as *mut _,
                proc_0: Some(clusterCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"meet\0" as *const u8 as *const libc::c_char,
                summary: b"Force a node cluster to handshake with another node\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"3.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_CLUSTER,
                history: CLUSTER_MEET_History.as_ptr() as *mut _,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(clusterCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(4 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 23 as libc::c_int
                    | (1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: CLUSTER_MEET_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"myid\0" as *const u8 as *const libc::c_char,
                summary: b"Return the node id\0" as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"3.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_CLUSTER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(clusterCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"nodes\0" as *const u8 as *const libc::c_char,
                summary: b"Get Cluster config for the node\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N) where N is the total number of Cluster nodes\0"
                    as *const u8 as *const libc::c_char,
                since: b"3.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_CLUSTER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: CLUSTER_NODES_tips.as_ptr() as *mut _,
                proc_0: Some(clusterCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"replicas\0" as *const u8 as *const libc::c_char,
                summary: b"List replica nodes of the specified master node\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"5.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_CLUSTER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: CLUSTER_REPLICAS_tips.as_ptr() as *mut _,
                proc_0: Some(clusterCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 3 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: CLUSTER_REPLICAS_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"replicate\0" as *const u8 as *const libc::c_char,
                summary: b"Reconfigure a node as a replica of the specified master node\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"3.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_CLUSTER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(clusterCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 3 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 23 as libc::c_int
                    | (1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: CLUSTER_REPLICATE_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"reset\0" as *const u8 as *const libc::c_char,
                summary: b"Reset a Redis Cluster node\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N) where N is the number of known nodes. The command may execute a FLUSHALL as a side effect.\0"
                    as *const u8 as *const libc::c_char,
                since: b"3.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_CLUSTER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(clusterCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(2 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 6 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: CLUSTER_RESET_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"saveconfig\0" as *const u8 as *const libc::c_char,
                summary: b"Forces the node to save cluster state on disk\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"3.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_CLUSTER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(clusterCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 23 as libc::c_int
                    | (1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"set-config-epoch\0" as *const u8 as *const libc::c_char,
                summary: b"Set the configuration epoch in a new node\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"3.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_CLUSTER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(clusterCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 3 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 23 as libc::c_int
                    | (1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: CLUSTER_SET_CONFIG_EPOCH_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"setslot\0" as *const u8 as *const libc::c_char,
                summary: b"Bind a hash slot to a specific node\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"3.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_CLUSTER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(clusterCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(4 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 23 as libc::c_int
                    | (1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: CLUSTER_SETSLOT_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"shards\0" as *const u8 as *const libc::c_char,
                summary: b"Get array of cluster slots to node mappings\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N) where N is the total number of cluster nodes\0"
                    as *const u8 as *const libc::c_char,
                since: b"7.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_CLUSTER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: CLUSTER_SHARDS_tips.as_ptr() as *mut _,
                proc_0: Some(clusterCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"slaves\0" as *const u8 as *const libc::c_char,
                summary: b"List replica nodes of the specified master node\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"3.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: (1 as libc::c_int) << 0 as libc::c_int,
                replaced_by: b"`CLUSTER REPLICAS`\0" as *const u8 as *const libc::c_char,
                deprecated_since: b"5.0.0\0" as *const u8 as *const libc::c_char,
                group: COMMAND_GROUP_CLUSTER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: CLUSTER_SLAVES_tips.as_ptr() as *mut _,
                proc_0: Some(clusterCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 3 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: CLUSTER_SLAVES_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"slots\0" as *const u8 as *const libc::c_char,
                summary: b"Get array of Cluster slot to node mappings\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N) where N is the total number of Cluster nodes\0"
                    as *const u8 as *const libc::c_char,
                since: b"3.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: (1 as libc::c_int) << 0 as libc::c_int,
                replaced_by: b"`CLUSTER SHARDS`\0" as *const u8 as *const libc::c_char,
                deprecated_since: b"7.0.0\0" as *const u8 as *const libc::c_char,
                group: COMMAND_GROUP_CLUSTER,
                history: CLUSTER_SLOTS_History.as_ptr() as *mut _,
                tips: CLUSTER_SLOTS_tips.as_ptr() as *mut _,
                proc_0: Some(clusterCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                complexity: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                doc_flags: 0,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_GENERIC,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: None,
                arity: 0,
                flags: 0,
                acl_categories: 0,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut AUTH_History: [commandHistory; 2] = [
    {
        let mut init = commandHistory {
            since: b"6.0.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added ACL style (username and password).\0" as *const u8
                as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut AUTH_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"username\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: b"6.0.0\0" as *const u8 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"password\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut CLIENT_CACHING_mode_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"yes\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"YES\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"no\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"NO\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut CLIENT_CACHING_Args: [redisCommandArg; 2] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"mode\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: CLIENT_CACHING_mode_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut CLIENT_INFO_tips: [*const libc::c_char; 2] = [
    b"nondeterministic_output\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut CLIENT_KILL_History: [commandHistory; 6] = [
    {
        let mut init = commandHistory {
            since: b"2.8.12\0" as *const u8 as *const libc::c_char,
            changes: b"Added new filter format.\0" as *const u8 as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: b"2.8.12\0" as *const u8 as *const libc::c_char,
            changes: b"`ID` option.\0" as *const u8 as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: b"3.2.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added `master` type in for `TYPE` option.\0" as *const u8
                as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: b"5.0.0\0" as *const u8 as *const libc::c_char,
            changes: b"Replaced `slave` `TYPE` with `replica`. `slave` still supported for backward compatibility.\0"
                as *const u8 as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: b"6.2.0\0" as *const u8 as *const libc::c_char,
            changes: b"`LADDR` option.\0" as *const u8 as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut CLIENT_KILL_filter_new_format_normal_master_slave_pubsub_Subargs: [redisCommandArg; 6] = [
    {
        let mut init = redisCommandArg {
            name: b"normal\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"NORMAL\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"master\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"MASTER\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: b"3.2.0\0" as *const u8 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"slave\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"SLAVE\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"replica\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"REPLICA\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: b"5.0.0\0" as *const u8 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"pubsub\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"PUBSUB\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut CLIENT_KILL_filter_new_format_Subargs: [redisCommandArg; 7] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"client-id\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_INTEGER,
                key_spec_index: -(1 as libc::c_int),
                token: b"ID\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: b"2.8.12\0" as *const u8 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"normal_master_slave_pubsub\0" as *const u8
                    as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: b"TYPE\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: b"2.8.12\0" as *const u8 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: CLIENT_KILL_filter_new_format_normal_master_slave_pubsub_Subargs
                    .as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"username\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: -(1 as libc::c_int),
                token: b"USER\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"ip:port\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: -(1 as libc::c_int),
                token: b"ADDR\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"ip:port\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: -(1 as libc::c_int),
                token: b"LADDR\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: b"6.2.0\0" as *const u8 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"yes/no\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: -(1 as libc::c_int),
                token: b"SKIPME\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut CLIENT_KILL_filter_Subargs: [redisCommandArg; 3] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"ip:port\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: b"2.8.12\0" as *const u8 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"new-format\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 1 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: CLIENT_KILL_filter_new_format_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut CLIENT_KILL_Args: [redisCommandArg; 2] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"filter\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: CLIENT_KILL_filter_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut CLIENT_LIST_History: [commandHistory; 4] = [
    {
        let mut init = commandHistory {
            since: b"2.8.12\0" as *const u8 as *const libc::c_char,
            changes: b"Added unique client `id` field.\0" as *const u8
                as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: b"5.0.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added optional `TYPE` filter.\0" as *const u8
                as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: b"6.2.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added `laddr` field and the optional `ID` filter.\0" as *const u8
                as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut CLIENT_LIST_tips: [*const libc::c_char; 2] = [
    b"nondeterministic_output\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut CLIENT_LIST_normal_master_replica_pubsub_Subargs: [redisCommandArg; 5] = [
    {
        let mut init = redisCommandArg {
            name: b"normal\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"NORMAL\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"master\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"MASTER\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"replica\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"REPLICA\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"pubsub\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"PUBSUB\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut CLIENT_LIST_id_Subargs: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"client-id\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut CLIENT_LIST_Args: [redisCommandArg; 3] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"normal_master_replica_pubsub\0" as *const u8
                    as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: b"TYPE\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: b"5.0.0\0" as *const u8 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: CLIENT_LIST_normal_master_replica_pubsub_Subargs.as_ptr()
                    as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"id\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_BLOCK,
                key_spec_index: -(1 as libc::c_int),
                token: b"ID\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: b"6.2.0\0" as *const u8 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: CLIENT_LIST_id_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut CLIENT_NO_EVICT_enabled_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"on\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"ON\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"off\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"OFF\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut CLIENT_NO_EVICT_Args: [redisCommandArg; 2] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"enabled\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: CLIENT_NO_EVICT_enabled_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut CLIENT_PAUSE_History: [commandHistory; 2] = [
    {
        let mut init = commandHistory {
            since: b"6.2.0\0" as *const u8 as *const libc::c_char,
            changes: b"`CLIENT PAUSE WRITE` mode added along with the `mode` option.\0"
                as *const u8 as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut CLIENT_PAUSE_mode_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"write\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"WRITE\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"all\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"ALL\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut CLIENT_PAUSE_Args: [redisCommandArg; 3] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"timeout\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_INTEGER,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"mode\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: b"6.2.0\0" as *const u8 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: CLIENT_PAUSE_mode_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut CLIENT_REPLY_on_off_skip_Subargs: [redisCommandArg; 4] = [
    {
        let mut init = redisCommandArg {
            name: b"on\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"ON\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"off\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"OFF\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"skip\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"SKIP\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut CLIENT_REPLY_Args: [redisCommandArg; 2] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"on_off_skip\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: CLIENT_REPLY_on_off_skip_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut CLIENT_SETNAME_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"connection-name\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut CLIENT_TRACKING_status_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"on\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"ON\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"off\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"OFF\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut CLIENT_TRACKING_Args: [redisCommandArg; 8] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"status\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: CLIENT_TRACKING_status_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"client-id\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_INTEGER,
                key_spec_index: -(1 as libc::c_int),
                token: b"REDIRECT\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"prefix\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: -(1 as libc::c_int),
                token: b"PREFIX\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int
                    | (1 as libc::c_int) << 1 as libc::c_int
                    | (1 as libc::c_int) << 2 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"bcast\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_PURE_TOKEN,
                key_spec_index: -(1 as libc::c_int),
                token: b"BCAST\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"optin\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_PURE_TOKEN,
                key_spec_index: -(1 as libc::c_int),
                token: b"OPTIN\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"optout\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_PURE_TOKEN,
                key_spec_index: -(1 as libc::c_int),
                token: b"OPTOUT\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"noloop\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_PURE_TOKEN,
                key_spec_index: -(1 as libc::c_int),
                token: b"NOLOOP\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut CLIENT_UNBLOCK_timeout_error_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"timeout\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"TIMEOUT\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"error\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"ERROR\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut CLIENT_UNBLOCK_Args: [redisCommandArg; 3] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"client-id\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_INTEGER,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"timeout_error\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: CLIENT_UNBLOCK_timeout_error_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut CLIENT_Subcommands: [redisCommand; 17] = unsafe {
    [
        {
            let mut init = redisCommand {
                declared_name: b"caching\0" as *const u8 as *const libc::c_char,
                summary: b"Instruct the server about tracking or not keys in the next request\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"6.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_CONNECTION,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(clientCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 3 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 18 as libc::c_int)
                    as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: CLIENT_CACHING_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"getname\0" as *const u8 as *const libc::c_char,
                summary: b"Get the current connection name\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"2.6.9\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_CONNECTION,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(clientCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 18 as libc::c_int)
                    as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"getredir\0" as *const u8 as *const libc::c_char,
                summary: b"Get tracking notifications redirection client ID if any\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"6.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_CONNECTION,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(clientCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 18 as libc::c_int)
                    as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"help\0" as *const u8 as *const libc::c_char,
                summary: b"Show helpful text about the different subcommands\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"5.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_CONNECTION,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(clientCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 18 as libc::c_int)
                    as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"id\0" as *const u8 as *const libc::c_char,
                summary: b"Returns the client ID for the current connection\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"5.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_CONNECTION,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(clientCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 18 as libc::c_int)
                    as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"info\0" as *const u8 as *const libc::c_char,
                summary: b"Returns information about the current client connection.\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"6.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_CONNECTION,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: CLIENT_INFO_tips.as_ptr() as *mut _,
                proc_0: Some(clientCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 18 as libc::c_int)
                    as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"kill\0" as *const u8 as *const libc::c_char,
                summary: b"Kill the connection of a client\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N) where N is the number of client connections\0"
                    as *const u8 as *const libc::c_char,
                since: b"2.4.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_CONNECTION,
                history: CLIENT_KILL_History.as_ptr() as *mut _,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(clientCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 18 as libc::c_int)
                    as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: CLIENT_KILL_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"list\0" as *const u8 as *const libc::c_char,
                summary: b"Get the list of client connections\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N) where N is the number of client connections\0"
                    as *const u8 as *const libc::c_char,
                since: b"2.4.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_CONNECTION,
                history: CLIENT_LIST_History.as_ptr() as *mut _,
                tips: CLIENT_LIST_tips.as_ptr() as *mut _,
                proc_0: Some(clientCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(2 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 18 as libc::c_int)
                    as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: CLIENT_LIST_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"no-evict\0" as *const u8 as *const libc::c_char,
                summary: b"Set client eviction mode for the current connection\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"7.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_CONNECTION,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(clientCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 3 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 18 as libc::c_int)
                    as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: CLIENT_NO_EVICT_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"pause\0" as *const u8 as *const libc::c_char,
                summary: b"Stop processing commands from clients for some time\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"2.9.50\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_CONNECTION,
                history: CLIENT_PAUSE_History.as_ptr() as *mut _,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(clientCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 18 as libc::c_int)
                    as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: CLIENT_PAUSE_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"reply\0" as *const u8 as *const libc::c_char,
                summary: b"Instruct the server whether to reply to commands\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"3.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_CONNECTION,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(clientCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 3 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 18 as libc::c_int)
                    as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: CLIENT_REPLY_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"setname\0" as *const u8 as *const libc::c_char,
                summary: b"Set the current connection name\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"2.6.9\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_CONNECTION,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(clientCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 3 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 18 as libc::c_int)
                    as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: CLIENT_SETNAME_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"tracking\0" as *const u8 as *const libc::c_char,
                summary: b"Enable or disable server assisted client side caching support\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1). Some options may introduce additional complexity.\0"
                    as *const u8 as *const libc::c_char,
                since: b"6.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_CONNECTION,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(clientCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 18 as libc::c_int)
                    as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: CLIENT_TRACKING_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"trackinginfo\0" as *const u8 as *const libc::c_char,
                summary: b"Return information about server assisted client side caching for the current connection\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"6.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_CONNECTION,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(clientCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 18 as libc::c_int)
                    as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"unblock\0" as *const u8 as *const libc::c_char,
                summary: b"Unblock a client blocked in a blocking command from a different connection\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(log N) where N is the number of client connections\0"
                    as *const u8 as *const libc::c_char,
                since: b"5.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_CONNECTION,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(clientCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 18 as libc::c_int)
                    as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: CLIENT_UNBLOCK_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"unpause\0" as *const u8 as *const libc::c_char,
                summary: b"Resume processing of clients that were paused\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N) Where N is the number of paused clients\0"
                    as *const u8 as *const libc::c_char,
                since: b"6.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_CONNECTION,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(clientCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 18 as libc::c_int)
                    as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                complexity: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                doc_flags: 0,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_GENERIC,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: None,
                arity: 0,
                flags: 0,
                acl_categories: 0,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut ECHO_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"message\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut HELLO_History: [commandHistory; 2] = [
    {
        let mut init = commandHistory {
            since: b"6.2.0\0" as *const u8 as *const libc::c_char,
            changes: b"`protover` made optional; when called without arguments the command reports the current connection's context.\0"
                as *const u8 as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut HELLO_arguments_username_password_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"username\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"password\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut HELLO_arguments_Subargs: [redisCommandArg; 4] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"protover\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_INTEGER,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"username_password\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_BLOCK,
                key_spec_index: -(1 as libc::c_int),
                token: b"AUTH\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: HELLO_arguments_username_password_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"clientname\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: -(1 as libc::c_int),
                token: b"SETNAME\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut HELLO_Args: [redisCommandArg; 2] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"arguments\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_BLOCK,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: HELLO_arguments_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut PING_tips: [*const libc::c_char; 3] = [
    b"request_policy:all_shards\0" as *const u8 as *const libc::c_char,
    b"response_policy:all_succeeded\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut PING_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"message\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut SELECT_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"index\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut COPY_Args: [redisCommandArg; 5] = [
    {
        let mut init = redisCommandArg {
            name: b"source\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"destination\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 1 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"destination-db\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: b"DB\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"replace\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"REPLACE\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut DEL_tips: [*const libc::c_char; 3] = [
    b"request_policy:multi_shard\0" as *const u8 as *const libc::c_char,
    b"response_policy:agg_sum\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut DEL_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut DUMP_tips: [*const libc::c_char; 2] = [
    b"nondeterministic_output\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut DUMP_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut EXISTS_History: [commandHistory; 2] = [
    {
        let mut init = commandHistory {
            since: b"3.0.3\0" as *const u8 as *const libc::c_char,
            changes: b"Accepts multiple `key` arguments.\0" as *const u8
                as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut EXISTS_tips: [*const libc::c_char; 3] = [
    b"request_policy:multi_shard\0" as *const u8 as *const libc::c_char,
    b"response_policy:agg_sum\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut EXISTS_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut EXPIRE_History: [commandHistory; 2] = [
    {
        let mut init = commandHistory {
            since: b"7.0.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added options: `NX`, `XX`, `GT` and `LT`.\0" as *const u8
                as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut EXPIRE_condition_Subargs: [redisCommandArg; 5] = [
    {
        let mut init = redisCommandArg {
            name: b"nx\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"NX\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"xx\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"XX\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"gt\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"GT\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"lt\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"LT\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut EXPIRE_Args: [redisCommandArg; 4] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"key\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_KEY,
                key_spec_index: 0 as libc::c_int,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"seconds\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_INTEGER,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"condition\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: b"7.0.0\0" as *const u8 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: EXPIRE_condition_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut EXPIREAT_History: [commandHistory; 2] = [
    {
        let mut init = commandHistory {
            since: b"7.0.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added options: `NX`, `XX`, `GT` and `LT`.\0" as *const u8
                as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut EXPIREAT_condition_Subargs: [redisCommandArg; 5] = [
    {
        let mut init = redisCommandArg {
            name: b"nx\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"NX\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"xx\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"XX\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"gt\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"GT\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"lt\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"LT\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut EXPIREAT_Args: [redisCommandArg; 4] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"key\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_KEY,
                key_spec_index: 0 as libc::c_int,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"unix-time-seconds\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_UNIX_TIME,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"condition\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: b"7.0.0\0" as *const u8 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: EXPIREAT_condition_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut EXPIRETIME_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut KEYS_tips: [*const libc::c_char; 3] = [
    b"request_policy:all_shards\0" as *const u8 as *const libc::c_char,
    b"nondeterministic_output_order\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut KEYS_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"pattern\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PATTERN,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut MIGRATE_History: [commandHistory; 5] = [
    {
        let mut init = commandHistory {
            since: b"3.0.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added the `COPY` and `REPLACE` options.\0" as *const u8
                as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: b"3.0.6\0" as *const u8 as *const libc::c_char,
            changes: b"Added the `KEYS` option.\0" as *const u8 as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: b"4.0.7\0" as *const u8 as *const libc::c_char,
            changes: b"Added the `AUTH` option.\0" as *const u8 as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: b"6.0.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added the `AUTH2` option.\0" as *const u8 as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut MIGRATE_tips: [*const libc::c_char; 2] = [
    b"nondeterministic_output\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut MIGRATE_key_or_empty_string_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"empty_string\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut MIGRATE_authentication_username_password_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"username\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"password\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut MIGRATE_authentication_Subargs: [redisCommandArg; 3] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"password\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: -(1 as libc::c_int),
                token: b"AUTH\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: b"4.0.7\0" as *const u8 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"username_password\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_BLOCK,
                key_spec_index: -(1 as libc::c_int),
                token: b"AUTH2\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: b"6.0.0\0" as *const u8 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: MIGRATE_authentication_username_password_Subargs.as_ptr()
                    as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut MIGRATE_Args: [redisCommandArg; 10] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"host\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"port\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_INTEGER,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"key_or_empty_string\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: MIGRATE_key_or_empty_string_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"destination-db\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_INTEGER,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"timeout\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_INTEGER,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"copy\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_PURE_TOKEN,
                key_spec_index: -(1 as libc::c_int),
                token: b"COPY\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: b"3.0.0\0" as *const u8 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"replace\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_PURE_TOKEN,
                key_spec_index: -(1 as libc::c_int),
                token: b"REPLACE\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: b"3.0.0\0" as *const u8 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"authentication\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: MIGRATE_authentication_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"key\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_KEY,
                key_spec_index: 1 as libc::c_int,
                token: b"KEYS\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: b"3.0.6\0" as *const u8 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int
                    | (1 as libc::c_int) << 1 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut MOVE_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"db\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut OBJECT_ENCODING_tips: [*const libc::c_char; 2] = [
    b"nondeterministic_output\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut OBJECT_ENCODING_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut OBJECT_FREQ_tips: [*const libc::c_char; 2] = [
    b"nondeterministic_output\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut OBJECT_FREQ_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut OBJECT_IDLETIME_tips: [*const libc::c_char; 2] = [
    b"nondeterministic_output\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut OBJECT_IDLETIME_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut OBJECT_REFCOUNT_tips: [*const libc::c_char; 2] = [
    b"nondeterministic_output\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut OBJECT_REFCOUNT_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut OBJECT_Subcommands: [redisCommand; 6] = unsafe {
    [
        {
            let mut init = redisCommand {
                declared_name: b"encoding\0" as *const u8 as *const libc::c_char,
                summary: b"Inspect the internal encoding of a Redis object\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"2.2.3\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_GENERIC,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: OBJECT_ENCODING_tips.as_ptr() as *mut _,
                proc_0: Some(objectCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 3 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 0 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int)
                                as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 2 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: OBJECT_ENCODING_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"freq\0" as *const u8 as *const libc::c_char,
                summary: b"Get the logarithmic access frequency counter of a Redis object\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"4.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_GENERIC,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: OBJECT_FREQ_tips.as_ptr() as *mut _,
                proc_0: Some(objectCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 3 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 0 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int)
                                as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 2 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: OBJECT_FREQ_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"help\0" as *const u8 as *const libc::c_char,
                summary: b"Show helpful text about the different subcommands\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"6.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_GENERIC,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(objectCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 0 as libc::c_int)
                    as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"idletime\0" as *const u8 as *const libc::c_char,
                summary: b"Get the time since a Redis object was last accessed\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"2.2.3\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_GENERIC,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: OBJECT_IDLETIME_tips.as_ptr() as *mut _,
                proc_0: Some(objectCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 3 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 0 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int)
                                as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 2 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: OBJECT_IDLETIME_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"refcount\0" as *const u8 as *const libc::c_char,
                summary: b"Get the number of references to the value of the key\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"2.2.3\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_GENERIC,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: OBJECT_REFCOUNT_tips.as_ptr() as *mut _,
                proc_0: Some(objectCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 3 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 0 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int)
                                as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 2 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: OBJECT_REFCOUNT_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                complexity: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                doc_flags: 0,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_GENERIC,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: None,
                arity: 0,
                flags: 0,
                acl_categories: 0,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut PERSIST_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut PEXPIRE_History: [commandHistory; 2] = [
    {
        let mut init = commandHistory {
            since: b"7.0.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added options: `NX`, `XX`, `GT` and `LT`.\0" as *const u8
                as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut PEXPIRE_condition_Subargs: [redisCommandArg; 5] = [
    {
        let mut init = redisCommandArg {
            name: b"nx\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"NX\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"xx\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"XX\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"gt\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"GT\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"lt\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"LT\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut PEXPIRE_Args: [redisCommandArg; 4] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"key\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_KEY,
                key_spec_index: 0 as libc::c_int,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"milliseconds\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_INTEGER,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"condition\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: b"7.0.0\0" as *const u8 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: PEXPIRE_condition_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut PEXPIREAT_History: [commandHistory; 2] = [
    {
        let mut init = commandHistory {
            since: b"7.0.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added options: `NX`, `XX`, `GT` and `LT`.\0" as *const u8
                as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut PEXPIREAT_condition_Subargs: [redisCommandArg; 5] = [
    {
        let mut init = redisCommandArg {
            name: b"nx\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"NX\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"xx\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"XX\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"gt\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"GT\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"lt\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"LT\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut PEXPIREAT_Args: [redisCommandArg; 4] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"key\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_KEY,
                key_spec_index: 0 as libc::c_int,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"unix-time-milliseconds\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_UNIX_TIME,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"condition\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: b"7.0.0\0" as *const u8 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: PEXPIREAT_condition_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut PEXPIRETIME_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut PTTL_History: [commandHistory; 2] = [
    {
        let mut init = commandHistory {
            since: b"2.8.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added the -2 reply.\0" as *const u8 as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut PTTL_tips: [*const libc::c_char; 2] = [
    b"nondeterministic_output\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut PTTL_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut RANDOMKEY_tips: [*const libc::c_char; 3] = [
    b"request_policy:all_shards\0" as *const u8 as *const libc::c_char,
    b"nondeterministic_output\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut RENAME_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"newkey\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 1 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut RENAMENX_History: [commandHistory; 2] = [
    {
        let mut init = commandHistory {
            since: b"3.2.0\0" as *const u8 as *const libc::c_char,
            changes: b"The command no longer returns an error when source and destination names are the same.\0"
                as *const u8 as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut RENAMENX_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"newkey\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 1 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut RESTORE_History: [commandHistory; 4] = [
    {
        let mut init = commandHistory {
            since: b"3.0.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added the `REPLACE` modifier.\0" as *const u8
                as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: b"5.0.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added the `ABSTTL` modifier.\0" as *const u8
                as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: b"5.0.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added the `IDLETIME` and `FREQ` options.\0" as *const u8
                as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut RESTORE_Args: [redisCommandArg; 8] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"ttl\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"serialized-value\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"replace\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"REPLACE\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: b"3.0.0\0" as *const u8 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"absttl\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"ABSTTL\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: b"5.0.0\0" as *const u8 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"seconds\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: b"IDLETIME\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: b"5.0.0\0" as *const u8 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"frequency\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: b"FREQ\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: b"5.0.0\0" as *const u8 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut SCAN_History: [commandHistory; 2] = [
    {
        let mut init = commandHistory {
            since: b"6.0.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added the `TYPE` subcommand.\0" as *const u8
                as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut SCAN_tips: [*const libc::c_char; 3] = [
    b"nondeterministic_output\0" as *const u8 as *const libc::c_char,
    b"request_policy:special\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut SCAN_Args: [redisCommandArg; 5] = [
    {
        let mut init = redisCommandArg {
            name: b"cursor\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"pattern\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PATTERN,
            key_spec_index: -(1 as libc::c_int),
            token: b"MATCH\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"count\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: b"COUNT\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"type\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: b"TYPE\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: b"6.0.0\0" as *const u8 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut SORT_offset_count_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"offset\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"count\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut SORT_order_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"asc\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"ASC\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"desc\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"DESC\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut SORT_Args: [redisCommandArg; 8] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"key\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_KEY,
                key_spec_index: 0 as libc::c_int,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"pattern\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_PATTERN,
                key_spec_index: 1 as libc::c_int,
                token: b"BY\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"offset_count\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_BLOCK,
                key_spec_index: -(1 as libc::c_int),
                token: b"LIMIT\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: SORT_offset_count_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"pattern\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_PATTERN,
                key_spec_index: 1 as libc::c_int,
                token: b"GET\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int
                    | (1 as libc::c_int) << 1 as libc::c_int
                    | (1 as libc::c_int) << 2 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"order\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: SORT_order_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"sorting\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_PURE_TOKEN,
                key_spec_index: -(1 as libc::c_int),
                token: b"ALPHA\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"destination\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_KEY,
                key_spec_index: 2 as libc::c_int,
                token: b"STORE\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut SORT_RO_offset_count_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"offset\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"count\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut SORT_RO_order_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"asc\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"ASC\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"desc\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"DESC\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut SORT_RO_Args: [redisCommandArg; 7] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"key\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_KEY,
                key_spec_index: 0 as libc::c_int,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"pattern\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_PATTERN,
                key_spec_index: 1 as libc::c_int,
                token: b"BY\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"offset_count\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_BLOCK,
                key_spec_index: -(1 as libc::c_int),
                token: b"LIMIT\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: SORT_RO_offset_count_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"pattern\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_PATTERN,
                key_spec_index: 1 as libc::c_int,
                token: b"GET\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int
                    | (1 as libc::c_int) << 1 as libc::c_int
                    | (1 as libc::c_int) << 2 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"order\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: SORT_RO_order_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"sorting\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_PURE_TOKEN,
                key_spec_index: -(1 as libc::c_int),
                token: b"ALPHA\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut TOUCH_tips: [*const libc::c_char; 3] = [
    b"request_policy:multi_shard\0" as *const u8 as *const libc::c_char,
    b"response_policy:agg_sum\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut TOUCH_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut TTL_History: [commandHistory; 2] = [
    {
        let mut init = commandHistory {
            since: b"2.8.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added the -2 reply.\0" as *const u8 as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut TTL_tips: [*const libc::c_char; 2] = [
    b"nondeterministic_output\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut TTL_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut TYPE_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut UNLINK_tips: [*const libc::c_char; 3] = [
    b"request_policy:multi_shard\0" as *const u8 as *const libc::c_char,
    b"response_policy:agg_sum\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut UNLINK_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut WAIT_tips: [*const libc::c_char; 3] = [
    b"request_policy:all_shards\0" as *const u8 as *const libc::c_char,
    b"response_policy:agg_min\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut WAIT_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"numreplicas\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"timeout\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut GEOADD_History: [commandHistory; 2] = [
    {
        let mut init = commandHistory {
            since: b"6.2.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added the `CH`, `NX` and `XX` options.\0" as *const u8
                as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut GEOADD_condition_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"nx\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"NX\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"xx\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"XX\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut GEOADD_longitude_latitude_member_Subargs: [redisCommandArg; 4] = [
    {
        let mut init = redisCommandArg {
            name: b"longitude\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_DOUBLE,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"latitude\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_DOUBLE,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"member\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut GEOADD_Args: [redisCommandArg; 5] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"key\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_KEY,
                key_spec_index: 0 as libc::c_int,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"condition\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: b"6.2.0\0" as *const u8 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: GEOADD_condition_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"change\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_PURE_TOKEN,
                key_spec_index: -(1 as libc::c_int),
                token: b"CH\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: b"6.2.0\0" as *const u8 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"longitude_latitude_member\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_BLOCK,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 1 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: GEOADD_longitude_latitude_member_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut GEODIST_unit_Subargs: [redisCommandArg; 5] = [
    {
        let mut init = redisCommandArg {
            name: b"m\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"M\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"km\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"KM\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"ft\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"FT\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"mi\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"MI\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut GEODIST_Args: [redisCommandArg; 5] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"key\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_KEY,
                key_spec_index: 0 as libc::c_int,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"member1\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"member2\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"unit\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: GEODIST_unit_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut GEOHASH_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"member\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut GEOPOS_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"member\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut GEORADIUS_History: [commandHistory; 3] = [
    {
        let mut init = commandHistory {
            since: b"6.2.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added the `ANY` option for `COUNT`.\0" as *const u8
                as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: b"7.0.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added support for uppercase unit names.\0" as *const u8
                as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut GEORADIUS_unit_Subargs: [redisCommandArg; 5] = [
    {
        let mut init = redisCommandArg {
            name: b"m\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"M\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"km\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"KM\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"ft\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"FT\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"mi\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"MI\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut GEORADIUS_count_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"count\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: b"COUNT\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"any\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"ANY\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: b"6.2.0\0" as *const u8 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut GEORADIUS_order_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"asc\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"ASC\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"desc\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"DESC\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut GEORADIUS_Args: [redisCommandArg; 13] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"key\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_KEY,
                key_spec_index: 0 as libc::c_int,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"longitude\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_DOUBLE,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"latitude\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_DOUBLE,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"radius\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_DOUBLE,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"unit\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: GEORADIUS_unit_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"withcoord\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_PURE_TOKEN,
                key_spec_index: -(1 as libc::c_int),
                token: b"WITHCOORD\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"withdist\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_PURE_TOKEN,
                key_spec_index: -(1 as libc::c_int),
                token: b"WITHDIST\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"withhash\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_PURE_TOKEN,
                key_spec_index: -(1 as libc::c_int),
                token: b"WITHHASH\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"count\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_BLOCK,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: GEORADIUS_count_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"order\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: GEORADIUS_order_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"key\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_KEY,
                key_spec_index: 1 as libc::c_int,
                token: b"STORE\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"key\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_KEY,
                key_spec_index: 2 as libc::c_int,
                token: b"STOREDIST\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut GEORADIUSBYMEMBER_History: [commandHistory; 2] = [
    {
        let mut init = commandHistory {
            since: b"7.0.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added support for uppercase unit names.\0" as *const u8
                as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut GEORADIUSBYMEMBER_unit_Subargs: [redisCommandArg; 5] = [
    {
        let mut init = redisCommandArg {
            name: b"m\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"M\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"km\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"KM\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"ft\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"FT\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"mi\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"MI\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut GEORADIUSBYMEMBER_count_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"count\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: b"COUNT\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"any\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"ANY\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut GEORADIUSBYMEMBER_order_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"asc\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"ASC\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"desc\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"DESC\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut GEORADIUSBYMEMBER_Args: [redisCommandArg; 12] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"key\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_KEY,
                key_spec_index: 0 as libc::c_int,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"member\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"radius\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_DOUBLE,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"unit\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: GEORADIUSBYMEMBER_unit_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"withcoord\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_PURE_TOKEN,
                key_spec_index: -(1 as libc::c_int),
                token: b"WITHCOORD\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"withdist\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_PURE_TOKEN,
                key_spec_index: -(1 as libc::c_int),
                token: b"WITHDIST\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"withhash\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_PURE_TOKEN,
                key_spec_index: -(1 as libc::c_int),
                token: b"WITHHASH\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"count\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_BLOCK,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: GEORADIUSBYMEMBER_count_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"order\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: GEORADIUSBYMEMBER_order_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"key\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_KEY,
                key_spec_index: 1 as libc::c_int,
                token: b"STORE\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"key\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_KEY,
                key_spec_index: 2 as libc::c_int,
                token: b"STOREDIST\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut GEORADIUSBYMEMBER_RO_unit_Subargs: [redisCommandArg; 5] = [
    {
        let mut init = redisCommandArg {
            name: b"m\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"M\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"km\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"KM\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"ft\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"FT\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"mi\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"MI\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut GEORADIUSBYMEMBER_RO_count_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"count\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: b"COUNT\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"any\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"ANY\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut GEORADIUSBYMEMBER_RO_order_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"asc\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"ASC\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"desc\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"DESC\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut GEORADIUSBYMEMBER_RO_Args: [redisCommandArg; 10] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"key\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_KEY,
                key_spec_index: 0 as libc::c_int,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"member\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"radius\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_DOUBLE,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"unit\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: GEORADIUSBYMEMBER_RO_unit_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"withcoord\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_PURE_TOKEN,
                key_spec_index: -(1 as libc::c_int),
                token: b"WITHCOORD\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"withdist\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_PURE_TOKEN,
                key_spec_index: -(1 as libc::c_int),
                token: b"WITHDIST\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"withhash\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_PURE_TOKEN,
                key_spec_index: -(1 as libc::c_int),
                token: b"WITHHASH\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"count\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_BLOCK,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: GEORADIUSBYMEMBER_RO_count_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"order\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: GEORADIUSBYMEMBER_RO_order_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut GEORADIUS_RO_History: [commandHistory; 2] = [
    {
        let mut init = commandHistory {
            since: b"6.2.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added the `ANY` option for `COUNT`.\0" as *const u8
                as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut GEORADIUS_RO_unit_Subargs: [redisCommandArg; 5] = [
    {
        let mut init = redisCommandArg {
            name: b"m\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"M\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"km\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"KM\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"ft\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"FT\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"mi\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"MI\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut GEORADIUS_RO_count_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"count\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: b"COUNT\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"any\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"ANY\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: b"6.2.0\0" as *const u8 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut GEORADIUS_RO_order_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"asc\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"ASC\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"desc\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"DESC\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut GEORADIUS_RO_Args: [redisCommandArg; 11] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"key\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_KEY,
                key_spec_index: 0 as libc::c_int,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"longitude\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_DOUBLE,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"latitude\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_DOUBLE,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"radius\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_DOUBLE,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"unit\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: GEORADIUS_RO_unit_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"withcoord\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_PURE_TOKEN,
                key_spec_index: -(1 as libc::c_int),
                token: b"WITHCOORD\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"withdist\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_PURE_TOKEN,
                key_spec_index: -(1 as libc::c_int),
                token: b"WITHDIST\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"withhash\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_PURE_TOKEN,
                key_spec_index: -(1 as libc::c_int),
                token: b"WITHHASH\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"count\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_BLOCK,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: GEORADIUS_RO_count_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"order\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: GEORADIUS_RO_order_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut GEOSEARCH_History: [commandHistory; 2] = [
    {
        let mut init = commandHistory {
            since: b"7.0.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added support for uppercase unit names.\0" as *const u8
                as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut GEOSEARCH_from_longitude_latitude_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"longitude\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_DOUBLE,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"latitude\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_DOUBLE,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut GEOSEARCH_from_Subargs: [redisCommandArg; 3] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"member\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: -(1 as libc::c_int),
                token: b"FROMMEMBER\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"longitude_latitude\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_BLOCK,
                key_spec_index: -(1 as libc::c_int),
                token: b"FROMLONLAT\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: GEOSEARCH_from_longitude_latitude_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut GEOSEARCH_by_circle_unit_Subargs: [redisCommandArg; 5] = [
    {
        let mut init = redisCommandArg {
            name: b"m\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"M\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"km\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"KM\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"ft\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"FT\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"mi\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"MI\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut GEOSEARCH_by_circle_Subargs: [redisCommandArg; 3] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"radius\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_DOUBLE,
                key_spec_index: -(1 as libc::c_int),
                token: b"BYRADIUS\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"unit\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: GEOSEARCH_by_circle_unit_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut GEOSEARCH_by_box_unit_Subargs: [redisCommandArg; 5] = [
    {
        let mut init = redisCommandArg {
            name: b"m\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"M\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"km\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"KM\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"ft\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"FT\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"mi\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"MI\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut GEOSEARCH_by_box_Subargs: [redisCommandArg; 4] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"width\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_DOUBLE,
                key_spec_index: -(1 as libc::c_int),
                token: b"BYBOX\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"height\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_DOUBLE,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"unit\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: GEOSEARCH_by_box_unit_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut GEOSEARCH_by_Subargs: [redisCommandArg; 3] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"circle\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_BLOCK,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: GEOSEARCH_by_circle_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"box\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_BLOCK,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: GEOSEARCH_by_box_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut GEOSEARCH_order_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"asc\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"ASC\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"desc\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"DESC\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut GEOSEARCH_count_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"count\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: b"COUNT\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"any\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"ANY\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut GEOSEARCH_Args: [redisCommandArg; 9] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"key\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_KEY,
                key_spec_index: 0 as libc::c_int,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"from\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: GEOSEARCH_from_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"by\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: GEOSEARCH_by_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"order\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: GEOSEARCH_order_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"count\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_BLOCK,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: GEOSEARCH_count_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"withcoord\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_PURE_TOKEN,
                key_spec_index: -(1 as libc::c_int),
                token: b"WITHCOORD\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"withdist\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_PURE_TOKEN,
                key_spec_index: -(1 as libc::c_int),
                token: b"WITHDIST\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"withhash\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_PURE_TOKEN,
                key_spec_index: -(1 as libc::c_int),
                token: b"WITHHASH\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut GEOSEARCHSTORE_History: [commandHistory; 2] = [
    {
        let mut init = commandHistory {
            since: b"7.0.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added support for uppercase unit names.\0" as *const u8
                as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut GEOSEARCHSTORE_from_longitude_latitude_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"longitude\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_DOUBLE,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"latitude\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_DOUBLE,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut GEOSEARCHSTORE_from_Subargs: [redisCommandArg; 3] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"member\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: -(1 as libc::c_int),
                token: b"FROMMEMBER\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"longitude_latitude\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_BLOCK,
                key_spec_index: -(1 as libc::c_int),
                token: b"FROMLONLAT\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: GEOSEARCHSTORE_from_longitude_latitude_Subargs.as_ptr()
                    as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut GEOSEARCHSTORE_by_circle_unit_Subargs: [redisCommandArg; 5] = [
    {
        let mut init = redisCommandArg {
            name: b"m\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"M\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"km\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"KM\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"ft\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"FT\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"mi\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"MI\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut GEOSEARCHSTORE_by_circle_Subargs: [redisCommandArg; 3] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"radius\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_DOUBLE,
                key_spec_index: -(1 as libc::c_int),
                token: b"BYRADIUS\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"unit\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: GEOSEARCHSTORE_by_circle_unit_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut GEOSEARCHSTORE_by_box_unit_Subargs: [redisCommandArg; 5] = [
    {
        let mut init = redisCommandArg {
            name: b"m\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"M\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"km\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"KM\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"ft\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"FT\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"mi\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"MI\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut GEOSEARCHSTORE_by_box_Subargs: [redisCommandArg; 4] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"width\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_DOUBLE,
                key_spec_index: -(1 as libc::c_int),
                token: b"BYBOX\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"height\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_DOUBLE,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"unit\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: GEOSEARCHSTORE_by_box_unit_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut GEOSEARCHSTORE_by_Subargs: [redisCommandArg; 3] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"circle\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_BLOCK,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: GEOSEARCHSTORE_by_circle_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"box\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_BLOCK,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: GEOSEARCHSTORE_by_box_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut GEOSEARCHSTORE_order_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"asc\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"ASC\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"desc\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"DESC\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut GEOSEARCHSTORE_count_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"count\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: b"COUNT\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"any\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"ANY\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut GEOSEARCHSTORE_Args: [redisCommandArg; 8] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"destination\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_KEY,
                key_spec_index: 0 as libc::c_int,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"source\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_KEY,
                key_spec_index: 1 as libc::c_int,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"from\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: GEOSEARCHSTORE_from_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"by\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: GEOSEARCHSTORE_by_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"order\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: GEOSEARCHSTORE_order_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"count\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_BLOCK,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: GEOSEARCHSTORE_count_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"storedist\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_PURE_TOKEN,
                key_spec_index: -(1 as libc::c_int),
                token: b"STOREDIST\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut HDEL_History: [commandHistory; 2] = [
    {
        let mut init = commandHistory {
            since: b"2.4.0\0" as *const u8 as *const libc::c_char,
            changes: b"Accepts multiple `field` arguments.\0" as *const u8
                as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut HDEL_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"field\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut HEXISTS_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"field\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut HGET_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"field\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut HGETALL_tips: [*const libc::c_char; 2] = [
    b"nondeterministic_output_order\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut HGETALL_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut HINCRBY_Args: [redisCommandArg; 4] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"field\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"increment\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut HINCRBYFLOAT_Args: [redisCommandArg; 4] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"field\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"increment\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_DOUBLE,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut HKEYS_tips: [*const libc::c_char; 2] = [
    b"nondeterministic_output_order\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut HKEYS_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut HLEN_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut HMGET_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"field\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut HMSET_field_value_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"field\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"value\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut HMSET_Args: [redisCommandArg; 3] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"key\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_KEY,
                key_spec_index: 0 as libc::c_int,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"field_value\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_BLOCK,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 1 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: HMSET_field_value_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut HRANDFIELD_tips: [*const libc::c_char; 2] = [
    b"nondeterministic_output\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut HRANDFIELD_options_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"count\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"withvalues\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"WITHVALUES\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut HRANDFIELD_Args: [redisCommandArg; 3] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"key\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_KEY,
                key_spec_index: 0 as libc::c_int,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"options\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_BLOCK,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: HRANDFIELD_options_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut HSCAN_tips: [*const libc::c_char; 2] = [
    b"nondeterministic_output\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut HSCAN_Args: [redisCommandArg; 5] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"cursor\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"pattern\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PATTERN,
            key_spec_index: -(1 as libc::c_int),
            token: b"MATCH\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"count\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: b"COUNT\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut HSET_History: [commandHistory; 2] = [
    {
        let mut init = commandHistory {
            since: b"4.0.0\0" as *const u8 as *const libc::c_char,
            changes: b"Accepts multiple `field` and `value` arguments.\0" as *const u8
                as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut HSET_field_value_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"field\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"value\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut HSET_Args: [redisCommandArg; 3] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"key\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_KEY,
                key_spec_index: 0 as libc::c_int,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"field_value\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_BLOCK,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 1 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: HSET_field_value_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut HSETNX_Args: [redisCommandArg; 4] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"field\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"value\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut HSTRLEN_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"field\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut HVALS_tips: [*const libc::c_char; 2] = [
    b"nondeterministic_output_order\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut HVALS_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut PFADD_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"element\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int
                | (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut PFCOUNT_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut PFDEBUG_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"subcommand\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut PFMERGE_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"destkey\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"sourcekey\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 1 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut BLMOVE_wherefrom_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"left\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"LEFT\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"right\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"RIGHT\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut BLMOVE_whereto_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"left\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"LEFT\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"right\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"RIGHT\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut BLMOVE_Args: [redisCommandArg; 6] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"source\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_KEY,
                key_spec_index: 0 as libc::c_int,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"destination\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_KEY,
                key_spec_index: 1 as libc::c_int,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"wherefrom\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: BLMOVE_wherefrom_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"whereto\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: BLMOVE_whereto_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"timeout\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_DOUBLE,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut BLMPOP_where_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"left\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"LEFT\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"right\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"RIGHT\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut BLMPOP_Args: [redisCommandArg; 6] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"timeout\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_DOUBLE,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"numkeys\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_INTEGER,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"key\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_KEY,
                key_spec_index: 0 as libc::c_int,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 1 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"where\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: BLMPOP_where_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"count\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_INTEGER,
                key_spec_index: -(1 as libc::c_int),
                token: b"COUNT\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut BLPOP_History: [commandHistory; 2] = [
    {
        let mut init = commandHistory {
            since: b"6.0.0\0" as *const u8 as *const libc::c_char,
            changes: b"`timeout` is interpreted as a double instead of an integer.\0"
                as *const u8 as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut BLPOP_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"timeout\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_DOUBLE,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut BRPOP_History: [commandHistory; 2] = [
    {
        let mut init = commandHistory {
            since: b"6.0.0\0" as *const u8 as *const libc::c_char,
            changes: b"`timeout` is interpreted as a double instead of an integer.\0"
                as *const u8 as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut BRPOP_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"timeout\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_DOUBLE,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut BRPOPLPUSH_History: [commandHistory; 2] = [
    {
        let mut init = commandHistory {
            since: b"6.0.0\0" as *const u8 as *const libc::c_char,
            changes: b"`timeout` is interpreted as a double instead of an integer.\0"
                as *const u8 as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut BRPOPLPUSH_Args: [redisCommandArg; 4] = [
    {
        let mut init = redisCommandArg {
            name: b"source\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"destination\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 1 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"timeout\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_DOUBLE,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut LINDEX_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"index\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut LINSERT_where_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"before\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"BEFORE\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"after\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"AFTER\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut LINSERT_Args: [redisCommandArg; 5] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"key\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_KEY,
                key_spec_index: 0 as libc::c_int,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"where\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: LINSERT_where_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"pivot\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"element\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut LLEN_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut LMOVE_wherefrom_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"left\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"LEFT\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"right\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"RIGHT\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut LMOVE_whereto_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"left\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"LEFT\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"right\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"RIGHT\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut LMOVE_Args: [redisCommandArg; 5] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"source\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_KEY,
                key_spec_index: 0 as libc::c_int,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"destination\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_KEY,
                key_spec_index: 1 as libc::c_int,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"wherefrom\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: LMOVE_wherefrom_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"whereto\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: LMOVE_whereto_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut LMPOP_where_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"left\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"LEFT\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"right\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"RIGHT\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut LMPOP_Args: [redisCommandArg; 5] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"numkeys\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_INTEGER,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"key\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_KEY,
                key_spec_index: 0 as libc::c_int,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 1 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"where\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: LMPOP_where_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"count\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_INTEGER,
                key_spec_index: -(1 as libc::c_int),
                token: b"COUNT\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut LPOP_History: [commandHistory; 2] = [
    {
        let mut init = commandHistory {
            since: b"6.2.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added the `count` argument.\0" as *const u8 as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut LPOP_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"count\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: b"6.2.0\0" as *const u8 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut LPOS_Args: [redisCommandArg; 6] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"element\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"rank\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: b"RANK\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"num-matches\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: b"COUNT\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"len\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: b"MAXLEN\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut LPUSH_History: [commandHistory; 2] = [
    {
        let mut init = commandHistory {
            since: b"2.4.0\0" as *const u8 as *const libc::c_char,
            changes: b"Accepts multiple `element` arguments.\0" as *const u8
                as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut LPUSH_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"element\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut LPUSHX_History: [commandHistory; 2] = [
    {
        let mut init = commandHistory {
            since: b"4.0.0\0" as *const u8 as *const libc::c_char,
            changes: b"Accepts multiple `element` arguments.\0" as *const u8
                as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut LPUSHX_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"element\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut LRANGE_Args: [redisCommandArg; 4] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"start\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"stop\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut LREM_Args: [redisCommandArg; 4] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"count\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"element\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut LSET_Args: [redisCommandArg; 4] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"index\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"element\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut LTRIM_Args: [redisCommandArg; 4] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"start\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"stop\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut RPOP_History: [commandHistory; 2] = [
    {
        let mut init = commandHistory {
            since: b"6.2.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added the `count` argument.\0" as *const u8 as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut RPOP_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"count\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: b"6.2.0\0" as *const u8 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut RPOPLPUSH_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"source\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"destination\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 1 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut RPUSH_History: [commandHistory; 2] = [
    {
        let mut init = commandHistory {
            since: b"2.4.0\0" as *const u8 as *const libc::c_char,
            changes: b"Accepts multiple `element` arguments.\0" as *const u8
                as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut RPUSH_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"element\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut RPUSHX_History: [commandHistory; 2] = [
    {
        let mut init = commandHistory {
            since: b"4.0.0\0" as *const u8 as *const libc::c_char,
            changes: b"Accepts multiple `element` arguments.\0" as *const u8
                as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut RPUSHX_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"element\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut PSUBSCRIBE_pattern_Subargs: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"pattern\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PATTERN,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut PSUBSCRIBE_Args: [redisCommandArg; 2] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"pattern\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_BLOCK,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 1 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: PSUBSCRIBE_pattern_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut PUBLISH_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"channel\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"message\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut PUBSUB_CHANNELS_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"pattern\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PATTERN,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut PUBSUB_NUMSUB_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"channel\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int
                | (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut PUBSUB_SHARDCHANNELS_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"pattern\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PATTERN,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut PUBSUB_SHARDNUMSUB_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"shardchannel\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int
                | (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut PUBSUB_Subcommands: [redisCommand; 7] = unsafe {
    [
        {
            let mut init = redisCommand {
                declared_name: b"channels\0" as *const u8 as *const libc::c_char,
                summary: b"List active channels\0" as *const u8 as *const libc::c_char,
                complexity: b"O(N) where N is the number of active channels, and assuming constant time pattern matching (relatively short channels and patterns)\0"
                    as *const u8 as *const libc::c_char,
                since: b"2.8.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_PUBSUB,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(pubsubCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(2 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 5 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: PUBSUB_CHANNELS_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"help\0" as *const u8 as *const libc::c_char,
                summary: b"Show helpful text about the different subcommands\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"6.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_PUBSUB,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(pubsubCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"numpat\0" as *const u8 as *const libc::c_char,
                summary: b"Get the count of unique patterns pattern subscriptions\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"2.8.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_PUBSUB,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(pubsubCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 5 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"numsub\0" as *const u8 as *const libc::c_char,
                summary: b"Get the count of subscribers for channels\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N) for the NUMSUB subcommand, where N is the number of requested channels\0"
                    as *const u8 as *const libc::c_char,
                since: b"2.8.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_PUBSUB,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(pubsubCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(2 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 5 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: PUBSUB_NUMSUB_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"shardchannels\0" as *const u8 as *const libc::c_char,
                summary: b"List active shard channels\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N) where N is the number of active shard channels, and assuming constant time pattern matching (relatively short shard channels).\0"
                    as *const u8 as *const libc::c_char,
                since: b"7.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_PUBSUB,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(pubsubCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(2 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 5 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: PUBSUB_SHARDCHANNELS_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"shardnumsub\0" as *const u8 as *const libc::c_char,
                summary: b"Get the count of subscribers for shard channels\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(N) for the SHARDNUMSUB subcommand, where N is the number of requested shard channels\0"
                    as *const u8 as *const libc::c_char,
                since: b"7.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_PUBSUB,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(pubsubCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(2 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 5 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: PUBSUB_SHARDNUMSUB_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                complexity: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                doc_flags: 0,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_GENERIC,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: None,
                arity: 0,
                flags: 0,
                acl_categories: 0,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut PUNSUBSCRIBE_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"pattern\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PATTERN,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int
                | (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut SPUBLISH_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"shardchannel\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"message\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut SSUBSCRIBE_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"shardchannel\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut SUBSCRIBE_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"channel\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut SUNSUBSCRIBE_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"shardchannel\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int
                | (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut UNSUBSCRIBE_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"channel\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int
                | (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut EVAL_Args: [redisCommandArg; 5] = [
    {
        let mut init = redisCommandArg {
            name: b"script\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"numkeys\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int
                | (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"arg\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int
                | (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut EVALSHA_Args: [redisCommandArg; 5] = [
    {
        let mut init = redisCommandArg {
            name: b"sha1\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"numkeys\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int
                | (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"arg\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int
                | (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut EVALSHA_RO_Args: [redisCommandArg; 5] = [
    {
        let mut init = redisCommandArg {
            name: b"sha1\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"numkeys\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int
                | (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"arg\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int
                | (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut EVAL_RO_Args: [redisCommandArg; 5] = [
    {
        let mut init = redisCommandArg {
            name: b"script\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"numkeys\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int
                | (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"arg\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int
                | (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut FCALL_Args: [redisCommandArg; 5] = [
    {
        let mut init = redisCommandArg {
            name: b"function\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"numkeys\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int
                | (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"arg\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int
                | (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut FCALL_RO_Args: [redisCommandArg; 5] = [
    {
        let mut init = redisCommandArg {
            name: b"function\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"numkeys\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int
                | (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"arg\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int
                | (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut FUNCTION_DELETE_tips: [*const libc::c_char; 3] = [
    b"request_policy:all_shards\0" as *const u8 as *const libc::c_char,
    b"response_policy:all_succeeded\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut FUNCTION_DELETE_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"library-name\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut FUNCTION_FLUSH_tips: [*const libc::c_char; 3] = [
    b"request_policy:all_shards\0" as *const u8 as *const libc::c_char,
    b"response_policy:all_succeeded\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut FUNCTION_FLUSH_async_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"async\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"ASYNC\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"sync\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"SYNC\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut FUNCTION_FLUSH_Args: [redisCommandArg; 2] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"async\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: FUNCTION_FLUSH_async_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut FUNCTION_KILL_tips: [*const libc::c_char; 3] = [
    b"request_policy:all_shards\0" as *const u8 as *const libc::c_char,
    b"response_policy:one_succeeded\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut FUNCTION_LIST_tips: [*const libc::c_char; 2] = [
    b"nondeterministic_output_order\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut FUNCTION_LIST_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"library-name-pattern\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: b"LIBRARYNAME\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"withcode\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"WITHCODE\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut FUNCTION_LOAD_tips: [*const libc::c_char; 3] = [
    b"request_policy:all_shards\0" as *const u8 as *const libc::c_char,
    b"response_policy:all_succeeded\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut FUNCTION_LOAD_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"replace\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"REPLACE\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"function-code\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut FUNCTION_RESTORE_tips: [*const libc::c_char; 3] = [
    b"request_policy:all_shards\0" as *const u8 as *const libc::c_char,
    b"response_policy:all_succeeded\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut FUNCTION_RESTORE_policy_Subargs: [redisCommandArg; 4] = [
    {
        let mut init = redisCommandArg {
            name: b"flush\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"FLUSH\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"append\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"APPEND\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"replace\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"REPLACE\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut FUNCTION_RESTORE_Args: [redisCommandArg; 3] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"serialized-value\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"policy\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: FUNCTION_RESTORE_policy_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut FUNCTION_STATS_tips: [*const libc::c_char; 4] = [
    b"nondeterministic_output\0" as *const u8 as *const libc::c_char,
    b"request_policy:all_shards\0" as *const u8 as *const libc::c_char,
    b"response_policy:special\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut FUNCTION_Subcommands: [redisCommand; 10] = unsafe {
    [
        {
            let mut init = redisCommand {
                declared_name: b"delete\0" as *const u8 as *const libc::c_char,
                summary: b"Delete a function by name\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"7.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SCRIPTING,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: FUNCTION_DELETE_tips.as_ptr() as *mut _,
                proc_0: Some(
                    functionDeleteCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: 3 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 0 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 20 as libc::c_int)
                    as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: FUNCTION_DELETE_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"dump\0" as *const u8 as *const libc::c_char,
                summary: b"Dump all functions into a serialized binary payload\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(N) where N is the number of functions\0" as *const u8
                    as *const libc::c_char,
                since: b"7.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SCRIPTING,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(
                    functionDumpCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 6 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 20 as libc::c_int)
                    as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"flush\0" as *const u8 as *const libc::c_char,
                summary: b"Deleting all functions\0" as *const u8 as *const libc::c_char,
                complexity: b"O(N) where N is the number of functions deleted\0"
                    as *const u8 as *const libc::c_char,
                since: b"7.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SCRIPTING,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: FUNCTION_FLUSH_tips.as_ptr() as *mut _,
                proc_0: Some(
                    functionFlushCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: -(2 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 0 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 20 as libc::c_int)
                    as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: FUNCTION_FLUSH_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"help\0" as *const u8 as *const libc::c_char,
                summary: b"Show helpful text about the different subcommands\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"7.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SCRIPTING,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(
                    functionHelpCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 20 as libc::c_int)
                    as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"kill\0" as *const u8 as *const libc::c_char,
                summary: b"Kill the function currently in execution.\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"7.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SCRIPTING,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: FUNCTION_KILL_tips.as_ptr() as *mut _,
                proc_0: Some(
                    functionKillCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 26 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 20 as libc::c_int)
                    as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"list\0" as *const u8 as *const libc::c_char,
                summary: b"List information about all the functions\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N) where N is the number of functions\0" as *const u8
                    as *const libc::c_char,
                since: b"7.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SCRIPTING,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: FUNCTION_LIST_tips.as_ptr() as *mut _,
                proc_0: Some(
                    functionListCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: -(2 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 6 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 20 as libc::c_int)
                    as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: FUNCTION_LIST_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"load\0" as *const u8 as *const libc::c_char,
                summary: b"Create a function with the given arguments (name, code, description)\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1) (considering compilation time is redundant)\0"
                    as *const u8 as *const libc::c_char,
                since: b"7.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SCRIPTING,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: FUNCTION_LOAD_tips.as_ptr() as *mut _,
                proc_0: Some(
                    functionLoadCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 2 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 20 as libc::c_int)
                    as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: FUNCTION_LOAD_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"restore\0" as *const u8 as *const libc::c_char,
                summary: b"Restore all the functions on the given payload\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N) where N is the number of functions on the payload\0"
                    as *const u8 as *const libc::c_char,
                since: b"7.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SCRIPTING,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: FUNCTION_RESTORE_tips.as_ptr() as *mut _,
                proc_0: Some(
                    functionRestoreCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 2 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 20 as libc::c_int)
                    as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: FUNCTION_RESTORE_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"stats\0" as *const u8 as *const libc::c_char,
                summary: b"Return information about the function currently running (name, description, duration)\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"7.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SCRIPTING,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: FUNCTION_STATS_tips.as_ptr() as *mut _,
                proc_0: Some(
                    functionStatsCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 26 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 20 as libc::c_int)
                    as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                complexity: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                doc_flags: 0,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_GENERIC,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: None,
                arity: 0,
                flags: 0,
                acl_categories: 0,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut SCRIPT_DEBUG_mode_Subargs: [redisCommandArg; 4] = [
    {
        let mut init = redisCommandArg {
            name: b"yes\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"YES\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"sync\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"SYNC\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"no\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"NO\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut SCRIPT_DEBUG_Args: [redisCommandArg; 2] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"mode\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: SCRIPT_DEBUG_mode_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut SCRIPT_EXISTS_tips: [*const libc::c_char; 3] = [
    b"request_policy:all_shards\0" as *const u8 as *const libc::c_char,
    b"response_policy:agg_logical_and\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut SCRIPT_EXISTS_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"sha1\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut SCRIPT_FLUSH_History: [commandHistory; 2] = [
    {
        let mut init = commandHistory {
            since: b"6.2.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added the `ASYNC` and `SYNC` flushing mode modifiers.\0"
                as *const u8 as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut SCRIPT_FLUSH_tips: [*const libc::c_char; 3] = [
    b"request_policy:all_nodes\0" as *const u8 as *const libc::c_char,
    b"response_policy:all_succeeded\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut SCRIPT_FLUSH_async_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"async\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"ASYNC\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"sync\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"SYNC\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut SCRIPT_FLUSH_Args: [redisCommandArg; 2] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"async\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: b"6.2.0\0" as *const u8 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: SCRIPT_FLUSH_async_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut SCRIPT_KILL_tips: [*const libc::c_char; 3] = [
    b"request_policy:all_shards\0" as *const u8 as *const libc::c_char,
    b"response_policy:one_succeeded\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut SCRIPT_LOAD_tips: [*const libc::c_char; 3] = [
    b"request_policy:all_nodes\0" as *const u8 as *const libc::c_char,
    b"response_policy:all_succeeded\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut SCRIPT_LOAD_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"script\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut SCRIPT_Subcommands: [redisCommand; 7] = unsafe {
    [
        {
            let mut init = redisCommand {
                declared_name: b"debug\0" as *const u8 as *const libc::c_char,
                summary: b"Set the debug mode for executed scripts.\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"3.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SCRIPTING,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(scriptCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 3 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 6 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 20 as libc::c_int)
                    as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: SCRIPT_DEBUG_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"exists\0" as *const u8 as *const libc::c_char,
                summary: b"Check existence of scripts in the script cache.\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(N) with N being the number of scripts to check (so checking a single script is an O(1) operation).\0"
                    as *const u8 as *const libc::c_char,
                since: b"2.6.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SCRIPTING,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: SCRIPT_EXISTS_tips.as_ptr() as *mut _,
                proc_0: Some(scriptCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 6 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 20 as libc::c_int)
                    as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: SCRIPT_EXISTS_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"flush\0" as *const u8 as *const libc::c_char,
                summary: b"Remove all the scripts from the script cache.\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N) with N being the number of scripts in cache\0"
                    as *const u8 as *const libc::c_char,
                since: b"2.6.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SCRIPTING,
                history: SCRIPT_FLUSH_History.as_ptr() as *mut _,
                tips: SCRIPT_FLUSH_tips.as_ptr() as *mut _,
                proc_0: Some(scriptCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(2 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 6 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 20 as libc::c_int)
                    as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: SCRIPT_FLUSH_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"help\0" as *const u8 as *const libc::c_char,
                summary: b"Show helpful text about the different subcommands\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"5.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SCRIPTING,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(scriptCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 20 as libc::c_int)
                    as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"kill\0" as *const u8 as *const libc::c_char,
                summary: b"Kill the script currently in execution.\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"2.6.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SCRIPTING,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: SCRIPT_KILL_tips.as_ptr() as *mut _,
                proc_0: Some(scriptCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 26 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 20 as libc::c_int)
                    as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"load\0" as *const u8 as *const libc::c_char,
                summary: b"Load the specified Lua script into the script cache.\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(N) with N being the length in bytes of the script body.\0"
                    as *const u8 as *const libc::c_char,
                since: b"2.6.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SCRIPTING,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: SCRIPT_LOAD_tips.as_ptr() as *mut _,
                proc_0: Some(scriptCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 3 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 20 as libc::c_int)
                    as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: SCRIPT_LOAD_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                complexity: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                doc_flags: 0,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_GENERIC,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: None,
                arity: 0,
                flags: 0,
                acl_categories: 0,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut SENTINEL_CKQUORUM_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"master-name\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut SENTINEL_CONFIG_set_or_get_set_param_value_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"parameter\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"value\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut SENTINEL_CONFIG_set_or_get_Subargs: [redisCommandArg; 3] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"set_param_value\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_BLOCK,
                key_spec_index: -(1 as libc::c_int),
                token: b"SET\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 1 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: SENTINEL_CONFIG_set_or_get_set_param_value_Subargs.as_ptr()
                    as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"parameter\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: -(1 as libc::c_int),
                token: b"GET\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 1 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut SENTINEL_CONFIG_Args: [redisCommandArg; 2] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"set_or_get\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: SENTINEL_CONFIG_set_or_get_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut SENTINEL_DEBUG_parameter_value_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"parameter\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"value\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut SENTINEL_DEBUG_Args: [redisCommandArg; 2] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"parameter_value\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_BLOCK,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 1 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: SENTINEL_DEBUG_parameter_value_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut SENTINEL_FAILOVER_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"master-name\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut SENTINEL_GET_MASTER_ADDR_BY_NAME_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"master-name\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut SENTINEL_INFO_CACHE_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"nodename\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut SENTINEL_IS_MASTER_DOWN_BY_ADDR_Args: [redisCommandArg; 5] = [
    {
        let mut init = redisCommandArg {
            name: b"ip\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"port\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"current-epoch\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"runid\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut SENTINEL_MASTER_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"master-name\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut SENTINEL_MONITOR_Args: [redisCommandArg; 5] = [
    {
        let mut init = redisCommandArg {
            name: b"name\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"ip\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"port\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"quorum\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut SENTINEL_REMOVE_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"master-name\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut SENTINEL_REPLICAS_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"master-name\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut SENTINEL_RESET_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"pattern\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PATTERN,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut SENTINEL_SENTINELS_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"master-name\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut SENTINEL_SET_option_value_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"option\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"value\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut SENTINEL_SET_Args: [redisCommandArg; 3] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"master-name\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"option_value\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_BLOCK,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 1 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: SENTINEL_SET_option_value_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut SENTINEL_SIMULATE_FAILURE_mode_Subargs: [redisCommandArg; 4] = [
    {
        let mut init = redisCommandArg {
            name: b"crash-after-election\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"crash-after-promotion\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"help\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut SENTINEL_SIMULATE_FAILURE_Args: [redisCommandArg; 2] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"mode\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int
                    | (1 as libc::c_int) << 1 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: SENTINEL_SIMULATE_FAILURE_mode_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut SENTINEL_SLAVES_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"master-name\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut SENTINEL_Subcommands: [redisCommand; 22] = unsafe {
    [
        {
            let mut init = redisCommand {
                declared_name: b"ckquorum\0" as *const u8 as *const libc::c_char,
                summary: b"Check for a Sentinel quorum\0" as *const u8
                    as *const libc::c_char,
                complexity: 0 as *const libc::c_char,
                since: b"2.8.4\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SENTINEL,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(sentinelCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 3 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int
                    | (1 as libc::c_ulonglong) << 18 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: SENTINEL_CKQUORUM_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"config\0" as *const u8 as *const libc::c_char,
                summary: b"Configure Sentinel\0" as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"6.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SENTINEL,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(sentinelCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int
                    | (1 as libc::c_ulonglong) << 18 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: SENTINEL_CONFIG_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"debug\0" as *const u8 as *const libc::c_char,
                summary: b"List or update the current configurable parameters\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(N) where N is the number of configurable parameters\0"
                    as *const u8 as *const libc::c_char,
                since: b"7.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SENTINEL,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(sentinelCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(2 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int
                    | (1 as libc::c_ulonglong) << 18 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: SENTINEL_DEBUG_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"failover\0" as *const u8 as *const libc::c_char,
                summary: b"Force a failover\0" as *const u8 as *const libc::c_char,
                complexity: 0 as *const libc::c_char,
                since: b"2.8.4\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SENTINEL,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(sentinelCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 3 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int
                    | (1 as libc::c_ulonglong) << 18 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: SENTINEL_FAILOVER_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"flushconfig\0" as *const u8 as *const libc::c_char,
                summary: b"Rewrite configuration file\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"2.8.4\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SENTINEL,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(sentinelCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int
                    | (1 as libc::c_ulonglong) << 18 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"get-master-addr-by-name\0" as *const u8
                    as *const libc::c_char,
                summary: b"Get port and address of a master\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"2.8.4\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SENTINEL,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(sentinelCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 3 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int
                    | (1 as libc::c_ulonglong) << 18 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: SENTINEL_GET_MASTER_ADDR_BY_NAME_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"help\0" as *const u8 as *const libc::c_char,
                summary: b"Show helpful text about the different subcommands\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"6.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SENTINEL,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(sentinelCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int
                    | (1 as libc::c_ulonglong) << 18 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"info-cache\0" as *const u8 as *const libc::c_char,
                summary: b"Get cached INFO from the instances in the deployment\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(N) where N is the number of instances\0" as *const u8
                    as *const libc::c_char,
                since: b"3.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SENTINEL,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(sentinelCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int
                    | (1 as libc::c_ulonglong) << 18 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: SENTINEL_INFO_CACHE_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"is-master-down-by-addr\0" as *const u8
                    as *const libc::c_char,
                summary: b"Check if a master is down\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"2.8.4\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SENTINEL,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(sentinelCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 6 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int
                    | (1 as libc::c_ulonglong) << 18 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: SENTINEL_IS_MASTER_DOWN_BY_ADDR_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"master\0" as *const u8 as *const libc::c_char,
                summary: b"Shows the state of a master\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"2.8.4\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SENTINEL,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(sentinelCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 3 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int
                    | (1 as libc::c_ulonglong) << 18 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: SENTINEL_MASTER_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"masters\0" as *const u8 as *const libc::c_char,
                summary: b"List the monitored masters\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N) where N is the number of masters\0" as *const u8
                    as *const libc::c_char,
                since: b"2.8.4\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SENTINEL,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(sentinelCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int
                    | (1 as libc::c_ulonglong) << 18 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"monitor\0" as *const u8 as *const libc::c_char,
                summary: b"Start monitoring\0" as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"2.8.4\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SENTINEL,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(sentinelCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 6 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int
                    | (1 as libc::c_ulonglong) << 18 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: SENTINEL_MONITOR_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"myid\0" as *const u8 as *const libc::c_char,
                summary: b"Get the Sentinel instance ID\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"6.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SENTINEL,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(sentinelCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int
                    | (1 as libc::c_ulonglong) << 18 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"pending-scripts\0" as *const u8 as *const libc::c_char,
                summary: b"Get information about pending scripts\0" as *const u8
                    as *const libc::c_char,
                complexity: 0 as *const libc::c_char,
                since: b"2.8.4\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SENTINEL,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(sentinelCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int
                    | (1 as libc::c_ulonglong) << 18 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"remove\0" as *const u8 as *const libc::c_char,
                summary: b"Stop monitoring\0" as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"2.8.4\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SENTINEL,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(sentinelCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 3 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int
                    | (1 as libc::c_ulonglong) << 18 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: SENTINEL_REMOVE_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"replicas\0" as *const u8 as *const libc::c_char,
                summary: b"List the monitored replicas\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N) where N is the number of replicas\0" as *const u8
                    as *const libc::c_char,
                since: b"5.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SENTINEL,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(sentinelCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 3 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int
                    | (1 as libc::c_ulonglong) << 18 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: SENTINEL_REPLICAS_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"reset\0" as *const u8 as *const libc::c_char,
                summary: b"Reset masters by name pattern\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N) where N is the number of monitored masters\0"
                    as *const u8 as *const libc::c_char,
                since: b"2.8.4\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SENTINEL,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(sentinelCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 3 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int
                    | (1 as libc::c_ulonglong) << 18 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: SENTINEL_RESET_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"sentinels\0" as *const u8 as *const libc::c_char,
                summary: b"List the Sentinel instances\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N) where N is the number of Sentinels\0" as *const u8
                    as *const libc::c_char,
                since: b"2.8.4\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SENTINEL,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(sentinelCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 3 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int
                    | (1 as libc::c_ulonglong) << 18 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: SENTINEL_SENTINELS_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"set\0" as *const u8 as *const libc::c_char,
                summary: b"Change the configuration of a monitored master\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"2.8.4\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SENTINEL,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(sentinelCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(5 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int
                    | (1 as libc::c_ulonglong) << 18 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: SENTINEL_SET_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"simulate-failure\0" as *const u8 as *const libc::c_char,
                summary: b"Simulate failover scenarios\0" as *const u8
                    as *const libc::c_char,
                complexity: 0 as *const libc::c_char,
                since: b"3.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SENTINEL,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(sentinelCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int
                    | (1 as libc::c_ulonglong) << 18 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: SENTINEL_SIMULATE_FAILURE_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"slaves\0" as *const u8 as *const libc::c_char,
                summary: b"List the monitored slaves\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N) where N is the number of slaves\0" as *const u8
                    as *const libc::c_char,
                since: b"2.8.0\0" as *const u8 as *const libc::c_char,
                doc_flags: (1 as libc::c_int) << 0 as libc::c_int,
                replaced_by: b"`SENTINEL REPLICAS`\0" as *const u8
                    as *const libc::c_char,
                deprecated_since: b"5.0.0\0" as *const u8 as *const libc::c_char,
                group: COMMAND_GROUP_SENTINEL,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(sentinelCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 3 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int
                    | (1 as libc::c_ulonglong) << 18 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: SENTINEL_SLAVES_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                complexity: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                doc_flags: 0,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_GENERIC,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: None,
                arity: 0,
                flags: 0,
                acl_categories: 0,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut ACL_CAT_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"categoryname\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut ACL_DELUSER_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"username\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut ACL_DRYRUN_Args: [redisCommandArg; 4] = [
    {
        let mut init = redisCommandArg {
            name: b"username\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"command\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"arg\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int
                | (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut ACL_GENPASS_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"bits\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut ACL_GETUSER_History: [commandHistory; 3] = [
    {
        let mut init = commandHistory {
            since: b"6.2.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added Pub/Sub channel patterns.\0" as *const u8
                as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: b"7.0.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added selectors and changed the format of key and channel patterns from a list to their rule representation.\0"
                as *const u8 as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut ACL_GETUSER_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"username\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut ACL_LOG_operation_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"count\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"reset\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"RESET\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut ACL_LOG_Args: [redisCommandArg; 2] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"operation\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: ACL_LOG_operation_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut ACL_SETUSER_History: [commandHistory; 3] = [
    {
        let mut init = commandHistory {
            since: b"6.2.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added Pub/Sub channel patterns.\0" as *const u8
                as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: b"7.0.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added selectors and key based permissions.\0" as *const u8
                as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut ACL_SETUSER_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"username\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"rule\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int
                | (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut ACL_Subcommands: [redisCommand; 14] = unsafe {
    [
        {
            let mut init = redisCommand {
                declared_name: b"cat\0" as *const u8 as *const libc::c_char,
                summary: b"List the ACL categories or the commands inside a category\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1) since the categories and commands are a fixed set.\0"
                    as *const u8 as *const libc::c_char,
                since: b"6.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(aclCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(2 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: ACL_CAT_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"deluser\0" as *const u8 as *const libc::c_char,
                summary: b"Remove the specified ACL users and the associated rules\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1) amortized time considering the typical user.\0"
                    as *const u8 as *const libc::c_char,
                since: b"6.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(aclCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: ACL_DELUSER_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"dryrun\0" as *const u8 as *const libc::c_char,
                summary: b"Returns whether the user can execute the given command without executing the command.\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1).\0" as *const u8 as *const libc::c_char,
                since: b"7.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(aclCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(4 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: ACL_DRYRUN_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"genpass\0" as *const u8 as *const libc::c_char,
                summary: b"Generate a pseudorandom secure password to use for ACL users\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"6.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(aclCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(2 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: ACL_GENPASS_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"getuser\0" as *const u8 as *const libc::c_char,
                summary: b"Get the rules for a specific ACL user\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N). Where N is the number of password, command and pattern rules that the user has.\0"
                    as *const u8 as *const libc::c_char,
                since: b"6.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: ACL_GETUSER_History.as_ptr() as *mut _,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(aclCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 3 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: ACL_GETUSER_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"help\0" as *const u8 as *const libc::c_char,
                summary: b"Show helpful text about the different subcommands\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"6.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(aclCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"list\0" as *const u8 as *const libc::c_char,
                summary: b"List the current ACL rules in ACL config file format\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(N). Where N is the number of configured users.\0"
                    as *const u8 as *const libc::c_char,
                since: b"6.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(aclCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"load\0" as *const u8 as *const libc::c_char,
                summary: b"Reload the ACLs from the configured ACL file\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N). Where N is the number of configured users.\0"
                    as *const u8 as *const libc::c_char,
                since: b"6.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(aclCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"log\0" as *const u8 as *const libc::c_char,
                summary: b"List latest events denied because of ACLs in place\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(N) with N being the number of entries shown.\0"
                    as *const u8 as *const libc::c_char,
                since: b"6.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(aclCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(2 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: ACL_LOG_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"save\0" as *const u8 as *const libc::c_char,
                summary: b"Save the current ACL rules in the configured ACL file\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(N). Where N is the number of configured users.\0"
                    as *const u8 as *const libc::c_char,
                since: b"6.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(aclCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"setuser\0" as *const u8 as *const libc::c_char,
                summary: b"Modify or create the rules for a specific ACL user\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(N). Where N is the number of rules provided.\0"
                    as *const u8 as *const libc::c_char,
                since: b"6.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: ACL_SETUSER_History.as_ptr() as *mut _,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(aclCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: ACL_SETUSER_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"users\0" as *const u8 as *const libc::c_char,
                summary: b"List the username of all the configured ACL rules\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(N). Where N is the number of configured users.\0"
                    as *const u8 as *const libc::c_char,
                since: b"6.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(aclCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"whoami\0" as *const u8 as *const libc::c_char,
                summary: b"Return the name of the user associated to the current connection\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"6.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(aclCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                complexity: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                doc_flags: 0,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_GENERIC,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: None,
                arity: 0,
                flags: 0,
                acl_categories: 0,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut BGSAVE_History: [commandHistory; 2] = [
    {
        let mut init = commandHistory {
            since: b"3.2.2\0" as *const u8 as *const libc::c_char,
            changes: b"Added the `SCHEDULE` option.\0" as *const u8
                as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut BGSAVE_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"schedule\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"SCHEDULE\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: b"3.2.2\0" as *const u8 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut COMMAND_DOCS_tips: [*const libc::c_char; 2] = [
    b"nondeterministic_output_order\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut COMMAND_DOCS_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"command-name\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int
                | (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut COMMAND_INFO_History: [commandHistory; 2] = [
    {
        let mut init = commandHistory {
            since: b"7.0.0\0" as *const u8 as *const libc::c_char,
            changes: b"Allowed to be called with no argument to get info on all commands.\0"
                as *const u8 as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut COMMAND_INFO_tips: [*const libc::c_char; 2] = [
    b"nondeterministic_output_order\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut COMMAND_INFO_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"command-name\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int
                | (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut COMMAND_LIST_tips: [*const libc::c_char; 2] = [
    b"nondeterministic_output_order\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut COMMAND_LIST_filterby_Subargs: [redisCommandArg; 4] = [
    {
        let mut init = redisCommandArg {
            name: b"module-name\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: b"MODULE\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"category\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: b"ACLCAT\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"pattern\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PATTERN,
            key_spec_index: -(1 as libc::c_int),
            token: b"PATTERN\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut COMMAND_LIST_Args: [redisCommandArg; 2] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"filterby\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: b"FILTERBY\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: COMMAND_LIST_filterby_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut COMMAND_Subcommands: [redisCommand; 8] = unsafe {
    [
        {
            let mut init = redisCommand {
                declared_name: b"count\0" as *const u8 as *const libc::c_char,
                summary: b"Get total number of Redis commands\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"2.8.13\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(
                    commandCountCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 18 as libc::c_int)
                    as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"docs\0" as *const u8 as *const libc::c_char,
                summary: b"Get array of specific Redis command documentation\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(N) where N is the number of commands to look up\0"
                    as *const u8 as *const libc::c_char,
                since: b"7.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: COMMAND_DOCS_tips.as_ptr() as *mut _,
                proc_0: Some(
                    commandDocsCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: -(2 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 18 as libc::c_int)
                    as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: COMMAND_DOCS_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"getkeys\0" as *const u8 as *const libc::c_char,
                summary: b"Extract keys given a full Redis command\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N) where N is the number of arguments to the command\0"
                    as *const u8 as *const libc::c_char,
                since: b"2.8.13\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(
                    commandGetKeysCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: -(4 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 18 as libc::c_int)
                    as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"getkeysandflags\0" as *const u8 as *const libc::c_char,
                summary: b"Extract keys and access flags given a full Redis command\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(N) where N is the number of arguments to the command\0"
                    as *const u8 as *const libc::c_char,
                since: b"7.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(
                    commandGetKeysAndFlagsCommand
                        as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: -(4 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 18 as libc::c_int)
                    as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"help\0" as *const u8 as *const libc::c_char,
                summary: b"Show helpful text about the different subcommands\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"5.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(
                    commandHelpCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 18 as libc::c_int)
                    as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"info\0" as *const u8 as *const libc::c_char,
                summary: b"Get array of specific Redis command details, or all when no argument is given.\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(N) where N is the number of commands to look up\0"
                    as *const u8 as *const libc::c_char,
                since: b"2.8.13\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: COMMAND_INFO_History.as_ptr() as *mut _,
                tips: COMMAND_INFO_tips.as_ptr() as *mut _,
                proc_0: Some(
                    commandInfoCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: -(2 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 18 as libc::c_int)
                    as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: COMMAND_INFO_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"list\0" as *const u8 as *const libc::c_char,
                summary: b"Get an array of Redis command names\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N) where N is the total number of Redis commands\0"
                    as *const u8 as *const libc::c_char,
                since: b"7.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: COMMAND_LIST_tips.as_ptr() as *mut _,
                proc_0: Some(
                    commandListCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: -(2 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 18 as libc::c_int)
                    as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: COMMAND_LIST_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                complexity: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                doc_flags: 0,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_GENERIC,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: None,
                arity: 0,
                flags: 0,
                acl_categories: 0,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut COMMAND_tips: [*const libc::c_char; 2] = [
    b"nondeterministic_output_order\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut CONFIG_GET_History: [commandHistory; 2] = [
    {
        let mut init = commandHistory {
            since: b"7.0.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added the ability to pass multiple pattern parameters in one call\0"
                as *const u8 as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut CONFIG_GET_parameter_Subargs: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"parameter\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut CONFIG_GET_Args: [redisCommandArg; 2] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"parameter\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_BLOCK,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 1 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: CONFIG_GET_parameter_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut CONFIG_SET_History: [commandHistory; 2] = [
    {
        let mut init = commandHistory {
            since: b"7.0.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added the ability to set multiple parameters in one call.\0"
                as *const u8 as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut CONFIG_SET_tips: [*const libc::c_char; 3] = [
    b"request_policy:all_nodes\0" as *const u8 as *const libc::c_char,
    b"response_policy:all_succeeded\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut CONFIG_SET_parameter_value_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"parameter\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"value\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut CONFIG_SET_Args: [redisCommandArg; 2] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"parameter_value\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_BLOCK,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 1 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: CONFIG_SET_parameter_value_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut CONFIG_Subcommands: [redisCommand; 6] = unsafe {
    [
        {
            let mut init = redisCommand {
                declared_name: b"get\0" as *const u8 as *const libc::c_char,
                summary: b"Get the values of configuration parameters\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N) when N is the number of configuration parameters provided\0"
                    as *const u8 as *const libc::c_char,
                since: b"2.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: CONFIG_GET_History.as_ptr() as *mut _,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(
                    configGetCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: CONFIG_GET_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"help\0" as *const u8 as *const libc::c_char,
                summary: b"Show helpful text about the different subcommands\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"5.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(
                    configHelpCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"resetstat\0" as *const u8 as *const libc::c_char,
                summary: b"Reset the stats returned by INFO\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"2.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(
                    configResetStatCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"rewrite\0" as *const u8 as *const libc::c_char,
                summary: b"Rewrite the configuration file with the in memory configuration\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"2.8.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(
                    configRewriteCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"set\0" as *const u8 as *const libc::c_char,
                summary: b"Set configuration parameters to the given values\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(N) when N is the number of configuration parameters provided\0"
                    as *const u8 as *const libc::c_char,
                since: b"2.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: CONFIG_SET_History.as_ptr() as *mut _,
                tips: CONFIG_SET_tips.as_ptr() as *mut _,
                proc_0: Some(
                    configSetCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: -(4 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: CONFIG_SET_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                complexity: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                doc_flags: 0,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_GENERIC,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: None,
                arity: 0,
                flags: 0,
                acl_categories: 0,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut DBSIZE_tips: [*const libc::c_char; 3] = [
    b"request_policy:all_shards\0" as *const u8 as *const libc::c_char,
    b"response_policy:agg_sum\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut FAILOVER_target_Subargs: [redisCommandArg; 4] = [
    {
        let mut init = redisCommandArg {
            name: b"host\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"port\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"force\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"FORCE\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut FAILOVER_Args: [redisCommandArg; 4] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"target\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_BLOCK,
                key_spec_index: -(1 as libc::c_int),
                token: b"TO\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: FAILOVER_target_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"abort\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_PURE_TOKEN,
                key_spec_index: -(1 as libc::c_int),
                token: b"ABORT\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"milliseconds\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_INTEGER,
                key_spec_index: -(1 as libc::c_int),
                token: b"TIMEOUT\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut FLUSHALL_History: [commandHistory; 3] = [
    {
        let mut init = commandHistory {
            since: b"4.0.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added the `ASYNC` flushing mode modifier.\0" as *const u8
                as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: b"6.2.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added the `SYNC` flushing mode modifier.\0" as *const u8
                as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut FLUSHALL_tips: [*const libc::c_char; 3] = [
    b"request_policy:all_shards\0" as *const u8 as *const libc::c_char,
    b"response_policy:all_succeeded\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut FLUSHALL_async_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"async\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"ASYNC\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: b"4.0.0\0" as *const u8 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"sync\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"SYNC\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: b"6.2.0\0" as *const u8 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut FLUSHALL_Args: [redisCommandArg; 2] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"async\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: FLUSHALL_async_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut FLUSHDB_History: [commandHistory; 3] = [
    {
        let mut init = commandHistory {
            since: b"4.0.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added the `ASYNC` flushing mode modifier.\0" as *const u8
                as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: b"6.2.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added the `SYNC` flushing mode modifier.\0" as *const u8
                as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut FLUSHDB_tips: [*const libc::c_char; 3] = [
    b"request_policy:all_shards\0" as *const u8 as *const libc::c_char,
    b"response_policy:all_succeeded\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut FLUSHDB_async_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"async\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"ASYNC\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: b"4.0.0\0" as *const u8 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"sync\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"SYNC\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: b"6.2.0\0" as *const u8 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut FLUSHDB_Args: [redisCommandArg; 2] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"async\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: FLUSHDB_async_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut INFO_History: [commandHistory; 2] = [
    {
        let mut init = commandHistory {
            since: b"7.0.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added support for taking multiple section arguments.\0"
                as *const u8 as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut INFO_tips: [*const libc::c_char; 4] = [
    b"nondeterministic_output\0" as *const u8 as *const libc::c_char,
    b"request_policy:all_shards\0" as *const u8 as *const libc::c_char,
    b"response_policy:special\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut INFO_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"section\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int
                | (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut LASTSAVE_tips: [*const libc::c_char; 2] = [
    b"nondeterministic_output\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut LATENCY_DOCTOR_tips: [*const libc::c_char; 4] = [
    b"nondeterministic_output\0" as *const u8 as *const libc::c_char,
    b"request_policy:all_nodes\0" as *const u8 as *const libc::c_char,
    b"response_policy:special\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut LATENCY_GRAPH_tips: [*const libc::c_char; 4] = [
    b"nondeterministic_output\0" as *const u8 as *const libc::c_char,
    b"request_policy:all_nodes\0" as *const u8 as *const libc::c_char,
    b"response_policy:special\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut LATENCY_GRAPH_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"event\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut LATENCY_HISTOGRAM_tips: [*const libc::c_char; 4] = [
    b"nondeterministic_output\0" as *const u8 as *const libc::c_char,
    b"request_policy:all_nodes\0" as *const u8 as *const libc::c_char,
    b"response_policy:special\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut LATENCY_HISTOGRAM_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"command\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int
                | (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut LATENCY_HISTORY_tips: [*const libc::c_char; 4] = [
    b"nondeterministic_output\0" as *const u8 as *const libc::c_char,
    b"request_policy:all_nodes\0" as *const u8 as *const libc::c_char,
    b"response_policy:special\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut LATENCY_HISTORY_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"event\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut LATENCY_LATEST_tips: [*const libc::c_char; 4] = [
    b"nondeterministic_output\0" as *const u8 as *const libc::c_char,
    b"request_policy:all_nodes\0" as *const u8 as *const libc::c_char,
    b"response_policy:special\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut LATENCY_RESET_tips: [*const libc::c_char; 3] = [
    b"request_policy:all_nodes\0" as *const u8 as *const libc::c_char,
    b"response_policy:all_succeeded\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut LATENCY_RESET_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"event\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int
                | (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut LATENCY_Subcommands: [redisCommand; 8] = unsafe {
    [
        {
            let mut init = redisCommand {
                declared_name: b"doctor\0" as *const u8 as *const libc::c_char,
                summary: b"Return a human readable latency analysis report.\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"2.8.13\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: LATENCY_DOCTOR_tips.as_ptr() as *mut _,
                proc_0: Some(latencyCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"graph\0" as *const u8 as *const libc::c_char,
                summary: b"Return a latency graph for the event.\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"2.8.13\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: LATENCY_GRAPH_tips.as_ptr() as *mut _,
                proc_0: Some(latencyCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 3 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: LATENCY_GRAPH_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"help\0" as *const u8 as *const libc::c_char,
                summary: b"Show helpful text about the different subcommands.\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"2.8.13\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(latencyCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"histogram\0" as *const u8 as *const libc::c_char,
                summary: b"Return the cumulative distribution of latencies of a subset of commands or all.\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(N) where N is the number of commands with latency information being retrieved.\0"
                    as *const u8 as *const libc::c_char,
                since: b"7.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: LATENCY_HISTOGRAM_tips.as_ptr() as *mut _,
                proc_0: Some(latencyCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(2 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: LATENCY_HISTOGRAM_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"history\0" as *const u8 as *const libc::c_char,
                summary: b"Return timestamp-latency samples for the event.\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"2.8.13\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: LATENCY_HISTORY_tips.as_ptr() as *mut _,
                proc_0: Some(latencyCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 3 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: LATENCY_HISTORY_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"latest\0" as *const u8 as *const libc::c_char,
                summary: b"Return the latest latency samples for all events.\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"2.8.13\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: LATENCY_LATEST_tips.as_ptr() as *mut _,
                proc_0: Some(latencyCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"reset\0" as *const u8 as *const libc::c_char,
                summary: b"Reset latency data for one or more events.\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"2.8.13\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: LATENCY_RESET_tips.as_ptr() as *mut _,
                proc_0: Some(latencyCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(2 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: LATENCY_RESET_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                complexity: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                doc_flags: 0,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_GENERIC,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: None,
                arity: 0,
                flags: 0,
                acl_categories: 0,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut LOLWUT_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"version\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: b"VERSION\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut MEMORY_DOCTOR_tips: [*const libc::c_char; 4] = [
    b"nondeterministic_output\0" as *const u8 as *const libc::c_char,
    b"request_policy:all_shards\0" as *const u8 as *const libc::c_char,
    b"response_policy:special\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut MEMORY_MALLOC_STATS_tips: [*const libc::c_char; 4] = [
    b"nondeterministic_output\0" as *const u8 as *const libc::c_char,
    b"request_policy:all_shards\0" as *const u8 as *const libc::c_char,
    b"response_policy:special\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut MEMORY_PURGE_tips: [*const libc::c_char; 3] = [
    b"request_policy:all_shards\0" as *const u8 as *const libc::c_char,
    b"response_policy:all_succeeded\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut MEMORY_STATS_tips: [*const libc::c_char; 4] = [
    b"nondeterministic_output\0" as *const u8 as *const libc::c_char,
    b"request_policy:all_shards\0" as *const u8 as *const libc::c_char,
    b"response_policy:special\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut MEMORY_USAGE_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"count\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: b"SAMPLES\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut MEMORY_Subcommands: [redisCommand; 7] = unsafe {
    [
        {
            let mut init = redisCommand {
                declared_name: b"doctor\0" as *const u8 as *const libc::c_char,
                summary: b"Outputs memory problems report\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"4.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: MEMORY_DOCTOR_tips.as_ptr() as *mut _,
                proc_0: Some(memoryCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: 0 as libc::c_int as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"help\0" as *const u8 as *const libc::c_char,
                summary: b"Show helpful text about the different subcommands\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"4.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(memoryCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"malloc-stats\0" as *const u8 as *const libc::c_char,
                summary: b"Show allocator internal stats\0" as *const u8
                    as *const libc::c_char,
                complexity: b"Depends on how much memory is allocated, could be slow\0"
                    as *const u8 as *const libc::c_char,
                since: b"4.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: MEMORY_MALLOC_STATS_tips.as_ptr() as *mut _,
                proc_0: Some(memoryCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: 0 as libc::c_int as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"purge\0" as *const u8 as *const libc::c_char,
                summary: b"Ask the allocator to release memory\0" as *const u8
                    as *const libc::c_char,
                complexity: b"Depends on how much memory is allocated, could be slow\0"
                    as *const u8 as *const libc::c_char,
                since: b"4.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: MEMORY_PURGE_tips.as_ptr() as *mut _,
                proc_0: Some(memoryCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: 0 as libc::c_int as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"stats\0" as *const u8 as *const libc::c_char,
                summary: b"Show memory usage details\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"4.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: MEMORY_STATS_tips.as_ptr() as *mut _,
                proc_0: Some(memoryCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: 0 as libc::c_int as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"usage\0" as *const u8 as *const libc::c_char,
                summary: b"Estimate the memory usage of a key\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N) where N is the number of samples.\0" as *const u8
                    as *const libc::c_char,
                since: b"4.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(memoryCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int)
                                as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 2 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: MEMORY_USAGE_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                complexity: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                doc_flags: 0,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_GENERIC,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: None,
                arity: 0,
                flags: 0,
                acl_categories: 0,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut MODULE_LIST_tips: [*const libc::c_char; 2] = [
    b"nondeterministic_output_order\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut MODULE_LOAD_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"path\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"arg\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int
                | (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut MODULE_LOADEX_configs_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"name\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"value\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut MODULE_LOADEX_args_Subargs: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"arg\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut MODULE_LOADEX_Args: [redisCommandArg; 4] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"path\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"configs\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_BLOCK,
                key_spec_index: -(1 as libc::c_int),
                token: b"CONFIG\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int
                    | (1 as libc::c_int) << 1 as libc::c_int
                    | (1 as libc::c_int) << 2 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: MODULE_LOADEX_configs_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"args\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_BLOCK,
                key_spec_index: -(1 as libc::c_int),
                token: b"ARGS\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int
                    | (1 as libc::c_int) << 1 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: MODULE_LOADEX_args_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut MODULE_UNLOAD_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"name\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut MODULE_Subcommands: [redisCommand; 6] = unsafe {
    [
        {
            let mut init = redisCommand {
                declared_name: b"help\0" as *const u8 as *const libc::c_char,
                summary: b"Show helpful text about the different subcommands\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"5.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(moduleCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"list\0" as *const u8 as *const libc::c_char,
                summary: b"List all modules loaded by the server\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N) where N is the number of loaded modules.\0"
                    as *const u8 as *const libc::c_char,
                since: b"4.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: MODULE_LIST_tips.as_ptr() as *mut _,
                proc_0: Some(moduleCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 6 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"load\0" as *const u8 as *const libc::c_char,
                summary: b"Load a module\0" as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"4.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(moduleCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 23 as libc::c_int
                    | (1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 20 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: MODULE_LOAD_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"loadex\0" as *const u8 as *const libc::c_char,
                summary: b"Load a module with extended parameters\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"7.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(moduleCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 23 as libc::c_int
                    | (1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 20 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: MODULE_LOADEX_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"unload\0" as *const u8 as *const libc::c_char,
                summary: b"Unload a module\0" as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"4.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(moduleCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 3 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 23 as libc::c_int
                    | (1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 20 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: MODULE_UNLOAD_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                complexity: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                doc_flags: 0,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_GENERIC,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: None,
                arity: 0,
                flags: 0,
                acl_categories: 0,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut PSYNC_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"replicationid\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"offset\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut REPLICAOF_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"host\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"port\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut RESTORE_ASKING_History: [commandHistory; 4] = [
    {
        let mut init = commandHistory {
            since: b"3.0.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added the `REPLACE` modifier.\0" as *const u8
                as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: b"5.0.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added the `ABSTTL` modifier.\0" as *const u8
                as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: b"5.0.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added the `IDLETIME` and `FREQ` options.\0" as *const u8
                as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut RESTORE_ASKING_Args: [redisCommandArg; 8] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"ttl\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"serialized-value\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"replace\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"REPLACE\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: b"3.0.0\0" as *const u8 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"absttl\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"ABSTTL\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: b"5.0.0\0" as *const u8 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"seconds\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: b"IDLETIME\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: b"5.0.0\0" as *const u8 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"frequency\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: b"FREQ\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: b"5.0.0\0" as *const u8 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut SHUTDOWN_History: [commandHistory; 2] = [
    {
        let mut init = commandHistory {
            since: b"7.0.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added the `NOW`, `FORCE` and `ABORT` modifiers.\0" as *const u8
                as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut SHUTDOWN_nosave_save_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"nosave\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"NOSAVE\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"save\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"SAVE\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut SHUTDOWN_Args: [redisCommandArg; 5] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"nosave_save\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: SHUTDOWN_nosave_save_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"now\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_PURE_TOKEN,
                key_spec_index: -(1 as libc::c_int),
                token: b"NOW\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: b"7.0.0\0" as *const u8 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"force\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_PURE_TOKEN,
                key_spec_index: -(1 as libc::c_int),
                token: b"FORCE\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: b"7.0.0\0" as *const u8 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"abort\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_PURE_TOKEN,
                key_spec_index: -(1 as libc::c_int),
                token: b"ABORT\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: b"7.0.0\0" as *const u8 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut SLAVEOF_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"host\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"port\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut SLOWLOG_GET_History: [commandHistory; 2] = [
    {
        let mut init = commandHistory {
            since: b"4.0.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added client IP address, port and name to the reply.\0"
                as *const u8 as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut SLOWLOG_GET_tips: [*const libc::c_char; 3] = [
    b"request_policy:all_nodes\0" as *const u8 as *const libc::c_char,
    b"nondeterministic_output\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut SLOWLOG_GET_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"count\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut SLOWLOG_LEN_tips: [*const libc::c_char; 4] = [
    b"request_policy:all_nodes\0" as *const u8 as *const libc::c_char,
    b"response_policy:agg_sum\0" as *const u8 as *const libc::c_char,
    b"nondeterministic_output\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut SLOWLOG_RESET_tips: [*const libc::c_char; 3] = [
    b"request_policy:all_nodes\0" as *const u8 as *const libc::c_char,
    b"response_policy:all_succeeded\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut SLOWLOG_Subcommands: [redisCommand; 5] = unsafe {
    [
        {
            let mut init = redisCommand {
                declared_name: b"get\0" as *const u8 as *const libc::c_char,
                summary: b"Get the slow log's entries\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N) where N is the number of entries returned\0"
                    as *const u8 as *const libc::c_char,
                since: b"2.2.12\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: SLOWLOG_GET_History.as_ptr() as *mut _,
                tips: SLOWLOG_GET_tips.as_ptr() as *mut _,
                proc_0: Some(slowlogCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(2 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: SLOWLOG_GET_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"help\0" as *const u8 as *const libc::c_char,
                summary: b"Show helpful text about the different subcommands\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"6.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(slowlogCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"len\0" as *const u8 as *const libc::c_char,
                summary: b"Get the slow log's length\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"2.2.12\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: SLOWLOG_LEN_tips.as_ptr() as *mut _,
                proc_0: Some(slowlogCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"reset\0" as *const u8 as *const libc::c_char,
                summary: b"Clear all entries from the slow log\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N) where N is the number of entries in the slowlog\0"
                    as *const u8 as *const libc::c_char,
                since: b"2.2.12\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: SLOWLOG_RESET_tips.as_ptr() as *mut _,
                proc_0: Some(slowlogCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                complexity: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                doc_flags: 0,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_GENERIC,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: None,
                arity: 0,
                flags: 0,
                acl_categories: 0,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut SWAPDB_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"index1\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"index2\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut TIME_tips: [*const libc::c_char; 2] = [
    b"nondeterministic_output\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut SADD_History: [commandHistory; 2] = [
    {
        let mut init = commandHistory {
            since: b"2.4.0\0" as *const u8 as *const libc::c_char,
            changes: b"Accepts multiple `member` arguments.\0" as *const u8
                as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut SADD_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"member\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut SCARD_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut SDIFF_tips: [*const libc::c_char; 2] = [
    b"nondeterministic_output_order\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut SDIFF_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut SDIFFSTORE_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"destination\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 1 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut SINTER_tips: [*const libc::c_char; 2] = [
    b"nondeterministic_output_order\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut SINTER_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut SINTERCARD_Args: [redisCommandArg; 4] = [
    {
        let mut init = redisCommandArg {
            name: b"numkeys\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"limit\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: b"LIMIT\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut SINTERSTORE_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"destination\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 1 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut SISMEMBER_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"member\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut SMEMBERS_tips: [*const libc::c_char; 2] = [
    b"nondeterministic_output_order\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut SMEMBERS_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut SMISMEMBER_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"member\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut SMOVE_Args: [redisCommandArg; 4] = [
    {
        let mut init = redisCommandArg {
            name: b"source\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"destination\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 1 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"member\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut SPOP_History: [commandHistory; 2] = [
    {
        let mut init = commandHistory {
            since: b"3.2.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added the `count` argument.\0" as *const u8 as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut SPOP_tips: [*const libc::c_char; 2] = [
    b"nondeterministic_output\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut SPOP_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"count\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: b"3.2.0\0" as *const u8 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut SRANDMEMBER_History: [commandHistory; 2] = [
    {
        let mut init = commandHistory {
            since: b"2.6.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added the optional `count` argument.\0" as *const u8
                as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut SRANDMEMBER_tips: [*const libc::c_char; 2] = [
    b"nondeterministic_output\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut SRANDMEMBER_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"count\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: b"2.6.0\0" as *const u8 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut SREM_History: [commandHistory; 2] = [
    {
        let mut init = commandHistory {
            since: b"2.4.0\0" as *const u8 as *const libc::c_char,
            changes: b"Accepts multiple `member` arguments.\0" as *const u8
                as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut SREM_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"member\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut SSCAN_tips: [*const libc::c_char; 2] = [
    b"nondeterministic_output\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut SSCAN_Args: [redisCommandArg; 5] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"cursor\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"pattern\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PATTERN,
            key_spec_index: -(1 as libc::c_int),
            token: b"MATCH\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"count\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: b"COUNT\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut SUNION_tips: [*const libc::c_char; 2] = [
    b"nondeterministic_output_order\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut SUNION_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut SUNIONSTORE_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"destination\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 1 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut BZMPOP_where_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"min\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"MIN\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"max\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"MAX\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut BZMPOP_Args: [redisCommandArg; 6] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"timeout\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_DOUBLE,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"numkeys\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_INTEGER,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"key\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_KEY,
                key_spec_index: 0 as libc::c_int,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 1 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"where\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: BZMPOP_where_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"count\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_INTEGER,
                key_spec_index: -(1 as libc::c_int),
                token: b"COUNT\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut BZPOPMAX_History: [commandHistory; 2] = [
    {
        let mut init = commandHistory {
            since: b"6.0.0\0" as *const u8 as *const libc::c_char,
            changes: b"`timeout` is interpreted as a double instead of an integer.\0"
                as *const u8 as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut BZPOPMAX_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"timeout\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_DOUBLE,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut BZPOPMIN_History: [commandHistory; 2] = [
    {
        let mut init = commandHistory {
            since: b"6.0.0\0" as *const u8 as *const libc::c_char,
            changes: b"`timeout` is interpreted as a double instead of an integer.\0"
                as *const u8 as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut BZPOPMIN_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"timeout\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_DOUBLE,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut ZADD_History: [commandHistory; 4] = [
    {
        let mut init = commandHistory {
            since: b"2.4.0\0" as *const u8 as *const libc::c_char,
            changes: b"Accepts multiple elements.\0" as *const u8 as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: b"3.0.2\0" as *const u8 as *const libc::c_char,
            changes: b"Added the `XX`, `NX`, `CH` and `INCR` options.\0" as *const u8
                as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: b"6.2.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added the `GT` and `LT` options.\0" as *const u8
                as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut ZADD_condition_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"nx\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"NX\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"xx\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"XX\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut ZADD_comparison_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"gt\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"GT\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"lt\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"LT\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut ZADD_score_member_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"score\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_DOUBLE,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"member\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut ZADD_Args: [redisCommandArg; 7] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"key\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_KEY,
                key_spec_index: 0 as libc::c_int,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"condition\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: b"3.0.2\0" as *const u8 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: ZADD_condition_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"comparison\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: b"6.2.0\0" as *const u8 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: ZADD_comparison_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"change\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_PURE_TOKEN,
                key_spec_index: -(1 as libc::c_int),
                token: b"CH\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: b"3.0.2\0" as *const u8 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"increment\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_PURE_TOKEN,
                key_spec_index: -(1 as libc::c_int),
                token: b"INCR\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: b"3.0.2\0" as *const u8 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"score_member\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_BLOCK,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 1 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: ZADD_score_member_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut ZCARD_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut ZCOUNT_Args: [redisCommandArg; 4] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"min\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_DOUBLE,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"max\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_DOUBLE,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut ZDIFF_Args: [redisCommandArg; 4] = [
    {
        let mut init = redisCommandArg {
            name: b"numkeys\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"withscores\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"WITHSCORES\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut ZDIFFSTORE_Args: [redisCommandArg; 4] = [
    {
        let mut init = redisCommandArg {
            name: b"destination\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"numkeys\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 1 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut ZINCRBY_Args: [redisCommandArg; 4] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"increment\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"member\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut ZINTER_aggregate_Subargs: [redisCommandArg; 4] = [
    {
        let mut init = redisCommandArg {
            name: b"sum\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"SUM\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"min\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"MIN\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"max\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"MAX\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut ZINTER_Args: [redisCommandArg; 6] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"numkeys\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_INTEGER,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"key\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_KEY,
                key_spec_index: 0 as libc::c_int,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 1 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"weight\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_INTEGER,
                key_spec_index: -(1 as libc::c_int),
                token: b"WEIGHTS\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int
                    | (1 as libc::c_int) << 1 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"aggregate\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: b"AGGREGATE\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: ZINTER_aggregate_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"withscores\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_PURE_TOKEN,
                key_spec_index: -(1 as libc::c_int),
                token: b"WITHSCORES\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut ZINTERCARD_Args: [redisCommandArg; 4] = [
    {
        let mut init = redisCommandArg {
            name: b"numkeys\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"limit\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: b"LIMIT\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut ZINTERSTORE_aggregate_Subargs: [redisCommandArg; 4] = [
    {
        let mut init = redisCommandArg {
            name: b"sum\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"SUM\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"min\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"MIN\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"max\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"MAX\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut ZINTERSTORE_Args: [redisCommandArg; 6] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"destination\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_KEY,
                key_spec_index: 0 as libc::c_int,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"numkeys\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_INTEGER,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"key\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_KEY,
                key_spec_index: 1 as libc::c_int,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 1 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"weight\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_INTEGER,
                key_spec_index: -(1 as libc::c_int),
                token: b"WEIGHTS\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int
                    | (1 as libc::c_int) << 1 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"aggregate\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: b"AGGREGATE\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: ZINTERSTORE_aggregate_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut ZLEXCOUNT_Args: [redisCommandArg; 4] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"min\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"max\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut ZMPOP_where_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"min\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"MIN\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"max\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"MAX\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut ZMPOP_Args: [redisCommandArg; 5] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"numkeys\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_INTEGER,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"key\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_KEY,
                key_spec_index: 0 as libc::c_int,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 1 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"where\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: ZMPOP_where_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"count\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_INTEGER,
                key_spec_index: -(1 as libc::c_int),
                token: b"COUNT\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut ZMSCORE_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"member\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut ZPOPMAX_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"count\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut ZPOPMIN_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"count\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut ZRANDMEMBER_tips: [*const libc::c_char; 2] = [
    b"nondeterministic_output\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut ZRANDMEMBER_options_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"count\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"withscores\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"WITHSCORES\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut ZRANDMEMBER_Args: [redisCommandArg; 3] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"key\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_KEY,
                key_spec_index: 0 as libc::c_int,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"options\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_BLOCK,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: ZRANDMEMBER_options_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut ZRANGE_History: [commandHistory; 2] = [
    {
        let mut init = commandHistory {
            since: b"6.2.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added the `REV`, `BYSCORE`, `BYLEX` and `LIMIT` options.\0"
                as *const u8 as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut ZRANGE_sortby_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"byscore\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"BYSCORE\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"bylex\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"BYLEX\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut ZRANGE_offset_count_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"offset\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"count\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut ZRANGE_Args: [redisCommandArg; 8] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"key\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_KEY,
                key_spec_index: 0 as libc::c_int,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"start\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"stop\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"sortby\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: b"6.2.0\0" as *const u8 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: ZRANGE_sortby_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"rev\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_PURE_TOKEN,
                key_spec_index: -(1 as libc::c_int),
                token: b"REV\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: b"6.2.0\0" as *const u8 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"offset_count\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_BLOCK,
                key_spec_index: -(1 as libc::c_int),
                token: b"LIMIT\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: b"6.2.0\0" as *const u8 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: ZRANGE_offset_count_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"withscores\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_PURE_TOKEN,
                key_spec_index: -(1 as libc::c_int),
                token: b"WITHSCORES\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut ZRANGEBYLEX_offset_count_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"offset\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"count\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut ZRANGEBYLEX_Args: [redisCommandArg; 5] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"key\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_KEY,
                key_spec_index: 0 as libc::c_int,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"min\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"max\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"offset_count\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_BLOCK,
                key_spec_index: -(1 as libc::c_int),
                token: b"LIMIT\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: ZRANGEBYLEX_offset_count_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut ZRANGEBYSCORE_History: [commandHistory; 2] = [
    {
        let mut init = commandHistory {
            since: b"2.0.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added the `WITHSCORES` modifier.\0" as *const u8
                as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut ZRANGEBYSCORE_offset_count_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"offset\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"count\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut ZRANGEBYSCORE_Args: [redisCommandArg; 6] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"key\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_KEY,
                key_spec_index: 0 as libc::c_int,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"min\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_DOUBLE,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"max\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_DOUBLE,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"withscores\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_PURE_TOKEN,
                key_spec_index: -(1 as libc::c_int),
                token: b"WITHSCORES\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: b"2.0.0\0" as *const u8 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"offset_count\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_BLOCK,
                key_spec_index: -(1 as libc::c_int),
                token: b"LIMIT\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: ZRANGEBYSCORE_offset_count_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut ZRANGESTORE_sortby_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"byscore\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"BYSCORE\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"bylex\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"BYLEX\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut ZRANGESTORE_offset_count_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"offset\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"count\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut ZRANGESTORE_Args: [redisCommandArg; 8] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"dst\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_KEY,
                key_spec_index: 0 as libc::c_int,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"src\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_KEY,
                key_spec_index: 1 as libc::c_int,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"min\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"max\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"sortby\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: ZRANGESTORE_sortby_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"rev\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_PURE_TOKEN,
                key_spec_index: -(1 as libc::c_int),
                token: b"REV\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"offset_count\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_BLOCK,
                key_spec_index: -(1 as libc::c_int),
                token: b"LIMIT\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: ZRANGESTORE_offset_count_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut ZRANK_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"member\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut ZREM_History: [commandHistory; 2] = [
    {
        let mut init = commandHistory {
            since: b"2.4.0\0" as *const u8 as *const libc::c_char,
            changes: b"Accepts multiple elements.\0" as *const u8 as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut ZREM_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"member\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut ZREMRANGEBYLEX_Args: [redisCommandArg; 4] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"min\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"max\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut ZREMRANGEBYRANK_Args: [redisCommandArg; 4] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"start\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"stop\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut ZREMRANGEBYSCORE_Args: [redisCommandArg; 4] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"min\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_DOUBLE,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"max\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_DOUBLE,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut ZREVRANGE_Args: [redisCommandArg; 5] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"start\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"stop\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"withscores\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"WITHSCORES\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut ZREVRANGEBYLEX_offset_count_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"offset\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"count\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut ZREVRANGEBYLEX_Args: [redisCommandArg; 5] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"key\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_KEY,
                key_spec_index: 0 as libc::c_int,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"max\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"min\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"offset_count\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_BLOCK,
                key_spec_index: -(1 as libc::c_int),
                token: b"LIMIT\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: ZREVRANGEBYLEX_offset_count_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut ZREVRANGEBYSCORE_History: [commandHistory; 2] = [
    {
        let mut init = commandHistory {
            since: b"2.1.6\0" as *const u8 as *const libc::c_char,
            changes: b"`min` and `max` can be exclusive.\0" as *const u8
                as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut ZREVRANGEBYSCORE_offset_count_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"offset\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"count\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut ZREVRANGEBYSCORE_Args: [redisCommandArg; 6] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"key\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_KEY,
                key_spec_index: 0 as libc::c_int,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"max\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_DOUBLE,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"min\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_DOUBLE,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"withscores\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_PURE_TOKEN,
                key_spec_index: -(1 as libc::c_int),
                token: b"WITHSCORES\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"offset_count\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_BLOCK,
                key_spec_index: -(1 as libc::c_int),
                token: b"LIMIT\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: ZREVRANGEBYSCORE_offset_count_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut ZREVRANK_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"member\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut ZSCAN_tips: [*const libc::c_char; 2] = [
    b"nondeterministic_output\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut ZSCAN_Args: [redisCommandArg; 5] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"cursor\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"pattern\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PATTERN,
            key_spec_index: -(1 as libc::c_int),
            token: b"MATCH\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"count\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: b"COUNT\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut ZSCORE_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"member\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut ZUNION_aggregate_Subargs: [redisCommandArg; 4] = [
    {
        let mut init = redisCommandArg {
            name: b"sum\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"SUM\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"min\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"MIN\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"max\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"MAX\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut ZUNION_Args: [redisCommandArg; 6] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"numkeys\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_INTEGER,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"key\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_KEY,
                key_spec_index: 0 as libc::c_int,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 1 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"weight\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_INTEGER,
                key_spec_index: -(1 as libc::c_int),
                token: b"WEIGHTS\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int
                    | (1 as libc::c_int) << 1 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"aggregate\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: b"AGGREGATE\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: ZUNION_aggregate_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"withscores\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_PURE_TOKEN,
                key_spec_index: -(1 as libc::c_int),
                token: b"WITHSCORES\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut ZUNIONSTORE_aggregate_Subargs: [redisCommandArg; 4] = [
    {
        let mut init = redisCommandArg {
            name: b"sum\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"SUM\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"min\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"MIN\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"max\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"MAX\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut ZUNIONSTORE_Args: [redisCommandArg; 6] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"destination\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_KEY,
                key_spec_index: 0 as libc::c_int,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"numkeys\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_INTEGER,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"key\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_KEY,
                key_spec_index: 1 as libc::c_int,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 1 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"weight\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_INTEGER,
                key_spec_index: -(1 as libc::c_int),
                token: b"WEIGHTS\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int
                    | (1 as libc::c_int) << 1 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"aggregate\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: b"AGGREGATE\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: ZUNIONSTORE_aggregate_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut XACK_Args: [redisCommandArg; 4] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"group\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"id\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut XADD_History: [commandHistory; 3] = [
    {
        let mut init = commandHistory {
            since: b"6.2.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added the `NOMKSTREAM` option, `MINID` trimming strategy and the `LIMIT` option.\0"
                as *const u8 as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: b"7.0.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added support for the `<ms>-*` explicit ID form.\0" as *const u8
                as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut XADD_tips: [*const libc::c_char; 2] = [
    b"nondeterministic_output\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut XADD_trim_strategy_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"maxlen\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"MAXLEN\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"minid\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"MINID\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: b"6.2.0\0" as *const u8 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut XADD_trim_operator_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"equal\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"=\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"approximately\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"~\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut XADD_trim_Subargs: [redisCommandArg; 5] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"strategy\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: XADD_trim_strategy_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"operator\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: XADD_trim_operator_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"threshold\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"count\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_INTEGER,
                key_spec_index: -(1 as libc::c_int),
                token: b"LIMIT\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: b"6.2.0\0" as *const u8 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut XADD_id_or_auto_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"auto_id\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"*\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"id\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut XADD_field_value_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"field\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"value\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut XADD_Args: [redisCommandArg; 6] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"key\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_KEY,
                key_spec_index: 0 as libc::c_int,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"nomkstream\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_PURE_TOKEN,
                key_spec_index: -(1 as libc::c_int),
                token: b"NOMKSTREAM\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: b"6.2.0\0" as *const u8 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"trim\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_BLOCK,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: XADD_trim_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"id_or_auto\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: XADD_id_or_auto_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"field_value\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_BLOCK,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 1 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: XADD_field_value_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut XAUTOCLAIM_History: [commandHistory; 2] = [
    {
        let mut init = commandHistory {
            since: b"7.0.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added an element to the reply array, containing deleted entries the command cleared from the PEL\0"
                as *const u8 as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut XAUTOCLAIM_tips: [*const libc::c_char; 2] = [
    b"nondeterministic_output\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut XAUTOCLAIM_Args: [redisCommandArg; 8] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"group\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"consumer\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"min-idle-time\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"start\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"count\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: b"COUNT\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"justid\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"JUSTID\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut XCLAIM_tips: [*const libc::c_char; 2] = [
    b"nondeterministic_output\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut XCLAIM_Args: [redisCommandArg; 12] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"group\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"consumer\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"min-idle-time\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"id\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"ms\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: b"IDLE\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"unix-time-milliseconds\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_UNIX_TIME,
            key_spec_index: -(1 as libc::c_int),
            token: b"TIME\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"count\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: b"RETRYCOUNT\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"force\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"FORCE\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"justid\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"JUSTID\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"id\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: b"LASTID\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut XDEL_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"id\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut XGROUP_CREATE_History: [commandHistory; 2] = [
    {
        let mut init = commandHistory {
            since: b"7.0.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added the `entries_read` named argument.\0" as *const u8
                as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut XGROUP_CREATE_id_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"id\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"new_id\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"$\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut XGROUP_CREATE_Args: [redisCommandArg; 6] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"key\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_KEY,
                key_spec_index: 0 as libc::c_int,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"groupname\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"id\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: XGROUP_CREATE_id_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"mkstream\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_PURE_TOKEN,
                key_spec_index: -(1 as libc::c_int),
                token: b"MKSTREAM\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"entries_read\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_INTEGER,
                key_spec_index: -(1 as libc::c_int),
                token: b"ENTRIESREAD\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut XGROUP_CREATECONSUMER_Args: [redisCommandArg; 4] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"groupname\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"consumername\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut XGROUP_DELCONSUMER_Args: [redisCommandArg; 4] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"groupname\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"consumername\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut XGROUP_DESTROY_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"groupname\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut XGROUP_SETID_History: [commandHistory; 2] = [
    {
        let mut init = commandHistory {
            since: b"7.0.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added the optional `entries_read` argument.\0" as *const u8
                as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut XGROUP_SETID_id_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"id\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"new_id\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"$\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut XGROUP_SETID_Args: [redisCommandArg; 5] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"key\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_KEY,
                key_spec_index: 0 as libc::c_int,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"groupname\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"id\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: XGROUP_SETID_id_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"entries_read\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_INTEGER,
                key_spec_index: -(1 as libc::c_int),
                token: b"ENTRIESREAD\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut XGROUP_Subcommands: [redisCommand; 7] = unsafe {
    [
        {
            let mut init = redisCommand {
                declared_name: b"create\0" as *const u8 as *const libc::c_char,
                summary: b"Create a consumer group.\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"5.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_STREAM,
                history: XGROUP_CREATE_History.as_ptr() as *mut _,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(xgroupCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(5 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 2 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 11 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 6 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 2 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: XGROUP_CREATE_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"createconsumer\0" as *const u8 as *const libc::c_char,
                summary: b"Create a consumer in a consumer group.\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"6.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_STREAM,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(xgroupCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 5 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 2 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 11 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 6 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 2 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: XGROUP_CREATECONSUMER_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"delconsumer\0" as *const u8 as *const libc::c_char,
                summary: b"Delete a consumer from a consumer group.\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"5.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_STREAM,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(xgroupCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 5 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 11 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 7 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 2 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: XGROUP_DELCONSUMER_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"destroy\0" as *const u8 as *const libc::c_char,
                summary: b"Destroy a consumer group.\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N) where N is the number of entries in the group's pending entries list (PEL).\0"
                    as *const u8 as *const libc::c_char,
                since: b"5.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_STREAM,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(xgroupCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 4 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 11 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 7 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 2 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: XGROUP_DESTROY_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"help\0" as *const u8 as *const libc::c_char,
                summary: b"Show helpful text about the different subcommands\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"5.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_STREAM,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(xgroupCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 11 as libc::c_int)
                    as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"setid\0" as *const u8 as *const libc::c_char,
                summary: b"Set a consumer group to an arbitrary last delivered ID value.\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"5.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_STREAM,
                history: XGROUP_SETID_History.as_ptr() as *mut _,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(xgroupCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(5 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 11 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 5 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 2 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: XGROUP_SETID_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                complexity: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                doc_flags: 0,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_GENERIC,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: None,
                arity: 0,
                flags: 0,
                acl_categories: 0,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut XINFO_CONSUMERS_tips: [*const libc::c_char; 2] = [
    b"nondeterministic_output\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut XINFO_CONSUMERS_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"groupname\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut XINFO_GROUPS_History: [commandHistory; 2] = [
    {
        let mut init = commandHistory {
            since: b"7.0.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added the `entries-read` and `lag` fields\0" as *const u8
                as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut XINFO_GROUPS_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut XINFO_STREAM_History: [commandHistory; 3] = [
    {
        let mut init = commandHistory {
            since: b"6.0.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added the `FULL` modifier.\0" as *const u8 as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: b"7.0.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added the `max-deleted-entry-id`, `entries-added`, `recorded-first-entry-id`, `entries-read` and `lag` fields\0"
                as *const u8 as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut XINFO_STREAM_full_Subargs: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"count\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: b"COUNT\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut XINFO_STREAM_Args: [redisCommandArg; 3] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"key\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_KEY,
                key_spec_index: 0 as libc::c_int,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"full\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_BLOCK,
                key_spec_index: -(1 as libc::c_int),
                token: b"FULL\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: XINFO_STREAM_full_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut XINFO_Subcommands: [redisCommand; 5] = unsafe {
    [
        {
            let mut init = redisCommand {
                declared_name: b"consumers\0" as *const u8 as *const libc::c_char,
                summary: b"List the consumers in a consumer group\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"5.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_STREAM,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: XINFO_CONSUMERS_tips.as_ptr() as *mut _,
                proc_0: Some(xinfoCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 4 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 11 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 2 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: XINFO_CONSUMERS_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"groups\0" as *const u8 as *const libc::c_char,
                summary: b"List the consumer groups of a stream\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"5.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_STREAM,
                history: XINFO_GROUPS_History.as_ptr() as *mut _,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(xinfoCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 3 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 11 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 2 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: XINFO_GROUPS_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"help\0" as *const u8 as *const libc::c_char,
                summary: b"Show helpful text about the different subcommands\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"5.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_STREAM,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(xinfoCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 11 as libc::c_int)
                    as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"stream\0" as *const u8 as *const libc::c_char,
                summary: b"Get information about a stream\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"5.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_STREAM,
                history: XINFO_STREAM_History.as_ptr() as *mut _,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(xinfoCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 11 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 2 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: XINFO_STREAM_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                complexity: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                doc_flags: 0,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_GENERIC,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: None,
                arity: 0,
                flags: 0,
                acl_categories: 0,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut XLEN_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut XPENDING_History: [commandHistory; 2] = [
    {
        let mut init = commandHistory {
            since: b"6.2.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added the `IDLE` option and exclusive range intervals.\0"
                as *const u8 as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut XPENDING_tips: [*const libc::c_char; 2] = [
    b"nondeterministic_output\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut XPENDING_filters_Subargs: [redisCommandArg; 6] = [
    {
        let mut init = redisCommandArg {
            name: b"min-idle-time\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: b"IDLE\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: b"6.2.0\0" as *const u8 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"start\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"end\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"count\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"consumer\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut XPENDING_Args: [redisCommandArg; 4] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"key\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_KEY,
                key_spec_index: 0 as libc::c_int,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"group\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"filters\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_BLOCK,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: XPENDING_filters_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut XRANGE_History: [commandHistory; 2] = [
    {
        let mut init = commandHistory {
            since: b"6.2.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added exclusive ranges.\0" as *const u8 as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut XRANGE_Args: [redisCommandArg; 5] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"start\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"end\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"count\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: b"COUNT\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut XREAD_streams_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"id\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut XREAD_Args: [redisCommandArg; 4] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"count\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_INTEGER,
                key_spec_index: -(1 as libc::c_int),
                token: b"COUNT\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"milliseconds\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_INTEGER,
                key_spec_index: -(1 as libc::c_int),
                token: b"BLOCK\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"streams\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_BLOCK,
                key_spec_index: -(1 as libc::c_int),
                token: b"STREAMS\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: XREAD_streams_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut XREADGROUP_group_consumer_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"group\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"consumer\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut XREADGROUP_streams_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"id\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut XREADGROUP_Args: [redisCommandArg; 6] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"group_consumer\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_BLOCK,
                key_spec_index: -(1 as libc::c_int),
                token: b"GROUP\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: XREADGROUP_group_consumer_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"count\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_INTEGER,
                key_spec_index: -(1 as libc::c_int),
                token: b"COUNT\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"milliseconds\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_INTEGER,
                key_spec_index: -(1 as libc::c_int),
                token: b"BLOCK\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"noack\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_PURE_TOKEN,
                key_spec_index: -(1 as libc::c_int),
                token: b"NOACK\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"streams\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_BLOCK,
                key_spec_index: -(1 as libc::c_int),
                token: b"STREAMS\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: XREADGROUP_streams_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut XREVRANGE_History: [commandHistory; 2] = [
    {
        let mut init = commandHistory {
            since: b"6.2.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added exclusive ranges.\0" as *const u8 as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut XREVRANGE_Args: [redisCommandArg; 5] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"end\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"start\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"count\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: b"COUNT\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut XSETID_History: [commandHistory; 2] = [
    {
        let mut init = commandHistory {
            since: b"7.0.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added the `entries_added` and `max_deleted_entry_id` arguments.\0"
                as *const u8 as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut XSETID_Args: [redisCommandArg; 5] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"last-id\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"entries_added\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: b"ENTRIESADDED\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: b"7.0.0\0" as *const u8 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"max_deleted_entry_id\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: b"MAXDELETEDID\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: b"7.0.0\0" as *const u8 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut XTRIM_History: [commandHistory; 2] = [
    {
        let mut init = commandHistory {
            since: b"6.2.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added the `MINID` trimming strategy and the `LIMIT` option.\0"
                as *const u8 as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut XTRIM_tips: [*const libc::c_char; 2] = [
    b"nondeterministic_output\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut XTRIM_trim_strategy_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"maxlen\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"MAXLEN\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"minid\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"MINID\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: b"6.2.0\0" as *const u8 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut XTRIM_trim_operator_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"equal\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"=\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"approximately\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"~\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut XTRIM_trim_Subargs: [redisCommandArg; 5] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"strategy\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: XTRIM_trim_strategy_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"operator\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: XTRIM_trim_operator_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"threshold\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"count\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_INTEGER,
                key_spec_index: -(1 as libc::c_int),
                token: b"LIMIT\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: b"6.2.0\0" as *const u8 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut XTRIM_Args: [redisCommandArg; 3] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"key\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_KEY,
                key_spec_index: 0 as libc::c_int,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"trim\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_BLOCK,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: XTRIM_trim_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut APPEND_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"value\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut DECR_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut DECRBY_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"decrement\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut GET_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut GETDEL_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut GETEX_expiration_Subargs: [redisCommandArg; 6] = [
    {
        let mut init = redisCommandArg {
            name: b"seconds\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: b"EX\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"milliseconds\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: b"PX\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"unix-time-seconds\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_UNIX_TIME,
            key_spec_index: -(1 as libc::c_int),
            token: b"EXAT\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"unix-time-milliseconds\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_UNIX_TIME,
            key_spec_index: -(1 as libc::c_int),
            token: b"PXAT\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"persist\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"PERSIST\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut GETEX_Args: [redisCommandArg; 3] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"key\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_KEY,
                key_spec_index: 0 as libc::c_int,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"expiration\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: GETEX_expiration_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut GETRANGE_Args: [redisCommandArg; 4] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"start\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"end\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut GETSET_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"value\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut INCR_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut INCRBY_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"increment\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut INCRBYFLOAT_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"increment\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_DOUBLE,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut LCS_Args: [redisCommandArg; 7] = [
    {
        let mut init = redisCommandArg {
            name: b"key1\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"key2\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"len\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"LEN\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"idx\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"IDX\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"len\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: b"MINMATCHLEN\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"withmatchlen\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"WITHMATCHLEN\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut MGET_tips: [*const libc::c_char; 2] = [
    b"request_policy:multi_shard\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut MGET_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut MSET_tips: [*const libc::c_char; 3] = [
    b"request_policy:multi_shard\0" as *const u8 as *const libc::c_char,
    b"response_policy:all_succeeded\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut MSET_key_value_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"value\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut MSET_Args: [redisCommandArg; 2] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"key_value\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_BLOCK,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 1 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: MSET_key_value_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut MSETNX_tips: [*const libc::c_char; 3] = [
    b"request_policy:multi_shard\0" as *const u8 as *const libc::c_char,
    b"response_policy:agg_min\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
#[no_mangle]
pub static mut MSETNX_key_value_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"value\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut MSETNX_Args: [redisCommandArg; 2] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"key_value\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_BLOCK,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 1 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: MSETNX_key_value_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut PSETEX_Args: [redisCommandArg; 4] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"milliseconds\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"value\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut SET_History: [commandHistory; 5] = [
    {
        let mut init = commandHistory {
            since: b"2.6.12\0" as *const u8 as *const libc::c_char,
            changes: b"Added the `EX`, `PX`, `NX` and `XX` options.\0" as *const u8
                as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: b"6.0.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added the `KEEPTTL` option.\0" as *const u8 as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: b"6.2.0\0" as *const u8 as *const libc::c_char,
            changes: b"Added the `GET`, `EXAT` and `PXAT` option.\0" as *const u8
                as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: b"7.0.0\0" as *const u8 as *const libc::c_char,
            changes: b"Allowed the `NX` and `GET` options to be used together.\0"
                as *const u8 as *const libc::c_char,
        };
        init
    },
    {
        let mut init = commandHistory {
            since: 0 as *const libc::c_char,
            changes: 0 as *const libc::c_char,
        };
        init
    },
];
#[no_mangle]
pub static mut SET_condition_Subargs: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"nx\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"NX\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"xx\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"XX\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut SET_expiration_Subargs: [redisCommandArg; 6] = [
    {
        let mut init = redisCommandArg {
            name: b"seconds\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: b"EX\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: b"2.6.12\0" as *const u8 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"milliseconds\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: b"PX\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: b"2.6.12\0" as *const u8 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"unix-time-seconds\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_UNIX_TIME,
            key_spec_index: -(1 as libc::c_int),
            token: b"EXAT\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: b"6.2.0\0" as *const u8 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"unix-time-milliseconds\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_UNIX_TIME,
            key_spec_index: -(1 as libc::c_int),
            token: b"PXAT\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: b"6.2.0\0" as *const u8 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"keepttl\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_PURE_TOKEN,
            key_spec_index: -(1 as libc::c_int),
            token: b"KEEPTTL\0" as *const u8 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: b"6.0.0\0" as *const u8 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut SET_Args: [redisCommandArg; 6] = unsafe {
    [
        {
            let mut init = redisCommandArg {
                name: b"key\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_KEY,
                key_spec_index: 0 as libc::c_int,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"value\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"condition\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: b"2.6.12\0" as *const u8 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: SET_condition_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"get\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_PURE_TOKEN,
                key_spec_index: -(1 as libc::c_int),
                token: b"GET\0" as *const u8 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: b"6.2.0\0" as *const u8 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: b"expiration\0" as *const u8 as *const libc::c_char,
                type_0: ARG_TYPE_ONEOF,
                key_spec_index: -(1 as libc::c_int),
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: (1 as libc::c_int) << 0 as libc::c_int,
                deprecated_since: 0 as *const libc::c_char,
                subargs: SET_expiration_Subargs.as_ptr() as *mut _,
                num_args: 0,
            };
            init
        },
        {
            let mut init = redisCommandArg {
                name: 0 as *const libc::c_char,
                type_0: ARG_TYPE_STRING,
                key_spec_index: 0,
                token: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                flags: 0,
                deprecated_since: 0 as *const libc::c_char,
                subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
                num_args: 0,
            };
            init
        },
    ]
};
#[no_mangle]
pub static mut SETEX_Args: [redisCommandArg; 4] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"seconds\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"value\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut SETNX_Args: [redisCommandArg; 3] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"value\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut SETRANGE_Args: [redisCommandArg; 4] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"offset\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"value\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut STRLEN_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut SUBSTR_Args: [redisCommandArg; 4] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"start\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: b"end\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_INTEGER,
            key_spec_index: -(1 as libc::c_int),
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut WATCH_Args: [redisCommandArg; 2] = [
    {
        let mut init = redisCommandArg {
            name: b"key\0" as *const u8 as *const libc::c_char,
            type_0: ARG_TYPE_KEY,
            key_spec_index: 0 as libc::c_int,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: (1 as libc::c_int) << 1 as libc::c_int,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
    {
        let mut init = redisCommandArg {
            name: 0 as *const libc::c_char,
            type_0: ARG_TYPE_STRING,
            key_spec_index: 0,
            token: 0 as *const libc::c_char,
            summary: 0 as *const libc::c_char,
            since: 0 as *const libc::c_char,
            flags: 0,
            deprecated_since: 0 as *const libc::c_char,
            subargs: 0 as *const redisCommandArg as *mut redisCommandArg,
            num_args: 0,
        };
        init
    },
];
#[no_mangle]
pub static mut redisCommandTable: [redisCommand; 242] = unsafe {
    [
        {
            let mut init = redisCommand {
                declared_name: b"bitcount\0" as *const u8 as *const libc::c_char,
                summary: b"Count set bits in a string\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N)\0" as *const u8 as *const libc::c_char,
                since: b"2.6.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_BITMAP,
                history: BITCOUNT_History.as_ptr() as *mut _,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(bitcountCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(2 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 8 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: BITCOUNT_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"bitfield\0" as *const u8 as *const libc::c_char,
                summary: b"Perform arbitrary bitfield integer operations on strings\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1) for each subcommand specified\0" as *const u8
                    as *const libc::c_char,
                since: b"3.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_BITMAP,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(bitfieldCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(2 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 2 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 8 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: b"This command allows both access and modification of the key\0"
                                as *const u8 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 5 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int
                                | (1 as libc::c_ulonglong) << 10 as libc::c_int)
                                as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: Some(
                    bitfieldGetKeys
                        as unsafe extern "C" fn(
                            *mut redisCommand,
                            *mut *mut robj,
                            libc::c_int,
                            *mut getKeysResult,
                        ) -> libc::c_int,
                ),
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: BITFIELD_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"bitfield_ro\0" as *const u8 as *const libc::c_char,
                summary: b"Perform arbitrary bitfield integer operations on strings. Read-only variant of BITFIELD\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1) for each subcommand specified\0" as *const u8
                    as *const libc::c_char,
                since: b"6.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_BITMAP,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(
                    bitfieldroCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: -(2 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 8 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: BITFIELD_RO_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"bitop\0" as *const u8 as *const libc::c_char,
                summary: b"Perform bitwise operations between strings\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N)\0" as *const u8 as *const libc::c_char,
                since: b"2.6.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_BITMAP,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(bitopCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(4 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 2 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 8 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 2 as libc::c_int
                                | (1 as libc::c_ulonglong) << 5 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 2 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 3 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: -(1 as libc::c_int),
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: BITOP_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"bitpos\0" as *const u8 as *const libc::c_char,
                summary: b"Find first bit set or clear in a string\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N)\0" as *const u8 as *const libc::c_char,
                since: b"2.8.7\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_BITMAP,
                history: BITPOS_History.as_ptr() as *mut _,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(bitposCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 8 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: BITPOS_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"getbit\0" as *const u8 as *const libc::c_char,
                summary: b"Returns the bit value at offset in the string value stored at key\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"2.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_BITMAP,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(getbitCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 3 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 8 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: GETBIT_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"setbit\0" as *const u8 as *const libc::c_char,
                summary: b"Sets or clears the bit at offset in the string value stored at key\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"2.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_BITMAP,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(setbitCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 4 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 2 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 8 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int
                                | (1 as libc::c_ulonglong) << 5 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: SETBIT_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"asking\0" as *const u8 as *const libc::c_char,
                summary: b"Sent by cluster clients after an -ASK redirect\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"3.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_CLUSTER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(askingCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 1 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 18 as libc::c_int)
                    as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"cluster\0" as *const u8 as *const libc::c_char,
                summary: b"A container for cluster commands\0" as *const u8
                    as *const libc::c_char,
                complexity: b"Depends on subcommand.\0" as *const u8
                    as *const libc::c_char,
                since: b"3.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_CLUSTER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: None,
                arity: -(2 as libc::c_int),
                flags: 0 as libc::c_int as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: CLUSTER_Subcommands.as_ptr() as *mut _,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"readonly\0" as *const u8 as *const libc::c_char,
                summary: b"Enables read queries for a connection to a cluster replica node\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"3.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_CLUSTER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(readonlyCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 1 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 14 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 18 as libc::c_int)
                    as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"readwrite\0" as *const u8 as *const libc::c_char,
                summary: b"Disables read queries for a connection to a cluster replica node\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"3.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_CLUSTER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(
                    readwriteCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: 1 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 14 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 18 as libc::c_int)
                    as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"auth\0" as *const u8 as *const libc::c_char,
                summary: b"Authenticate to the server\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N) where N is the number of passwords defined for the user\0"
                    as *const u8 as *const libc::c_char,
                since: b"1.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_CONNECTION,
                history: AUTH_History.as_ptr() as *mut _,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(authCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(2 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int
                    | (1 as libc::c_ulonglong) << 15 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int
                    | (1 as libc::c_ulonglong) << 26 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 18 as libc::c_int)
                    as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: AUTH_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"client\0" as *const u8 as *const libc::c_char,
                summary: b"A container for client connection commands\0" as *const u8
                    as *const libc::c_char,
                complexity: b"Depends on subcommand.\0" as *const u8
                    as *const libc::c_char,
                since: b"2.4.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_CONNECTION,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: None,
                arity: -(2 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 17 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: CLIENT_Subcommands.as_ptr() as *mut _,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"echo\0" as *const u8 as *const libc::c_char,
                summary: b"Echo the given string\0" as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"1.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_CONNECTION,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(echoCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 18 as libc::c_int)
                    as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: ECHO_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"hello\0" as *const u8 as *const libc::c_char,
                summary: b"Handshake with Redis\0" as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"6.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_CONNECTION,
                history: HELLO_History.as_ptr() as *mut _,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(helloCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(1 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int
                    | (1 as libc::c_ulonglong) << 15 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int
                    | (1 as libc::c_ulonglong) << 26 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 18 as libc::c_int)
                    as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: HELLO_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"ping\0" as *const u8 as *const libc::c_char,
                summary: b"Ping the server\0" as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"1.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_CONNECTION,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: PING_tips.as_ptr() as *mut _,
                proc_0: Some(pingCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(1 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 14 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 18 as libc::c_int)
                    as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: PING_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"quit\0" as *const u8 as *const libc::c_char,
                summary: b"Close the connection\0" as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"1.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_CONNECTION,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(quitCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(1 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 26 as libc::c_int
                    | (1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int
                    | (1 as libc::c_ulonglong) << 15 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 18 as libc::c_int)
                    as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"reset\0" as *const u8 as *const libc::c_char,
                summary: b"Reset the connection\0" as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"6.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_CONNECTION,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(resetCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 1 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int
                    | (1 as libc::c_ulonglong) << 15 as libc::c_int
                    | (1 as libc::c_ulonglong) << 26 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 18 as libc::c_int)
                    as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"select\0" as *const u8 as *const libc::c_char,
                summary: b"Change the selected database for the current connection\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"1.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_CONNECTION,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(selectCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 18 as libc::c_int)
                    as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: SELECT_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"copy\0" as *const u8 as *const libc::c_char,
                summary: b"Copy a key\0" as *const u8 as *const libc::c_char,
                complexity: b"O(N) worst case for collections, where N is the number of nested items. O(1) for string values.\0"
                    as *const u8 as *const libc::c_char,
                since: b"6.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_GENERIC,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(copyCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 2 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 0 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 2 as libc::c_int
                                | (1 as libc::c_ulonglong) << 5 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 2 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: COPY_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"del\0" as *const u8 as *const libc::c_char,
                summary: b"Delete a key\0" as *const u8 as *const libc::c_char,
                complexity: b"O(N) where N is the number of keys that will be removed. When a key to remove holds a value other than a string, the individual complexity for this key is O(M) where M is the number of elements in the list, set, sorted set or hash. Removing a single key that holds a string value is O(1).\0"
                    as *const u8 as *const libc::c_char,
                since: b"1.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_GENERIC,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: DEL_tips.as_ptr() as *mut _,
                proc_0: Some(delCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(2 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 0 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 3 as libc::c_int
                                | (1 as libc::c_ulonglong) << 7 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: -(1 as libc::c_int),
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: DEL_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"dump\0" as *const u8 as *const libc::c_char,
                summary: b"Return a serialized version of the value stored at the specified key.\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1) to access the key and additional O(N*M) to serialize it, where N is the number of Redis objects composing the value and M their average size. For small string values the time complexity is thus O(1)+O(1*M) where M is small, so simply O(1).\0"
                    as *const u8 as *const libc::c_char,
                since: b"2.6.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_GENERIC,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: DUMP_tips.as_ptr() as *mut _,
                proc_0: Some(dumpCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 0 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: DUMP_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"exists\0" as *const u8 as *const libc::c_char,
                summary: b"Determine if a key exists\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N) where N is the number of keys to check.\0"
                    as *const u8 as *const libc::c_char,
                since: b"1.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_GENERIC,
                history: EXISTS_History.as_ptr() as *mut _,
                tips: EXISTS_tips.as_ptr() as *mut _,
                proc_0: Some(existsCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(2 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 0 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int)
                                as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: -(1 as libc::c_int),
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: EXISTS_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"expire\0" as *const u8 as *const libc::c_char,
                summary: b"Set a key's time to live in seconds\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"1.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_GENERIC,
                history: EXPIRE_History.as_ptr() as *mut _,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(expireCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 0 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 5 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: EXPIRE_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"expireat\0" as *const u8 as *const libc::c_char,
                summary: b"Set the expiration for a key as a UNIX timestamp\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"1.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_GENERIC,
                history: EXPIREAT_History.as_ptr() as *mut _,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(expireatCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 0 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 5 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: EXPIREAT_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"expiretime\0" as *const u8 as *const libc::c_char,
                summary: b"Get the expiration Unix timestamp for a key\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"7.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_GENERIC,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(
                    expiretimeCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 0 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: EXPIRETIME_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"keys\0" as *const u8 as *const libc::c_char,
                summary: b"Find all keys matching the given pattern\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N) with N being the number of keys in the database, under the assumption that the key names in the database and the given pattern have limited length.\0"
                    as *const u8 as *const libc::c_char,
                since: b"1.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_GENERIC,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: KEYS_tips.as_ptr() as *mut _,
                proc_0: Some(keysCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int) as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: KEYS_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"migrate\0" as *const u8 as *const libc::c_char,
                summary: b"Atomically transfer a key from a Redis instance to another one.\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"This command actually executes a DUMP+DEL in the source instance, and a RESTORE in the target instance. See the pages of these commands for time complexity. Also an O(N) data transfer between the two instances is performed.\0"
                    as *const u8 as *const libc::c_char,
                since: b"2.6.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_GENERIC,
                history: MIGRATE_History.as_ptr() as *mut _,
                tips: MIGRATE_tips.as_ptr() as *mut _,
                proc_0: Some(migrateCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(6 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int) as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int
                                | (1 as libc::c_ulonglong) << 7 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 3 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int
                                | (1 as libc::c_ulonglong) << 7 as libc::c_int
                                | (1 as libc::c_ulonglong) << 9 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_KEYWORD,
                            bs: C2RustUnnamed_3 {
                                keyword: {
                                    let mut init = C2RustUnnamed_4 {
                                        keyword: b"KEYS\0" as *const u8 as *const libc::c_char,
                                        startfrom: -(2 as libc::c_int),
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: -(1 as libc::c_int),
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: Some(
                    migrateGetKeys
                        as unsafe extern "C" fn(
                            *mut redisCommand,
                            *mut *mut robj,
                            libc::c_int,
                            *mut getKeysResult,
                        ) -> libc::c_int,
                ),
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: MIGRATE_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"move\0" as *const u8 as *const libc::c_char,
                summary: b"Move a key to another database\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"1.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_GENERIC,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(moveCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 3 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 0 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int
                                | (1 as libc::c_ulonglong) << 5 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: MOVE_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"object\0" as *const u8 as *const libc::c_char,
                summary: b"A container for object introspection commands\0" as *const u8
                    as *const libc::c_char,
                complexity: b"Depends on subcommand.\0" as *const u8
                    as *const libc::c_char,
                since: b"2.2.3\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_GENERIC,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: None,
                arity: -(2 as libc::c_int),
                flags: 0 as libc::c_int as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: OBJECT_Subcommands.as_ptr() as *mut _,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"persist\0" as *const u8 as *const libc::c_char,
                summary: b"Remove the expiration from a key\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"2.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_GENERIC,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(persistCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 0 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 5 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: PERSIST_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"pexpire\0" as *const u8 as *const libc::c_char,
                summary: b"Set a key's time to live in milliseconds\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"2.6.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_GENERIC,
                history: PEXPIRE_History.as_ptr() as *mut _,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(pexpireCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 0 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 5 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: PEXPIRE_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"pexpireat\0" as *const u8 as *const libc::c_char,
                summary: b"Set the expiration for a key as a UNIX timestamp specified in milliseconds\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"2.6.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_GENERIC,
                history: PEXPIREAT_History.as_ptr() as *mut _,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(
                    pexpireatCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 0 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 5 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: PEXPIREAT_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"pexpiretime\0" as *const u8 as *const libc::c_char,
                summary: b"Get the expiration Unix timestamp for a key in milliseconds\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"7.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_GENERIC,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(
                    pexpiretimeCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 0 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: PEXPIRETIME_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"pttl\0" as *const u8 as *const libc::c_char,
                summary: b"Get the time to live for a key in milliseconds\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"2.6.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_GENERIC,
                history: PTTL_History.as_ptr() as *mut _,
                tips: PTTL_tips.as_ptr() as *mut _,
                proc_0: Some(pttlCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 0 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: PTTL_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"randomkey\0" as *const u8 as *const libc::c_char,
                summary: b"Return a random key from the keyspace\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"1.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_GENERIC,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: RANDOMKEY_tips.as_ptr() as *mut _,
                proc_0: Some(
                    randomkeyCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: 1 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 0 as libc::c_int)
                    as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"rename\0" as *const u8 as *const libc::c_char,
                summary: b"Rename a key\0" as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"1.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_GENERIC,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(renameCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 3 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 0 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int
                                | (1 as libc::c_ulonglong) << 7 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 2 as libc::c_int
                                | (1 as libc::c_ulonglong) << 5 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 2 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: RENAME_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"renamenx\0" as *const u8 as *const libc::c_char,
                summary: b"Rename a key, only if the new key does not exist\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"1.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_GENERIC,
                history: RENAMENX_History.as_ptr() as *mut _,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(renamenxCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 3 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 0 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int
                                | (1 as libc::c_ulonglong) << 7 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 2 as libc::c_int
                                | (1 as libc::c_ulonglong) << 6 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 2 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: RENAMENX_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"restore\0" as *const u8 as *const libc::c_char,
                summary: b"Create a key using the provided serialized value, previously obtained using DUMP.\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1) to create the new key and additional O(N*M) to reconstruct the serialized value, where N is the number of Redis objects composing the value and M their average size. For small string values the time complexity is thus O(1)+O(1*M) where M is small, so simply O(1). However for sorted set values the complexity is O(N*M*log(N)) because inserting values into sorted sets is O(log(N)).\0"
                    as *const u8 as *const libc::c_char,
                since: b"2.6.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_GENERIC,
                history: RESTORE_History.as_ptr() as *mut _,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(restoreCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(4 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 2 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int) as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 2 as libc::c_int
                                | (1 as libc::c_ulonglong) << 5 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: RESTORE_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"scan\0" as *const u8 as *const libc::c_char,
                summary: b"Incrementally iterate the keys space\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection.\0"
                    as *const u8 as *const libc::c_char,
                since: b"2.8.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_GENERIC,
                history: SCAN_History.as_ptr() as *mut _,
                tips: SCAN_tips.as_ptr() as *mut _,
                proc_0: Some(scanCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(2 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 0 as libc::c_int)
                    as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: SCAN_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"sort\0" as *const u8 as *const libc::c_char,
                summary: b"Sort the elements in a list, set or sorted set\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N+M*log(M)) where N is the number of elements in the list or set to sort, and M the number of returned elements. When the elements are not sorted, complexity is O(N).\0"
                    as *const u8 as *const libc::c_char,
                since: b"1.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_GENERIC,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(sortCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(2 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 2 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 3 as libc::c_int
                    | (1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 5 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int) as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    {
                        let mut init = keySpec {
                            notes: b"For the optional BY/GET keyword. It is marked 'unknown' because the key names derive from the content of the key we sort\0"
                                as *const u8 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_UNKNOWN,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_UNKNOWN,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 0,
                                        limit: 0,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    {
                        let mut init = keySpec {
                            notes: b"For the optional STORE keyword. It is marked 'unknown' because the keyword can appear anywhere in the argument array\0"
                                as *const u8 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 2 as libc::c_int
                                | (1 as libc::c_ulonglong) << 5 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_UNKNOWN,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_UNKNOWN,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 0,
                                        limit: 0,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: Some(
                    sortGetKeys
                        as unsafe extern "C" fn(
                            *mut redisCommand,
                            *mut *mut robj,
                            libc::c_int,
                            *mut getKeysResult,
                        ) -> libc::c_int,
                ),
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: SORT_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"sort_ro\0" as *const u8 as *const libc::c_char,
                summary: b"Sort the elements in a list, set or sorted set. Read-only variant of SORT.\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(N+M*log(M)) where N is the number of elements in the list or set to sort, and M the number of returned elements. When the elements are not sorted, complexity is O(N).\0"
                    as *const u8 as *const libc::c_char,
                since: b"7.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_GENERIC,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(sortroCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(2 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 3 as libc::c_int
                    | (1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 5 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int) as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    {
                        let mut init = keySpec {
                            notes: b"For the optional BY/GET keyword. It is marked 'unknown' because the key names derive from the content of the key we sort\0"
                                as *const u8 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_UNKNOWN,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_UNKNOWN,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 0,
                                        limit: 0,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: Some(
                    sortROGetKeys
                        as unsafe extern "C" fn(
                            *mut redisCommand,
                            *mut *mut robj,
                            libc::c_int,
                            *mut getKeysResult,
                        ) -> libc::c_int,
                ),
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: SORT_RO_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"touch\0" as *const u8 as *const libc::c_char,
                summary: b"Alters the last access time of a key(s). Returns the number of existing keys specified.\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(N) where N is the number of keys that will be touched.\0"
                    as *const u8 as *const libc::c_char,
                since: b"3.2.1\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_GENERIC,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: TOUCH_tips.as_ptr() as *mut _,
                proc_0: Some(touchCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(2 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 0 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int)
                                as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: -(1 as libc::c_int),
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: TOUCH_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"ttl\0" as *const u8 as *const libc::c_char,
                summary: b"Get the time to live for a key in seconds\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"1.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_GENERIC,
                history: TTL_History.as_ptr() as *mut _,
                tips: TTL_tips.as_ptr() as *mut _,
                proc_0: Some(ttlCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 0 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: TTL_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"type\0" as *const u8 as *const libc::c_char,
                summary: b"Determine the type stored at key\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"1.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_GENERIC,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(typeCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 0 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int)
                                as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: TYPE_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"unlink\0" as *const u8 as *const libc::c_char,
                summary: b"Delete a key asynchronously in another thread. Otherwise it is just as DEL, but non blocking.\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1) for each key removed regardless of its size. Then the command does O(N) work in a different thread in order to reclaim memory, where N is the number of allocations the deleted objects where composed of.\0"
                    as *const u8 as *const libc::c_char,
                since: b"4.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_GENERIC,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: UNLINK_tips.as_ptr() as *mut _,
                proc_0: Some(unlinkCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(2 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 0 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 3 as libc::c_int
                                | (1 as libc::c_ulonglong) << 7 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: -(1 as libc::c_int),
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: UNLINK_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"wait\0" as *const u8 as *const libc::c_char,
                summary: b"Wait for the synchronous replication of all the write commands sent in the context of the current connection\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"3.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_GENERIC,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: WAIT_tips.as_ptr() as *mut _,
                proc_0: Some(waitCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 3 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 6 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 18 as libc::c_int)
                    as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: WAIT_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"geoadd\0" as *const u8 as *const libc::c_char,
                summary: b"Add one or more geospatial items in the geospatial index represented using a sorted set\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(log(N)) for each item added, where N is the number of elements in the sorted set.\0"
                    as *const u8 as *const libc::c_char,
                since: b"3.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_GEO,
                history: GEOADD_History.as_ptr() as *mut _,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(geoaddCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(5 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 2 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 10 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 5 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: GEOADD_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"geodist\0" as *const u8 as *const libc::c_char,
                summary: b"Returns the distance between two members of a geospatial index\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(log(N))\0" as *const u8 as *const libc::c_char,
                since: b"3.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_GEO,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(geodistCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(4 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 10 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: GEODIST_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"geohash\0" as *const u8 as *const libc::c_char,
                summary: b"Returns members of a geospatial index as standard geohash strings\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(log(N)) for each member requested, where N is the number of elements in the sorted set.\0"
                    as *const u8 as *const libc::c_char,
                since: b"3.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_GEO,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(geohashCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(2 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 10 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: GEOHASH_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"geopos\0" as *const u8 as *const libc::c_char,
                summary: b"Returns longitude and latitude of members of a geospatial index\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(N) where N is the number of members requested.\0"
                    as *const u8 as *const libc::c_char,
                since: b"3.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_GEO,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(geoposCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(2 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 10 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: GEOPOS_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"georadius\0" as *const u8 as *const libc::c_char,
                summary: b"Query a sorted set representing a geospatial index to fetch members matching a given maximum distance from a point\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(N+log(M)) where N is the number of elements inside the bounding box of the circular area delimited by center and radius and M is the number of items inside the index.\0"
                    as *const u8 as *const libc::c_char,
                since: b"3.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: (1 as libc::c_int) << 0 as libc::c_int,
                replaced_by: b"`GEOSEARCH` and `GEOSEARCHSTORE` with the `BYRADIUS` argument\0"
                    as *const u8 as *const libc::c_char,
                deprecated_since: b"6.2.0\0" as *const u8 as *const libc::c_char,
                group: COMMAND_GROUP_GEO,
                history: GEORADIUS_History.as_ptr() as *mut _,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(
                    georadiusCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: -(6 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 2 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 10 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 2 as libc::c_int
                                | (1 as libc::c_ulonglong) << 5 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_KEYWORD,
                            bs: C2RustUnnamed_3 {
                                keyword: {
                                    let mut init = C2RustUnnamed_4 {
                                        keyword: b"STORE\0" as *const u8 as *const libc::c_char,
                                        startfrom: 6 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 2 as libc::c_int
                                | (1 as libc::c_ulonglong) << 5 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_KEYWORD,
                            bs: C2RustUnnamed_3 {
                                keyword: {
                                    let mut init = C2RustUnnamed_4 {
                                        keyword: b"STOREDIST\0" as *const u8 as *const libc::c_char,
                                        startfrom: 6 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: Some(
                    georadiusGetKeys
                        as unsafe extern "C" fn(
                            *mut redisCommand,
                            *mut *mut robj,
                            libc::c_int,
                            *mut getKeysResult,
                        ) -> libc::c_int,
                ),
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: GEORADIUS_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"georadiusbymember\0" as *const u8
                    as *const libc::c_char,
                summary: b"Query a sorted set representing a geospatial index to fetch members matching a given maximum distance from a member\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(N+log(M)) where N is the number of elements inside the bounding box of the circular area delimited by center and radius and M is the number of items inside the index.\0"
                    as *const u8 as *const libc::c_char,
                since: b"3.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: (1 as libc::c_int) << 0 as libc::c_int,
                replaced_by: b"`GEOSEARCH` and `GEOSEARCHSTORE` with the `BYRADIUS` and `FROMMEMBER` arguments\0"
                    as *const u8 as *const libc::c_char,
                deprecated_since: b"6.2.0\0" as *const u8 as *const libc::c_char,
                group: COMMAND_GROUP_GEO,
                history: GEORADIUSBYMEMBER_History.as_ptr() as *mut _,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(
                    georadiusbymemberCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: -(5 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 2 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 10 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 2 as libc::c_int
                                | (1 as libc::c_ulonglong) << 5 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_KEYWORD,
                            bs: C2RustUnnamed_3 {
                                keyword: {
                                    let mut init = C2RustUnnamed_4 {
                                        keyword: b"STORE\0" as *const u8 as *const libc::c_char,
                                        startfrom: 5 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 2 as libc::c_int
                                | (1 as libc::c_ulonglong) << 5 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_KEYWORD,
                            bs: C2RustUnnamed_3 {
                                keyword: {
                                    let mut init = C2RustUnnamed_4 {
                                        keyword: b"STOREDIST\0" as *const u8 as *const libc::c_char,
                                        startfrom: 5 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: Some(
                    georadiusGetKeys
                        as unsafe extern "C" fn(
                            *mut redisCommand,
                            *mut *mut robj,
                            libc::c_int,
                            *mut getKeysResult,
                        ) -> libc::c_int,
                ),
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: GEORADIUSBYMEMBER_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"georadiusbymember_ro\0" as *const u8
                    as *const libc::c_char,
                summary: b"A read-only variant for GEORADIUSBYMEMBER\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N+log(M)) where N is the number of elements inside the bounding box of the circular area delimited by center and radius and M is the number of items inside the index.\0"
                    as *const u8 as *const libc::c_char,
                since: b"3.2.10\0" as *const u8 as *const libc::c_char,
                doc_flags: (1 as libc::c_int) << 0 as libc::c_int,
                replaced_by: b"`GEOSEARCH` with the `BYRADIUS` and `FROMMEMBER` arguments\0"
                    as *const u8 as *const libc::c_char,
                deprecated_since: b"6.2.0\0" as *const u8 as *const libc::c_char,
                group: COMMAND_GROUP_GEO,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(
                    georadiusbymemberroCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: -(5 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 10 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: GEORADIUSBYMEMBER_RO_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"georadius_ro\0" as *const u8 as *const libc::c_char,
                summary: b"A read-only variant for GEORADIUS\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N+log(M)) where N is the number of elements inside the bounding box of the circular area delimited by center and radius and M is the number of items inside the index.\0"
                    as *const u8 as *const libc::c_char,
                since: b"3.2.10\0" as *const u8 as *const libc::c_char,
                doc_flags: (1 as libc::c_int) << 0 as libc::c_int,
                replaced_by: b"`GEOSEARCH` with the `BYRADIUS` argument\0" as *const u8
                    as *const libc::c_char,
                deprecated_since: b"6.2.0\0" as *const u8 as *const libc::c_char,
                group: COMMAND_GROUP_GEO,
                history: GEORADIUS_RO_History.as_ptr() as *mut _,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(
                    georadiusroCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: -(6 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 10 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: GEORADIUS_RO_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"geosearch\0" as *const u8 as *const libc::c_char,
                summary: b"Query a sorted set representing a geospatial index to fetch members inside an area of a box or a circle.\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(N+log(M)) where N is the number of elements in the grid-aligned bounding box area around the shape provided as the filter and M is the number of items inside the shape\0"
                    as *const u8 as *const libc::c_char,
                since: b"6.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_GEO,
                history: GEOSEARCH_History.as_ptr() as *mut _,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(
                    geosearchCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: -(7 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 10 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: GEOSEARCH_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"geosearchstore\0" as *const u8 as *const libc::c_char,
                summary: b"Query a sorted set representing a geospatial index to fetch members inside an area of a box or a circle, and store the result in another key.\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(N+log(M)) where N is the number of elements in the grid-aligned bounding box area around the shape provided as the filter and M is the number of items inside the shape\0"
                    as *const u8 as *const libc::c_char,
                since: b"6.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_GEO,
                history: GEOSEARCHSTORE_History.as_ptr() as *mut _,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(
                    geosearchstoreCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: -(8 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 2 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 10 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 2 as libc::c_int
                                | (1 as libc::c_ulonglong) << 5 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 2 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: GEOSEARCHSTORE_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"hdel\0" as *const u8 as *const libc::c_char,
                summary: b"Delete one or more hash fields\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N) where N is the number of fields to be removed.\0"
                    as *const u8 as *const libc::c_char,
                since: b"2.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_HASH,
                history: HDEL_History.as_ptr() as *mut _,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(hdelCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 6 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 7 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: HDEL_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"hexists\0" as *const u8 as *const libc::c_char,
                summary: b"Determine if a hash field exists\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"2.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_HASH,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(hexistsCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 3 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 6 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int)
                                as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: HEXISTS_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"hget\0" as *const u8 as *const libc::c_char,
                summary: b"Get the value of a hash field\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"2.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_HASH,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(hgetCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 3 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 6 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: HGET_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"hgetall\0" as *const u8 as *const libc::c_char,
                summary: b"Get all the fields and values in a hash\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N) where N is the size of the hash.\0" as *const u8
                    as *const libc::c_char,
                since: b"2.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_HASH,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: HGETALL_tips.as_ptr() as *mut _,
                proc_0: Some(hgetallCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 6 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: HGETALL_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"hincrby\0" as *const u8 as *const libc::c_char,
                summary: b"Increment the integer value of a hash field by the given number\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"2.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_HASH,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(hincrbyCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 4 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 2 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 6 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int
                                | (1 as libc::c_ulonglong) << 5 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: HINCRBY_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"hincrbyfloat\0" as *const u8 as *const libc::c_char,
                summary: b"Increment the float value of a hash field by the given amount\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"2.6.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_HASH,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(
                    hincrbyfloatCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: 4 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 2 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 6 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int
                                | (1 as libc::c_ulonglong) << 5 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: HINCRBYFLOAT_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"hkeys\0" as *const u8 as *const libc::c_char,
                summary: b"Get all the fields in a hash\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N) where N is the size of the hash.\0" as *const u8
                    as *const libc::c_char,
                since: b"2.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_HASH,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: HKEYS_tips.as_ptr() as *mut _,
                proc_0: Some(hkeysCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 6 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: HKEYS_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"hlen\0" as *const u8 as *const libc::c_char,
                summary: b"Get the number of fields in a hash\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"2.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_HASH,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(hlenCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 6 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int)
                                as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: HLEN_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"hmget\0" as *const u8 as *const libc::c_char,
                summary: b"Get the values of all the given hash fields\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N) where N is the number of fields being requested.\0"
                    as *const u8 as *const libc::c_char,
                since: b"2.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_HASH,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(hmgetCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 6 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: HMGET_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"hmset\0" as *const u8 as *const libc::c_char,
                summary: b"Set multiple hash fields to multiple values\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N) where N is the number of fields being set.\0"
                    as *const u8 as *const libc::c_char,
                since: b"2.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: (1 as libc::c_int) << 0 as libc::c_int,
                replaced_by: b"`HSET` with multiple field-value pairs\0" as *const u8
                    as *const libc::c_char,
                deprecated_since: b"4.0.0\0" as *const u8 as *const libc::c_char,
                group: COMMAND_GROUP_HASH,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(hsetCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(4 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 2 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 6 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 5 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: HMSET_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"hrandfield\0" as *const u8 as *const libc::c_char,
                summary: b"Get one or multiple random fields from a hash\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N) where N is the number of fields returned\0"
                    as *const u8 as *const libc::c_char,
                since: b"6.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_HASH,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: HRANDFIELD_tips.as_ptr() as *mut _,
                proc_0: Some(
                    hrandfieldCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: -(2 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 6 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: HRANDFIELD_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"hscan\0" as *const u8 as *const libc::c_char,
                summary: b"Incrementally iterate hash fields and associated values\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection..\0"
                    as *const u8 as *const libc::c_char,
                since: b"2.8.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_HASH,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: HSCAN_tips.as_ptr() as *mut _,
                proc_0: Some(hscanCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 6 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: HSCAN_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"hset\0" as *const u8 as *const libc::c_char,
                summary: b"Set the string value of a hash field\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1) for each field/value pair added, so O(N) to add N field/value pairs when the command is called with multiple field/value pairs.\0"
                    as *const u8 as *const libc::c_char,
                since: b"2.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_HASH,
                history: HSET_History.as_ptr() as *mut _,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(hsetCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(4 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 2 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 6 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 5 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: HSET_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"hsetnx\0" as *const u8 as *const libc::c_char,
                summary: b"Set the value of a hash field, only if the field does not exist\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"2.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_HASH,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(hsetnxCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 4 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 2 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 6 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 6 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: HSETNX_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"hstrlen\0" as *const u8 as *const libc::c_char,
                summary: b"Get the length of the value of a hash field\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"3.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_HASH,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(hstrlenCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 3 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 6 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int)
                                as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: HSTRLEN_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"hvals\0" as *const u8 as *const libc::c_char,
                summary: b"Get all the values in a hash\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N) where N is the size of the hash.\0" as *const u8
                    as *const libc::c_char,
                since: b"2.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_HASH,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: HVALS_tips.as_ptr() as *mut _,
                proc_0: Some(hvalsCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 6 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: HVALS_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"pfadd\0" as *const u8 as *const libc::c_char,
                summary: b"Adds the specified elements to the specified HyperLogLog.\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1) to add every element.\0" as *const u8
                    as *const libc::c_char,
                since: b"2.8.9\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_HYPERLOGLOG,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(pfaddCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(2 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 2 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 9 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 6 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: PFADD_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"pfcount\0" as *const u8 as *const libc::c_char,
                summary: b"Return the approximated cardinality of the set(s) observed by the HyperLogLog at key(s).\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1) with a very small average constant time when called with a single key. O(N) with N being the number of keys, and much bigger constant times, when called with multiple keys.\0"
                    as *const u8 as *const libc::c_char,
                since: b"2.8.9\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_HYPERLOGLOG,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(pfcountCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(2 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                    | (1 as libc::c_ulonglong) << 16 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 9 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: b"RW because it may change the internal representation of the key, and propagate to replicas\0"
                                as *const u8 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: -(1 as libc::c_int),
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: PFCOUNT_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"pfdebug\0" as *const u8 as *const libc::c_char,
                summary: b"Internal commands for debugging HyperLogLog values\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"N/A\0" as *const u8 as *const libc::c_char,
                since: b"2.8.9\0" as *const u8 as *const libc::c_char,
                doc_flags: (1 as libc::c_int) << 1 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_HYPERLOGLOG,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(pfdebugCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 3 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 2 as libc::c_int
                    | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 9 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 2 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: PFDEBUG_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"pfmerge\0" as *const u8 as *const libc::c_char,
                summary: b"Merge N different HyperLogLogs into a single one.\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(N) to merge N HyperLogLogs, but with high constant times.\0"
                    as *const u8 as *const libc::c_char,
                since: b"2.8.9\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_HYPERLOGLOG,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(pfmergeCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(2 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 2 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 9 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int
                                | (1 as libc::c_ulonglong) << 6 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 2 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: -(1 as libc::c_int),
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: PFMERGE_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"pfselftest\0" as *const u8 as *const libc::c_char,
                summary: b"An internal command for testing HyperLogLog values\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"N/A\0" as *const u8 as *const libc::c_char,
                since: b"2.8.9\0" as *const u8 as *const libc::c_char,
                doc_flags: (1 as libc::c_int) << 1 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_HYPERLOGLOG,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(
                    pfselftestCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: 1 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 9 as libc::c_int)
                    as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"blmove\0" as *const u8 as *const libc::c_char,
                summary: b"Pop an element from a list, push it to another list and return it; or block until one is available\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"6.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_LIST,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(blmoveCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 6 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 2 as libc::c_int
                    | (1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 8 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 5 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int
                                | (1 as libc::c_ulonglong) << 7 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 6 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 2 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: BLMOVE_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"blmpop\0" as *const u8 as *const libc::c_char,
                summary: b"Pop elements from a list, or block until one is available\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(N+M) where N is the number of provided keys and M is the number of elements returned.\0"
                    as *const u8 as *const libc::c_char,
                since: b"7.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_LIST,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(blmpopCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(5 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 8 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 5 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int
                                | (1 as libc::c_ulonglong) << 7 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 2 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_KEYNUM,
                            fk: C2RustUnnamed_0 {
                                keynum: {
                                    let mut init = C2RustUnnamed_1 {
                                        keynumidx: 0 as libc::c_int,
                                        firstkey: 1 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: Some(
                    blmpopGetKeys
                        as unsafe extern "C" fn(
                            *mut redisCommand,
                            *mut *mut robj,
                            libc::c_int,
                            *mut getKeysResult,
                        ) -> libc::c_int,
                ),
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: BLMPOP_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"blpop\0" as *const u8 as *const libc::c_char,
                summary: b"Remove and get the first element in a list, or block until one is available\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(N) where N is the number of provided keys.\0"
                    as *const u8 as *const libc::c_char,
                since: b"2.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_LIST,
                history: BLPOP_History.as_ptr() as *mut _,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(blpopCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 8 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 5 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int
                                | (1 as libc::c_ulonglong) << 7 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: -(2 as libc::c_int),
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: BLPOP_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"brpop\0" as *const u8 as *const libc::c_char,
                summary: b"Remove and get the last element in a list, or block until one is available\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(N) where N is the number of provided keys.\0"
                    as *const u8 as *const libc::c_char,
                since: b"2.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_LIST,
                history: BRPOP_History.as_ptr() as *mut _,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(brpopCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 8 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 5 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int
                                | (1 as libc::c_ulonglong) << 7 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: -(2 as libc::c_int),
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: BRPOP_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"brpoplpush\0" as *const u8 as *const libc::c_char,
                summary: b"Pop an element from a list, push it to another list and return it; or block until one is available\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"2.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: (1 as libc::c_int) << 0 as libc::c_int,
                replaced_by: b"`BLMOVE` with the `RIGHT` and `LEFT` arguments\0"
                    as *const u8 as *const libc::c_char,
                deprecated_since: b"6.2.0\0" as *const u8 as *const libc::c_char,
                group: COMMAND_GROUP_LIST,
                history: BRPOPLPUSH_History.as_ptr() as *mut _,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(
                    brpoplpushCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: 4 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 2 as libc::c_int
                    | (1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 8 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 5 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int
                                | (1 as libc::c_ulonglong) << 7 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 6 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 2 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: BRPOPLPUSH_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"lindex\0" as *const u8 as *const libc::c_char,
                summary: b"Get an element from a list by its index\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N) where N is the number of elements to traverse to get to the element at index. This makes asking for the first or the last element of the list O(1).\0"
                    as *const u8 as *const libc::c_char,
                since: b"1.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_LIST,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(lindexCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 3 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 5 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: LINDEX_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"linsert\0" as *const u8 as *const libc::c_char,
                summary: b"Insert an element before or after another element in a list\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(N) where N is the number of elements to traverse before seeing the value pivot. This means that inserting somewhere on the left end on the list (head) can be considered O(1) and inserting somewhere on the right end (tail) is O(N).\0"
                    as *const u8 as *const libc::c_char,
                since: b"2.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_LIST,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(linsertCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 5 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 2 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 5 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 6 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: LINSERT_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"llen\0" as *const u8 as *const libc::c_char,
                summary: b"Get the length of a list\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"1.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_LIST,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(llenCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 5 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int)
                                as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: LLEN_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"lmove\0" as *const u8 as *const libc::c_char,
                summary: b"Pop an element from a list, push it to another list and return it\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"6.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_LIST,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(lmoveCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 5 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 2 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 5 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int
                                | (1 as libc::c_ulonglong) << 7 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 6 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 2 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: LMOVE_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"lmpop\0" as *const u8 as *const libc::c_char,
                summary: b"Pop elements from a list\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N+M) where N is the number of provided keys and M is the number of elements returned.\0"
                    as *const u8 as *const libc::c_char,
                since: b"7.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_LIST,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(lmpopCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(4 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 5 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int
                                | (1 as libc::c_ulonglong) << 7 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_KEYNUM,
                            fk: C2RustUnnamed_0 {
                                keynum: {
                                    let mut init = C2RustUnnamed_1 {
                                        keynumidx: 0 as libc::c_int,
                                        firstkey: 1 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: Some(
                    lmpopGetKeys
                        as unsafe extern "C" fn(
                            *mut redisCommand,
                            *mut *mut robj,
                            libc::c_int,
                            *mut getKeysResult,
                        ) -> libc::c_int,
                ),
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: LMPOP_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"lpop\0" as *const u8 as *const libc::c_char,
                summary: b"Remove and get the first elements in a list\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N) where N is the number of elements returned\0"
                    as *const u8 as *const libc::c_char,
                since: b"1.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_LIST,
                history: LPOP_History.as_ptr() as *mut _,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(lpopCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(2 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 5 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int
                                | (1 as libc::c_ulonglong) << 7 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: LPOP_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"lpos\0" as *const u8 as *const libc::c_char,
                summary: b"Return the index of matching elements on a list\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(N) where N is the number of elements in the list, for the average case. When searching for elements near the head or the tail of the list, or when the MAXLEN option is provided, the command may run in constant time.\0"
                    as *const u8 as *const libc::c_char,
                since: b"6.0.6\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_LIST,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(lposCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 5 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: LPOS_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"lpush\0" as *const u8 as *const libc::c_char,
                summary: b"Prepend one or multiple elements to a list\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.\0"
                    as *const u8 as *const libc::c_char,
                since: b"1.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_LIST,
                history: LPUSH_History.as_ptr() as *mut _,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(lpushCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 2 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 5 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 6 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: LPUSH_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"lpushx\0" as *const u8 as *const libc::c_char,
                summary: b"Prepend an element to a list, only if the list exists\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.\0"
                    as *const u8 as *const libc::c_char,
                since: b"2.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_LIST,
                history: LPUSHX_History.as_ptr() as *mut _,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(lpushxCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 2 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 5 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 6 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: LPUSHX_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"lrange\0" as *const u8 as *const libc::c_char,
                summary: b"Get a range of elements from a list\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(S+N) where S is the distance of start offset from HEAD for small lists, from nearest end (HEAD or TAIL) for large lists; and N is the number of elements in the specified range.\0"
                    as *const u8 as *const libc::c_char,
                since: b"1.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_LIST,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(lrangeCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 4 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 5 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: LRANGE_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"lrem\0" as *const u8 as *const libc::c_char,
                summary: b"Remove elements from a list\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N+M) where N is the length of the list and M is the number of elements removed.\0"
                    as *const u8 as *const libc::c_char,
                since: b"1.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_LIST,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(lremCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 4 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 5 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 7 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: LREM_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"lset\0" as *const u8 as *const libc::c_char,
                summary: b"Set the value of an element in a list by its index\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(N) where N is the length of the list. Setting either the first or the last element of the list is O(1).\0"
                    as *const u8 as *const libc::c_char,
                since: b"1.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_LIST,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(lsetCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 4 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 2 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 5 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 5 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: LSET_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"ltrim\0" as *const u8 as *const libc::c_char,
                summary: b"Trim a list to the specified range\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N) where N is the number of elements to be removed by the operation.\0"
                    as *const u8 as *const libc::c_char,
                since: b"1.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_LIST,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(ltrimCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 4 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 5 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 7 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: LTRIM_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"rpop\0" as *const u8 as *const libc::c_char,
                summary: b"Remove and get the last elements in a list\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N) where N is the number of elements returned\0"
                    as *const u8 as *const libc::c_char,
                since: b"1.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_LIST,
                history: RPOP_History.as_ptr() as *mut _,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(rpopCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(2 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 5 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int
                                | (1 as libc::c_ulonglong) << 7 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: RPOP_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"rpoplpush\0" as *const u8 as *const libc::c_char,
                summary: b"Remove the last element in a list, prepend it to another list and return it\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"1.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: (1 as libc::c_int) << 0 as libc::c_int,
                replaced_by: b"`LMOVE` with the `RIGHT` and `LEFT` arguments\0"
                    as *const u8 as *const libc::c_char,
                deprecated_since: b"6.2.0\0" as *const u8 as *const libc::c_char,
                group: COMMAND_GROUP_LIST,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(
                    rpoplpushCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: 3 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 2 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 5 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int
                                | (1 as libc::c_ulonglong) << 7 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 6 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 2 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: RPOPLPUSH_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"rpush\0" as *const u8 as *const libc::c_char,
                summary: b"Append one or multiple elements to a list\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.\0"
                    as *const u8 as *const libc::c_char,
                since: b"1.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_LIST,
                history: RPUSH_History.as_ptr() as *mut _,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(rpushCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 2 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 5 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 6 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: RPUSH_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"rpushx\0" as *const u8 as *const libc::c_char,
                summary: b"Append an element to a list, only if the list exists\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.\0"
                    as *const u8 as *const libc::c_char,
                since: b"2.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_LIST,
                history: RPUSHX_History.as_ptr() as *mut _,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(rpushxCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 2 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 5 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 6 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: RPUSHX_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"psubscribe\0" as *const u8 as *const libc::c_char,
                summary: b"Listen for messages published to channels matching the given patterns\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(N) where N is the number of patterns the client is already subscribed to.\0"
                    as *const u8 as *const libc::c_char,
                since: b"2.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_PUBSUB,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(
                    psubscribeCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: -(2 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 5 as libc::c_int
                    | (1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: PSUBSCRIBE_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"publish\0" as *const u8 as *const libc::c_char,
                summary: b"Post a message to a channel\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N+M) where N is the number of clients subscribed to the receiving channel and M is the total number of subscribed patterns (by any client).\0"
                    as *const u8 as *const libc::c_char,
                since: b"2.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_PUBSUB,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(publishCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 3 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 5 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int
                    | (1 as libc::c_ulonglong) << 16 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: PUBLISH_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"pubsub\0" as *const u8 as *const libc::c_char,
                summary: b"A container for Pub/Sub commands\0" as *const u8
                    as *const libc::c_char,
                complexity: b"Depends on subcommand.\0" as *const u8
                    as *const libc::c_char,
                since: b"2.8.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_PUBSUB,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: None,
                arity: -(2 as libc::c_int),
                flags: 0 as libc::c_int as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: PUBSUB_Subcommands.as_ptr() as *mut _,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"punsubscribe\0" as *const u8 as *const libc::c_char,
                summary: b"Stop listening for messages posted to channels matching the given patterns\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(N+M) where N is the number of patterns the client is already subscribed and M is the number of total patterns subscribed in the system (by any client).\0"
                    as *const u8 as *const libc::c_char,
                since: b"2.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_PUBSUB,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(
                    punsubscribeCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: -(1 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 5 as libc::c_int
                    | (1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: PUNSUBSCRIBE_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"spublish\0" as *const u8 as *const libc::c_char,
                summary: b"Post a message to a shard channel\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N) where N is the number of clients subscribed to the receiving shard channel.\0"
                    as *const u8 as *const libc::c_char,
                since: b"7.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_PUBSUB,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(spublishCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 3 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 5 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int
                    | (1 as libc::c_ulonglong) << 16 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 8 as libc::c_int)
                                as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: SPUBLISH_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"ssubscribe\0" as *const u8 as *const libc::c_char,
                summary: b"Listen for messages published to the given shard channels\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(N) where N is the number of shard channels to subscribe to.\0"
                    as *const u8 as *const libc::c_char,
                since: b"7.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_PUBSUB,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(
                    ssubscribeCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: -(2 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 5 as libc::c_int
                    | (1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 8 as libc::c_int)
                                as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: -(1 as libc::c_int),
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: SSUBSCRIBE_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"subscribe\0" as *const u8 as *const libc::c_char,
                summary: b"Listen for messages published to the given channels\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(N) where N is the number of channels to subscribe to.\0"
                    as *const u8 as *const libc::c_char,
                since: b"2.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_PUBSUB,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(
                    subscribeCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: -(2 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 5 as libc::c_int
                    | (1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: SUBSCRIBE_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"sunsubscribe\0" as *const u8 as *const libc::c_char,
                summary: b"Stop listening for messages posted to the given shard channels\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(N) where N is the number of clients already subscribed to a shard channel.\0"
                    as *const u8 as *const libc::c_char,
                since: b"7.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_PUBSUB,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(
                    sunsubscribeCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: -(1 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 5 as libc::c_int
                    | (1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 8 as libc::c_int)
                                as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: -(1 as libc::c_int),
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: SUNSUBSCRIBE_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"unsubscribe\0" as *const u8 as *const libc::c_char,
                summary: b"Stop listening for messages posted to the given channels\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(N) where N is the number of clients already subscribed to a channel.\0"
                    as *const u8 as *const libc::c_char,
                since: b"2.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_PUBSUB,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(
                    unsubscribeCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: -(1 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 5 as libc::c_int
                    | (1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: UNSUBSCRIBE_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"eval\0" as *const u8 as *const libc::c_char,
                summary: b"Execute a Lua script server side\0" as *const u8
                    as *const libc::c_char,
                complexity: b"Depends on the script that is executed.\0" as *const u8
                    as *const libc::c_char,
                since: b"2.6.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SCRIPTING,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(evalCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 11 as libc::c_int
                    | (1 as libc::c_ulonglong) << 16 as libc::c_int
                    | (1 as libc::c_ulonglong) << 19 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 20 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: b"We cannot tell how the keys will be used so we assume the worst, RW and UPDATE\0"
                                as *const u8 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int
                                | (1 as libc::c_ulonglong) << 5 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 2 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_KEYNUM,
                            fk: C2RustUnnamed_0 {
                                keynum: {
                                    let mut init = C2RustUnnamed_1 {
                                        keynumidx: 0 as libc::c_int,
                                        firstkey: 1 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: Some(
                    evalGetKeys
                        as unsafe extern "C" fn(
                            *mut redisCommand,
                            *mut *mut robj,
                            libc::c_int,
                            *mut getKeysResult,
                        ) -> libc::c_int,
                ),
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: EVAL_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"evalsha\0" as *const u8 as *const libc::c_char,
                summary: b"Execute a Lua script server side\0" as *const u8
                    as *const libc::c_char,
                complexity: b"Depends on the script that is executed.\0" as *const u8
                    as *const libc::c_char,
                since: b"2.6.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SCRIPTING,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(evalShaCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 11 as libc::c_int
                    | (1 as libc::c_ulonglong) << 16 as libc::c_int
                    | (1 as libc::c_ulonglong) << 19 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 20 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int
                                | (1 as libc::c_ulonglong) << 5 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 2 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_KEYNUM,
                            fk: C2RustUnnamed_0 {
                                keynum: {
                                    let mut init = C2RustUnnamed_1 {
                                        keynumidx: 0 as libc::c_int,
                                        firstkey: 1 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: Some(
                    evalGetKeys
                        as unsafe extern "C" fn(
                            *mut redisCommand,
                            *mut *mut robj,
                            libc::c_int,
                            *mut getKeysResult,
                        ) -> libc::c_int,
                ),
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: EVALSHA_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"evalsha_ro\0" as *const u8 as *const libc::c_char,
                summary: b"Execute a read-only Lua script server side\0" as *const u8
                    as *const libc::c_char,
                complexity: b"Depends on the script that is executed.\0" as *const u8
                    as *const libc::c_char,
                since: b"7.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SCRIPTING,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(
                    evalShaRoCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 11 as libc::c_int
                    | (1 as libc::c_ulonglong) << 19 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 1 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 20 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 2 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_KEYNUM,
                            fk: C2RustUnnamed_0 {
                                keynum: {
                                    let mut init = C2RustUnnamed_1 {
                                        keynumidx: 0 as libc::c_int,
                                        firstkey: 1 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: Some(
                    evalGetKeys
                        as unsafe extern "C" fn(
                            *mut redisCommand,
                            *mut *mut robj,
                            libc::c_int,
                            *mut getKeysResult,
                        ) -> libc::c_int,
                ),
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: EVALSHA_RO_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"eval_ro\0" as *const u8 as *const libc::c_char,
                summary: b"Execute a read-only Lua script server side\0" as *const u8
                    as *const libc::c_char,
                complexity: b"Depends on the script that is executed.\0" as *const u8
                    as *const libc::c_char,
                since: b"7.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SCRIPTING,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(evalRoCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 11 as libc::c_int
                    | (1 as libc::c_ulonglong) << 19 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 1 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 20 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: b"We cannot tell how the keys will be used so we assume the worst, RO and ACCESS\0"
                                as *const u8 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 2 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_KEYNUM,
                            fk: C2RustUnnamed_0 {
                                keynum: {
                                    let mut init = C2RustUnnamed_1 {
                                        keynumidx: 0 as libc::c_int,
                                        firstkey: 1 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: Some(
                    evalGetKeys
                        as unsafe extern "C" fn(
                            *mut redisCommand,
                            *mut *mut robj,
                            libc::c_int,
                            *mut getKeysResult,
                        ) -> libc::c_int,
                ),
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: EVAL_RO_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"fcall\0" as *const u8 as *const libc::c_char,
                summary: b"Invoke a function\0" as *const u8 as *const libc::c_char,
                complexity: b"Depends on the function that is executed.\0" as *const u8
                    as *const libc::c_char,
                since: b"7.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SCRIPTING,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(fcallCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 11 as libc::c_int
                    | (1 as libc::c_ulonglong) << 16 as libc::c_int
                    | (1 as libc::c_ulonglong) << 19 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 20 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: b"We cannot tell how the keys will be used so we assume the worst, RW and UPDATE\0"
                                as *const u8 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int
                                | (1 as libc::c_ulonglong) << 5 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 2 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_KEYNUM,
                            fk: C2RustUnnamed_0 {
                                keynum: {
                                    let mut init = C2RustUnnamed_1 {
                                        keynumidx: 0 as libc::c_int,
                                        firstkey: 1 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: Some(
                    functionGetKeys
                        as unsafe extern "C" fn(
                            *mut redisCommand,
                            *mut *mut robj,
                            libc::c_int,
                            *mut getKeysResult,
                        ) -> libc::c_int,
                ),
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: FCALL_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"fcall_ro\0" as *const u8 as *const libc::c_char,
                summary: b"Invoke a read-only function\0" as *const u8
                    as *const libc::c_char,
                complexity: b"Depends on the function that is executed.\0" as *const u8
                    as *const libc::c_char,
                since: b"7.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SCRIPTING,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(fcallroCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 11 as libc::c_int
                    | (1 as libc::c_ulonglong) << 19 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 1 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 20 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: b"We cannot tell how the keys will be used so we assume the worst, RO and ACCESS\0"
                                as *const u8 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 2 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_KEYNUM,
                            fk: C2RustUnnamed_0 {
                                keynum: {
                                    let mut init = C2RustUnnamed_1 {
                                        keynumidx: 0 as libc::c_int,
                                        firstkey: 1 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: Some(
                    functionGetKeys
                        as unsafe extern "C" fn(
                            *mut redisCommand,
                            *mut *mut robj,
                            libc::c_int,
                            *mut getKeysResult,
                        ) -> libc::c_int,
                ),
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: FCALL_RO_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"function\0" as *const u8 as *const libc::c_char,
                summary: b"A container for function commands\0" as *const u8
                    as *const libc::c_char,
                complexity: b"Depends on subcommand.\0" as *const u8
                    as *const libc::c_char,
                since: b"7.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SCRIPTING,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: None,
                arity: -(2 as libc::c_int),
                flags: 0 as libc::c_int as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: FUNCTION_Subcommands.as_ptr() as *mut _,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"script\0" as *const u8 as *const libc::c_char,
                summary: b"A container for Lua scripts management commands\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"Depends on subcommand.\0" as *const u8
                    as *const libc::c_char,
                since: b"2.6.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SCRIPTING,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: None,
                arity: -(2 as libc::c_int),
                flags: 0 as libc::c_int as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: SCRIPT_Subcommands.as_ptr() as *mut _,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"sentinel\0" as *const u8 as *const libc::c_char,
                summary: b"A container for Sentinel commands\0" as *const u8
                    as *const libc::c_char,
                complexity: b"Depends on subcommand.\0" as *const u8
                    as *const libc::c_char,
                since: b"2.8.4\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SENTINEL,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: None,
                arity: -(2 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int
                    | (1 as libc::c_ulonglong) << 18 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: SENTINEL_Subcommands.as_ptr() as *mut _,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"acl\0" as *const u8 as *const libc::c_char,
                summary: b"A container for Access List Control commands \0" as *const u8
                    as *const libc::c_char,
                complexity: b"Depends on subcommand.\0" as *const u8
                    as *const libc::c_char,
                since: b"6.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: None,
                arity: -(2 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 17 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: ACL_Subcommands.as_ptr() as *mut _,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"bgrewriteaof\0" as *const u8 as *const libc::c_char,
                summary: b"Asynchronously rewrite the append-only file\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"1.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(
                    bgrewriteaofCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: 1 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 23 as libc::c_int
                    | (1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 6 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"bgsave\0" as *const u8 as *const libc::c_char,
                summary: b"Asynchronously save the dataset to disk\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"1.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: BGSAVE_History.as_ptr() as *mut _,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(bgsaveCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(1 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 23 as libc::c_int
                    | (1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 6 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: BGSAVE_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"command\0" as *const u8 as *const libc::c_char,
                summary: b"Get array of Redis command details\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N) where N is the total number of Redis commands\0"
                    as *const u8 as *const libc::c_char,
                since: b"2.8.13\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: COMMAND_tips.as_ptr() as *mut _,
                proc_0: Some(commandCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(1 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 18 as libc::c_int)
                    as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: COMMAND_Subcommands.as_ptr() as *mut _,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"config\0" as *const u8 as *const libc::c_char,
                summary: b"A container for server configuration commands\0" as *const u8
                    as *const libc::c_char,
                complexity: b"Depends on subcommand.\0" as *const u8
                    as *const libc::c_char,
                since: b"2.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: None,
                arity: -(2 as libc::c_int),
                flags: 0 as libc::c_int as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: CONFIG_Subcommands.as_ptr() as *mut _,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"dbsize\0" as *const u8 as *const libc::c_char,
                summary: b"Return the number of keys in the selected database\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"1.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: DBSIZE_tips.as_ptr() as *mut _,
                proc_0: Some(dbsizeCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 1 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 0 as libc::c_int)
                    as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"debug\0" as *const u8 as *const libc::c_char,
                summary: b"A container for debugging commands\0" as *const u8
                    as *const libc::c_char,
                complexity: b"Depends on subcommand.\0" as *const u8
                    as *const libc::c_char,
                since: b"1.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: (1 as libc::c_int) << 1 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(debugCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(2 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 20 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"failover\0" as *const u8 as *const libc::c_char,
                summary: b"Start a coordinated failover between this server and one of its replicas.\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"6.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(failoverCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(1 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: FAILOVER_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"flushall\0" as *const u8 as *const libc::c_char,
                summary: b"Remove all keys from all databases\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N) where N is the total number of keys in all databases\0"
                    as *const u8 as *const libc::c_char,
                since: b"1.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: FLUSHALL_History.as_ptr() as *mut _,
                tips: FLUSHALL_tips.as_ptr() as *mut _,
                proc_0: Some(flushallCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(1 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int) as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: FLUSHALL_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"flushdb\0" as *const u8 as *const libc::c_char,
                summary: b"Remove all keys from the current database\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N) where N is the number of keys in the selected database\0"
                    as *const u8 as *const libc::c_char,
                since: b"1.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: FLUSHDB_History.as_ptr() as *mut _,
                tips: FLUSHDB_tips.as_ptr() as *mut _,
                proc_0: Some(flushdbCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(1 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int) as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: FLUSHDB_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"info\0" as *const u8 as *const libc::c_char,
                summary: b"Get information and statistics about the server\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"1.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: INFO_History.as_ptr() as *mut _,
                tips: INFO_tips.as_ptr() as *mut _,
                proc_0: Some(infoCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(1 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 17 as libc::c_int)
                    as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: INFO_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"lastsave\0" as *const u8 as *const libc::c_char,
                summary: b"Get the UNIX time stamp of the last successful save to disk\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"1.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: LASTSAVE_tips.as_ptr() as *mut _,
                proc_0: Some(lastsaveCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 1 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 13 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int) as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"latency\0" as *const u8 as *const libc::c_char,
                summary: b"A container for latency diagnostics commands\0" as *const u8
                    as *const libc::c_char,
                complexity: b"Depends on subcommand.\0" as *const u8
                    as *const libc::c_char,
                since: b"2.8.13\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: None,
                arity: -(2 as libc::c_int),
                flags: 0 as libc::c_int as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: LATENCY_Subcommands.as_ptr() as *mut _,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"lolwut\0" as *const u8 as *const libc::c_char,
                summary: b"Display some computer art and the Redis version\0"
                    as *const u8 as *const libc::c_char,
                complexity: 0 as *const libc::c_char,
                since: b"5.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(lolwutCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(1 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: LOLWUT_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"memory\0" as *const u8 as *const libc::c_char,
                summary: b"A container for memory diagnostics commands\0" as *const u8
                    as *const libc::c_char,
                complexity: b"Depends on subcommand.\0" as *const u8
                    as *const libc::c_char,
                since: b"4.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: None,
                arity: -(2 as libc::c_int),
                flags: 0 as libc::c_int as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: MEMORY_Subcommands.as_ptr() as *mut _,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"module\0" as *const u8 as *const libc::c_char,
                summary: b"A container for module commands\0" as *const u8
                    as *const libc::c_char,
                complexity: b"Depends on subcommand.\0" as *const u8
                    as *const libc::c_char,
                since: b"4.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: None,
                arity: -(2 as libc::c_int),
                flags: 0 as libc::c_int as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: MODULE_Subcommands.as_ptr() as *mut _,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"monitor\0" as *const u8 as *const libc::c_char,
                summary: b"Listen for all requests received by the server in real time\0"
                    as *const u8 as *const libc::c_char,
                complexity: 0 as *const libc::c_char,
                since: b"1.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(monitorCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 1 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"psync\0" as *const u8 as *const libc::c_char,
                summary: b"Internal command used for replication\0" as *const u8
                    as *const libc::c_char,
                complexity: 0 as *const libc::c_char,
                since: b"2.8.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(syncCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 23 as libc::c_int
                    | (1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 24 as libc::c_int
                    | (1 as libc::c_ulonglong) << 6 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: PSYNC_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"replconf\0" as *const u8 as *const libc::c_char,
                summary: b"An internal command for configuring the replication stream\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"3.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: (1 as libc::c_int) << 1 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(replconfCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(1 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 26 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"replicaof\0" as *const u8 as *const libc::c_char,
                summary: b"Make the server a replica of another instance, or promote it as master.\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"5.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(
                    replicaofCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: 3 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 23 as libc::c_int
                    | (1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: REPLICAOF_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"restore-asking\0" as *const u8 as *const libc::c_char,
                summary: b"An internal command for migrating keys in a cluster\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1) to create the new key and additional O(N*M) to reconstruct the serialized value, where N is the number of Redis objects composing the value and M their average size. For small string values the time complexity is thus O(1)+O(1*M) where M is small, so simply O(1). However for sorted set values the complexity is O(N*M*log(N)) because inserting values into sorted sets is O(log(N)).\0"
                    as *const u8 as *const libc::c_char,
                since: b"3.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: (1 as libc::c_int) << 1 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: RESTORE_ASKING_History.as_ptr() as *mut _,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(restoreCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(4 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 2 as libc::c_int
                    | (1 as libc::c_ulonglong) << 13 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int) as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 2 as libc::c_int
                                | (1 as libc::c_ulonglong) << 5 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: RESTORE_ASKING_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"role\0" as *const u8 as *const libc::c_char,
                summary: b"Return the role of the instance in the context of replication\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"2.8.12\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(roleCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 1 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 13 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int) as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"save\0" as *const u8 as *const libc::c_char,
                summary: b"Synchronously save the dataset to disk\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N) where N is the total number of keys in all databases\0"
                    as *const u8 as *const libc::c_char,
                since: b"1.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(saveCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 1 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 23 as libc::c_int
                    | (1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 24 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"shutdown\0" as *const u8 as *const libc::c_char,
                summary: b"Synchronously save the dataset to disk and then shut down the server\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(N) when saving, where N is the total number of keys in all databases when saving data, otherwise O(1)\0"
                    as *const u8 as *const libc::c_char,
                since: b"1.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: SHUTDOWN_History.as_ptr() as *mut _,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(shutdownCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(1 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 24 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int
                    | (1 as libc::c_ulonglong) << 26 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: SHUTDOWN_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"slaveof\0" as *const u8 as *const libc::c_char,
                summary: b"Make the server a replica of another instance, or promote it as master.\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"1.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: (1 as libc::c_int) << 0 as libc::c_int,
                replaced_by: b"`REPLICAOF`\0" as *const u8 as *const libc::c_char,
                deprecated_since: b"5.0.0\0" as *const u8 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(
                    replicaofCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: 3 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 23 as libc::c_int
                    | (1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: SLAVEOF_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"slowlog\0" as *const u8 as *const libc::c_char,
                summary: b"A container for slow log commands\0" as *const u8
                    as *const libc::c_char,
                complexity: b"Depends on subcommand.\0" as *const u8
                    as *const libc::c_char,
                since: b"2.2.12\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: None,
                arity: -(2 as libc::c_int),
                flags: 0 as libc::c_int as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: SLOWLOG_Subcommands.as_ptr() as *mut _,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"swapdb\0" as *const u8 as *const libc::c_char,
                summary: b"Swaps two Redis databases\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N) where N is the count of clients watching or blocking on keys from both databases.\0"
                    as *const u8 as *const libc::c_char,
                since: b"4.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(swapdbCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 3 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 17 as libc::c_int) as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: SWAPDB_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"sync\0" as *const u8 as *const libc::c_char,
                summary: b"Internal command used for replication\0" as *const u8
                    as *const libc::c_char,
                complexity: 0 as *const libc::c_char,
                since: b"1.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(syncCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 1 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 23 as libc::c_int
                    | (1 as libc::c_ulonglong) << 4 as libc::c_int
                    | (1 as libc::c_ulonglong) << 24 as libc::c_int
                    | (1 as libc::c_ulonglong) << 6 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"time\0" as *const u8 as *const libc::c_char,
                summary: b"Return the current server time\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"2.6.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SERVER,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: TIME_tips.as_ptr() as *mut _,
                proc_0: Some(timeCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 1 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"sadd\0" as *const u8 as *const libc::c_char,
                summary: b"Add one or more members to a set\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.\0"
                    as *const u8 as *const libc::c_char,
                since: b"1.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SET,
                history: SADD_History.as_ptr() as *mut _,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(saddCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 2 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 3 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 6 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: SADD_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"scard\0" as *const u8 as *const libc::c_char,
                summary: b"Get the number of members in a set\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"1.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SET,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(scardCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 3 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int)
                                as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: SCARD_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"sdiff\0" as *const u8 as *const libc::c_char,
                summary: b"Subtract multiple sets\0" as *const u8 as *const libc::c_char,
                complexity: b"O(N) where N is the total number of elements in all given sets.\0"
                    as *const u8 as *const libc::c_char,
                since: b"1.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SET,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: SDIFF_tips.as_ptr() as *mut _,
                proc_0: Some(sdiffCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(2 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 3 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: -(1 as libc::c_int),
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: SDIFF_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"sdiffstore\0" as *const u8 as *const libc::c_char,
                summary: b"Subtract multiple sets and store the resulting set in a key\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(N) where N is the total number of elements in all given sets.\0"
                    as *const u8 as *const libc::c_char,
                since: b"1.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SET,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(
                    sdiffstoreCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 2 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 3 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 2 as libc::c_int
                                | (1 as libc::c_ulonglong) << 5 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 2 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: -(1 as libc::c_int),
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: SDIFFSTORE_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"sinter\0" as *const u8 as *const libc::c_char,
                summary: b"Intersect multiple sets\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N*M) worst case where N is the cardinality of the smallest set and M is the number of sets.\0"
                    as *const u8 as *const libc::c_char,
                since: b"1.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SET,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: SINTER_tips.as_ptr() as *mut _,
                proc_0: Some(sinterCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(2 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 3 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: -(1 as libc::c_int),
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: SINTER_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"sintercard\0" as *const u8 as *const libc::c_char,
                summary: b"Intersect multiple sets and return the cardinality of the result\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(N*M) worst case where N is the cardinality of the smallest set and M is the number of sets.\0"
                    as *const u8 as *const libc::c_char,
                since: b"7.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SET,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(
                    sinterCardCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 3 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_KEYNUM,
                            fk: C2RustUnnamed_0 {
                                keynum: {
                                    let mut init = C2RustUnnamed_1 {
                                        keynumidx: 0 as libc::c_int,
                                        firstkey: 1 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: Some(
                    sintercardGetKeys
                        as unsafe extern "C" fn(
                            *mut redisCommand,
                            *mut *mut robj,
                            libc::c_int,
                            *mut getKeysResult,
                        ) -> libc::c_int,
                ),
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: SINTERCARD_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"sinterstore\0" as *const u8 as *const libc::c_char,
                summary: b"Intersect multiple sets and store the resulting set in a key\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(N*M) worst case where N is the cardinality of the smallest set and M is the number of sets.\0"
                    as *const u8 as *const libc::c_char,
                since: b"1.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SET,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(
                    sinterstoreCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 2 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 3 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 5 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 2 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: -(1 as libc::c_int),
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: SINTERSTORE_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"sismember\0" as *const u8 as *const libc::c_char,
                summary: b"Determine if a given value is a member of a set\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"1.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SET,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(
                    sismemberCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: 3 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 3 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int)
                                as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: SISMEMBER_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"smembers\0" as *const u8 as *const libc::c_char,
                summary: b"Get all the members in a set\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N) where N is the set cardinality.\0" as *const u8
                    as *const libc::c_char,
                since: b"1.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SET,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: SMEMBERS_tips.as_ptr() as *mut _,
                proc_0: Some(sinterCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 3 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: SMEMBERS_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"smismember\0" as *const u8 as *const libc::c_char,
                summary: b"Returns the membership associated with the given elements for a set\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(N) where N is the number of elements being checked for membership\0"
                    as *const u8 as *const libc::c_char,
                since: b"6.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SET,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(
                    smismemberCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 3 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: SMISMEMBER_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"smove\0" as *const u8 as *const libc::c_char,
                summary: b"Move a member from one set to another\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"1.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SET,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(smoveCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 4 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 3 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int
                                | (1 as libc::c_ulonglong) << 7 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 6 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 2 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: SMOVE_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"spop\0" as *const u8 as *const libc::c_char,
                summary: b"Remove and return one or multiple random members from a set\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"Without the count argument O(1), otherwise O(N) where N is the value of the passed count.\0"
                    as *const u8 as *const libc::c_char,
                since: b"1.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SET,
                history: SPOP_History.as_ptr() as *mut _,
                tips: SPOP_tips.as_ptr() as *mut _,
                proc_0: Some(spopCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(2 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 3 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int
                                | (1 as libc::c_ulonglong) << 7 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: SPOP_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"srandmember\0" as *const u8 as *const libc::c_char,
                summary: b"Get one or multiple random members from a set\0" as *const u8
                    as *const libc::c_char,
                complexity: b"Without the count argument O(1), otherwise O(N) where N is the absolute value of the passed count.\0"
                    as *const u8 as *const libc::c_char,
                since: b"1.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SET,
                history: SRANDMEMBER_History.as_ptr() as *mut _,
                tips: SRANDMEMBER_tips.as_ptr() as *mut _,
                proc_0: Some(
                    srandmemberCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: -(2 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 3 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: SRANDMEMBER_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"srem\0" as *const u8 as *const libc::c_char,
                summary: b"Remove one or more members from a set\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N) where N is the number of members to be removed.\0"
                    as *const u8 as *const libc::c_char,
                since: b"1.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SET,
                history: SREM_History.as_ptr() as *mut _,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(sremCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 3 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 7 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: SREM_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"sscan\0" as *const u8 as *const libc::c_char,
                summary: b"Incrementally iterate Set elements\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection..\0"
                    as *const u8 as *const libc::c_char,
                since: b"2.8.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SET,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: SSCAN_tips.as_ptr() as *mut _,
                proc_0: Some(sscanCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 3 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: SSCAN_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"sunion\0" as *const u8 as *const libc::c_char,
                summary: b"Add multiple sets\0" as *const u8 as *const libc::c_char,
                complexity: b"O(N) where N is the total number of elements in all given sets.\0"
                    as *const u8 as *const libc::c_char,
                since: b"1.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SET,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: SUNION_tips.as_ptr() as *mut _,
                proc_0: Some(sunionCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(2 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 3 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: -(1 as libc::c_int),
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: SUNION_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"sunionstore\0" as *const u8 as *const libc::c_char,
                summary: b"Add multiple sets and store the resulting set in a key\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(N) where N is the total number of elements in all given sets.\0"
                    as *const u8 as *const libc::c_char,
                since: b"1.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SET,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(
                    sunionstoreCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 2 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 3 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 2 as libc::c_int
                                | (1 as libc::c_ulonglong) << 5 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 2 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: -(1 as libc::c_int),
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: SUNIONSTORE_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"bzmpop\0" as *const u8 as *const libc::c_char,
                summary: b"Remove and return members with scores in a sorted set or block until one is available\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(K) + O(M*log(N)) where K is the number of provided keys, N being the number of elements in the sorted set, and M being the number of elements popped.\0"
                    as *const u8 as *const libc::c_char,
                since: b"7.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SORTED_SET,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(bzmpopCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(5 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 8 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 4 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int
                                | (1 as libc::c_ulonglong) << 7 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 2 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_KEYNUM,
                            fk: C2RustUnnamed_0 {
                                keynum: {
                                    let mut init = C2RustUnnamed_1 {
                                        keynumidx: 0 as libc::c_int,
                                        firstkey: 1 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: Some(
                    blmpopGetKeys
                        as unsafe extern "C" fn(
                            *mut redisCommand,
                            *mut *mut robj,
                            libc::c_int,
                            *mut getKeysResult,
                        ) -> libc::c_int,
                ),
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: BZMPOP_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"bzpopmax\0" as *const u8 as *const libc::c_char,
                summary: b"Remove and return the member with the highest score from one or more sorted sets, or block until one is available\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(log(N)) with N being the number of elements in the sorted set.\0"
                    as *const u8 as *const libc::c_char,
                since: b"5.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SORTED_SET,
                history: BZPOPMAX_History.as_ptr() as *mut _,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(bzpopmaxCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int
                    | (1 as libc::c_ulonglong) << 8 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 4 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int
                                | (1 as libc::c_ulonglong) << 7 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: -(2 as libc::c_int),
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: BZPOPMAX_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"bzpopmin\0" as *const u8 as *const libc::c_char,
                summary: b"Remove and return the member with the lowest score from one or more sorted sets, or block until one is available\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(log(N)) with N being the number of elements in the sorted set.\0"
                    as *const u8 as *const libc::c_char,
                since: b"5.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SORTED_SET,
                history: BZPOPMIN_History.as_ptr() as *mut _,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(bzpopminCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int
                    | (1 as libc::c_ulonglong) << 8 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 4 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int
                                | (1 as libc::c_ulonglong) << 7 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: -(2 as libc::c_int),
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: BZPOPMIN_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"zadd\0" as *const u8 as *const libc::c_char,
                summary: b"Add one or more members to a sorted set, or update its score if it already exists\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(log(N)) for each item added, where N is the number of elements in the sorted set.\0"
                    as *const u8 as *const libc::c_char,
                since: b"1.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SORTED_SET,
                history: ZADD_History.as_ptr() as *mut _,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(zaddCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(4 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 2 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 4 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 5 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: ZADD_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"zcard\0" as *const u8 as *const libc::c_char,
                summary: b"Get the number of members in a sorted set\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"1.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SORTED_SET,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(zcardCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 4 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int)
                                as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: ZCARD_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"zcount\0" as *const u8 as *const libc::c_char,
                summary: b"Count the members in a sorted set with scores within the given values\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(log(N)) with N being the number of elements in the sorted set.\0"
                    as *const u8 as *const libc::c_char,
                since: b"2.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SORTED_SET,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(zcountCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 4 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 4 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: ZCOUNT_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"zdiff\0" as *const u8 as *const libc::c_char,
                summary: b"Subtract multiple sorted sets\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(L + (N-K)log(N)) worst case where L is the total number of elements in all the sets, N is the size of the first set, and K is the size of the result set.\0"
                    as *const u8 as *const libc::c_char,
                since: b"6.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SORTED_SET,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(zdiffCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 4 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_KEYNUM,
                            fk: C2RustUnnamed_0 {
                                keynum: {
                                    let mut init = C2RustUnnamed_1 {
                                        keynumidx: 0 as libc::c_int,
                                        firstkey: 1 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: Some(
                    zunionInterDiffGetKeys
                        as unsafe extern "C" fn(
                            *mut redisCommand,
                            *mut *mut robj,
                            libc::c_int,
                            *mut getKeysResult,
                        ) -> libc::c_int,
                ),
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: ZDIFF_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"zdiffstore\0" as *const u8 as *const libc::c_char,
                summary: b"Subtract multiple sorted sets and store the resulting sorted set in a new key\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(L + (N-K)log(N)) worst case where L is the total number of elements in all the sets, N is the size of the first set, and K is the size of the result set.\0"
                    as *const u8 as *const libc::c_char,
                since: b"6.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SORTED_SET,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(
                    zdiffstoreCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: -(4 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 2 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 4 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 2 as libc::c_int
                                | (1 as libc::c_ulonglong) << 5 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 2 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_KEYNUM,
                            fk: C2RustUnnamed_0 {
                                keynum: {
                                    let mut init = C2RustUnnamed_1 {
                                        keynumidx: 0 as libc::c_int,
                                        firstkey: 1 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: Some(
                    zunionInterDiffStoreGetKeys
                        as unsafe extern "C" fn(
                            *mut redisCommand,
                            *mut *mut robj,
                            libc::c_int,
                            *mut getKeysResult,
                        ) -> libc::c_int,
                ),
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: ZDIFFSTORE_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"zincrby\0" as *const u8 as *const libc::c_char,
                summary: b"Increment the score of a member in a sorted set\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(log(N)) where N is the number of elements in the sorted set.\0"
                    as *const u8 as *const libc::c_char,
                since: b"1.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SORTED_SET,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(zincrbyCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 4 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 2 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 4 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int
                                | (1 as libc::c_ulonglong) << 5 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: ZINCRBY_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"zinter\0" as *const u8 as *const libc::c_char,
                summary: b"Intersect multiple sorted sets\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N*K)+O(M*log(M)) worst case with N being the smallest input sorted set, K being the number of input sorted sets and M being the number of elements in the resulting sorted set.\0"
                    as *const u8 as *const libc::c_char,
                since: b"6.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SORTED_SET,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(zinterCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 4 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_KEYNUM,
                            fk: C2RustUnnamed_0 {
                                keynum: {
                                    let mut init = C2RustUnnamed_1 {
                                        keynumidx: 0 as libc::c_int,
                                        firstkey: 1 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: Some(
                    zunionInterDiffGetKeys
                        as unsafe extern "C" fn(
                            *mut redisCommand,
                            *mut *mut robj,
                            libc::c_int,
                            *mut getKeysResult,
                        ) -> libc::c_int,
                ),
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: ZINTER_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"zintercard\0" as *const u8 as *const libc::c_char,
                summary: b"Intersect multiple sorted sets and return the cardinality of the result\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(N*K) worst case with N being the smallest input sorted set, K being the number of input sorted sets.\0"
                    as *const u8 as *const libc::c_char,
                since: b"7.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SORTED_SET,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(
                    zinterCardCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 4 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_KEYNUM,
                            fk: C2RustUnnamed_0 {
                                keynum: {
                                    let mut init = C2RustUnnamed_1 {
                                        keynumidx: 0 as libc::c_int,
                                        firstkey: 1 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: Some(
                    zunionInterDiffGetKeys
                        as unsafe extern "C" fn(
                            *mut redisCommand,
                            *mut *mut robj,
                            libc::c_int,
                            *mut getKeysResult,
                        ) -> libc::c_int,
                ),
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: ZINTERCARD_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"zinterstore\0" as *const u8 as *const libc::c_char,
                summary: b"Intersect multiple sorted sets and store the resulting sorted set in a new key\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(N*K)+O(M*log(M)) worst case with N being the smallest input sorted set, K being the number of input sorted sets and M being the number of elements in the resulting sorted set.\0"
                    as *const u8 as *const libc::c_char,
                since: b"2.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SORTED_SET,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(
                    zinterstoreCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: -(4 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 2 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 4 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 2 as libc::c_int
                                | (1 as libc::c_ulonglong) << 5 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 2 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_KEYNUM,
                            fk: C2RustUnnamed_0 {
                                keynum: {
                                    let mut init = C2RustUnnamed_1 {
                                        keynumidx: 0 as libc::c_int,
                                        firstkey: 1 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: Some(
                    zunionInterDiffStoreGetKeys
                        as unsafe extern "C" fn(
                            *mut redisCommand,
                            *mut *mut robj,
                            libc::c_int,
                            *mut getKeysResult,
                        ) -> libc::c_int,
                ),
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: ZINTERSTORE_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"zlexcount\0" as *const u8 as *const libc::c_char,
                summary: b"Count the number of members in a sorted set between a given lexicographical range\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(log(N)) with N being the number of elements in the sorted set.\0"
                    as *const u8 as *const libc::c_char,
                since: b"2.8.9\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SORTED_SET,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(
                    zlexcountCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: 4 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 4 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: ZLEXCOUNT_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"zmpop\0" as *const u8 as *const libc::c_char,
                summary: b"Remove and return members with scores in a sorted set\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(K) + O(M*log(N)) where K is the number of provided keys, N being the number of elements in the sorted set, and M being the number of elements popped.\0"
                    as *const u8 as *const libc::c_char,
                since: b"7.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SORTED_SET,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(zmpopCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(4 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 4 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int
                                | (1 as libc::c_ulonglong) << 7 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_KEYNUM,
                            fk: C2RustUnnamed_0 {
                                keynum: {
                                    let mut init = C2RustUnnamed_1 {
                                        keynumidx: 0 as libc::c_int,
                                        firstkey: 1 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: Some(
                    zmpopGetKeys
                        as unsafe extern "C" fn(
                            *mut redisCommand,
                            *mut *mut robj,
                            libc::c_int,
                            *mut getKeysResult,
                        ) -> libc::c_int,
                ),
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: ZMPOP_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"zmscore\0" as *const u8 as *const libc::c_char,
                summary: b"Get the score associated with the given members in a sorted set\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(N) where N is the number of members being requested.\0"
                    as *const u8 as *const libc::c_char,
                since: b"6.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SORTED_SET,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(zmscoreCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 4 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: ZMSCORE_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"zpopmax\0" as *const u8 as *const libc::c_char,
                summary: b"Remove and return members with the highest scores in a sorted set\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(log(N)*M) with N being the number of elements in the sorted set, and M being the number of elements popped.\0"
                    as *const u8 as *const libc::c_char,
                since: b"5.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SORTED_SET,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(zpopmaxCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(2 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 4 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int
                                | (1 as libc::c_ulonglong) << 7 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: ZPOPMAX_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"zpopmin\0" as *const u8 as *const libc::c_char,
                summary: b"Remove and return members with the lowest scores in a sorted set\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(log(N)*M) with N being the number of elements in the sorted set, and M being the number of elements popped.\0"
                    as *const u8 as *const libc::c_char,
                since: b"5.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SORTED_SET,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(zpopminCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(2 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 4 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int
                                | (1 as libc::c_ulonglong) << 7 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: ZPOPMIN_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"zrandmember\0" as *const u8 as *const libc::c_char,
                summary: b"Get one or multiple random elements from a sorted set\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(N) where N is the number of elements returned\0"
                    as *const u8 as *const libc::c_char,
                since: b"6.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SORTED_SET,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: ZRANDMEMBER_tips.as_ptr() as *mut _,
                proc_0: Some(
                    zrandmemberCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: -(2 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 4 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: ZRANDMEMBER_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"zrange\0" as *const u8 as *const libc::c_char,
                summary: b"Return a range of members in a sorted set\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements returned.\0"
                    as *const u8 as *const libc::c_char,
                since: b"1.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SORTED_SET,
                history: ZRANGE_History.as_ptr() as *mut _,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(zrangeCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(4 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 4 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: ZRANGE_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"zrangebylex\0" as *const u8 as *const libc::c_char,
                summary: b"Return a range of members in a sorted set, by lexicographical range\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).\0"
                    as *const u8 as *const libc::c_char,
                since: b"2.8.9\0" as *const u8 as *const libc::c_char,
                doc_flags: (1 as libc::c_int) << 0 as libc::c_int,
                replaced_by: b"`ZRANGE` with the `BYLEX` argument\0" as *const u8
                    as *const libc::c_char,
                deprecated_since: b"6.2.0\0" as *const u8 as *const libc::c_char,
                group: COMMAND_GROUP_SORTED_SET,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(
                    zrangebylexCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: -(4 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 4 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: ZRANGEBYLEX_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"zrangebyscore\0" as *const u8 as *const libc::c_char,
                summary: b"Return a range of members in a sorted set, by score\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).\0"
                    as *const u8 as *const libc::c_char,
                since: b"1.0.5\0" as *const u8 as *const libc::c_char,
                doc_flags: (1 as libc::c_int) << 0 as libc::c_int,
                replaced_by: b"`ZRANGE` with the `BYSCORE` argument\0" as *const u8
                    as *const libc::c_char,
                deprecated_since: b"6.2.0\0" as *const u8 as *const libc::c_char,
                group: COMMAND_GROUP_SORTED_SET,
                history: ZRANGEBYSCORE_History.as_ptr() as *mut _,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(
                    zrangebyscoreCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: -(4 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 4 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: ZRANGEBYSCORE_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"zrangestore\0" as *const u8 as *const libc::c_char,
                summary: b"Store a range of members from sorted set into another key\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements stored into the destination key.\0"
                    as *const u8 as *const libc::c_char,
                since: b"6.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SORTED_SET,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(
                    zrangestoreCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: -(5 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 2 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 4 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 2 as libc::c_int
                                | (1 as libc::c_ulonglong) << 5 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 2 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: ZRANGESTORE_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"zrank\0" as *const u8 as *const libc::c_char,
                summary: b"Determine the index of a member in a sorted set\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(log(N))\0" as *const u8 as *const libc::c_char,
                since: b"2.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SORTED_SET,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(zrankCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 3 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 4 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: ZRANK_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"zrem\0" as *const u8 as *const libc::c_char,
                summary: b"Remove one or more members from a sorted set\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(M*log(N)) with N being the number of elements in the sorted set and M the number of elements to be removed.\0"
                    as *const u8 as *const libc::c_char,
                since: b"1.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SORTED_SET,
                history: ZREM_History.as_ptr() as *mut _,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(zremCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 4 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 7 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: ZREM_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"zremrangebylex\0" as *const u8 as *const libc::c_char,
                summary: b"Remove all members in a sorted set between the given lexicographical range\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements removed by the operation.\0"
                    as *const u8 as *const libc::c_char,
                since: b"2.8.9\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SORTED_SET,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(
                    zremrangebylexCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: 4 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 4 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 7 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: ZREMRANGEBYLEX_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"zremrangebyrank\0" as *const u8 as *const libc::c_char,
                summary: b"Remove all members in a sorted set within the given indexes\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements removed by the operation.\0"
                    as *const u8 as *const libc::c_char,
                since: b"2.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SORTED_SET,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(
                    zremrangebyrankCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: 4 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 4 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 7 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: ZREMRANGEBYRANK_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"zremrangebyscore\0" as *const u8 as *const libc::c_char,
                summary: b"Remove all members in a sorted set within the given scores\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements removed by the operation.\0"
                    as *const u8 as *const libc::c_char,
                since: b"1.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SORTED_SET,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(
                    zremrangebyscoreCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: 4 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 4 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 7 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: ZREMRANGEBYSCORE_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"zrevrange\0" as *const u8 as *const libc::c_char,
                summary: b"Return a range of members in a sorted set, by index, with scores ordered from high to low\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements returned.\0"
                    as *const u8 as *const libc::c_char,
                since: b"1.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: (1 as libc::c_int) << 0 as libc::c_int,
                replaced_by: b"`ZRANGE` with the `REV` argument\0" as *const u8
                    as *const libc::c_char,
                deprecated_since: b"6.2.0\0" as *const u8 as *const libc::c_char,
                group: COMMAND_GROUP_SORTED_SET,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(
                    zrevrangeCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: -(4 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 4 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: ZREVRANGE_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"zrevrangebylex\0" as *const u8 as *const libc::c_char,
                summary: b"Return a range of members in a sorted set, by lexicographical range, ordered from higher to lower strings.\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).\0"
                    as *const u8 as *const libc::c_char,
                since: b"2.8.9\0" as *const u8 as *const libc::c_char,
                doc_flags: (1 as libc::c_int) << 0 as libc::c_int,
                replaced_by: b"`ZRANGE` with the `REV` and `BYLEX` arguments\0"
                    as *const u8 as *const libc::c_char,
                deprecated_since: b"6.2.0\0" as *const u8 as *const libc::c_char,
                group: COMMAND_GROUP_SORTED_SET,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(
                    zrevrangebylexCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: -(4 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 4 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: ZREVRANGEBYLEX_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"zrevrangebyscore\0" as *const u8 as *const libc::c_char,
                summary: b"Return a range of members in a sorted set, by score, with scores ordered from high to low\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).\0"
                    as *const u8 as *const libc::c_char,
                since: b"2.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: (1 as libc::c_int) << 0 as libc::c_int,
                replaced_by: b"`ZRANGE` with the `REV` and `BYSCORE` arguments\0"
                    as *const u8 as *const libc::c_char,
                deprecated_since: b"6.2.0\0" as *const u8 as *const libc::c_char,
                group: COMMAND_GROUP_SORTED_SET,
                history: ZREVRANGEBYSCORE_History.as_ptr() as *mut _,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(
                    zrevrangebyscoreCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: -(4 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 4 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: ZREVRANGEBYSCORE_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"zrevrank\0" as *const u8 as *const libc::c_char,
                summary: b"Determine the index of a member in a sorted set, with scores ordered from high to low\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(log(N))\0" as *const u8 as *const libc::c_char,
                since: b"2.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SORTED_SET,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(zrevrankCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 3 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 4 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: ZREVRANK_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"zscan\0" as *const u8 as *const libc::c_char,
                summary: b"Incrementally iterate sorted sets elements and associated scores\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection..\0"
                    as *const u8 as *const libc::c_char,
                since: b"2.8.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SORTED_SET,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: ZSCAN_tips.as_ptr() as *mut _,
                proc_0: Some(zscanCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 4 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: ZSCAN_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"zscore\0" as *const u8 as *const libc::c_char,
                summary: b"Get the score associated with the given member in a sorted set\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"1.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SORTED_SET,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(zscoreCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 3 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 4 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: ZSCORE_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"zunion\0" as *const u8 as *const libc::c_char,
                summary: b"Add multiple sorted sets\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N)+O(M*log(M)) with N being the sum of the sizes of the input sorted sets, and M being the number of elements in the resulting sorted set.\0"
                    as *const u8 as *const libc::c_char,
                since: b"6.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SORTED_SET,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(zunionCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 4 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_KEYNUM,
                            fk: C2RustUnnamed_0 {
                                keynum: {
                                    let mut init = C2RustUnnamed_1 {
                                        keynumidx: 0 as libc::c_int,
                                        firstkey: 1 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: Some(
                    zunionInterDiffGetKeys
                        as unsafe extern "C" fn(
                            *mut redisCommand,
                            *mut *mut robj,
                            libc::c_int,
                            *mut getKeysResult,
                        ) -> libc::c_int,
                ),
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: ZUNION_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"zunionstore\0" as *const u8 as *const libc::c_char,
                summary: b"Add multiple sorted sets and store the resulting sorted set in a new key\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(N)+O(M log(M)) with N being the sum of the sizes of the input sorted sets, and M being the number of elements in the resulting sorted set.\0"
                    as *const u8 as *const libc::c_char,
                since: b"2.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_SORTED_SET,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(
                    zunionstoreCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: -(4 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 2 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 4 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 2 as libc::c_int
                                | (1 as libc::c_ulonglong) << 5 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 2 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_KEYNUM,
                            fk: C2RustUnnamed_0 {
                                keynum: {
                                    let mut init = C2RustUnnamed_1 {
                                        keynumidx: 0 as libc::c_int,
                                        firstkey: 1 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: Some(
                    zunionInterDiffStoreGetKeys
                        as unsafe extern "C" fn(
                            *mut redisCommand,
                            *mut *mut robj,
                            libc::c_int,
                            *mut getKeysResult,
                        ) -> libc::c_int,
                ),
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: ZUNIONSTORE_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"xack\0" as *const u8 as *const libc::c_char,
                summary: b"Marks a pending message as correctly processed, effectively removing it from the pending entries list of the consumer group. Return value of the command is the number of messages successfully acknowledged, that is, the IDs we were actually able to resolve in the PEL.\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1) for each message ID processed.\0" as *const u8
                    as *const libc::c_char,
                since: b"5.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_STREAM,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(xackCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(4 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 11 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 5 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: XACK_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"xadd\0" as *const u8 as *const libc::c_char,
                summary: b"Appends a new entry to a stream\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1) when adding a new entry, O(N) when trimming where N being the number of entries evicted.\0"
                    as *const u8 as *const libc::c_char,
                since: b"5.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_STREAM,
                history: XADD_History.as_ptr() as *mut _,
                tips: XADD_tips.as_ptr() as *mut _,
                proc_0: Some(xaddCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(5 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 2 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 11 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: b"UPDATE instead of INSERT because of the optional trimming feature\0"
                                as *const u8 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 5 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: XADD_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"xautoclaim\0" as *const u8 as *const libc::c_char,
                summary: b"Changes (or acquires) ownership of messages in a consumer group, as if the messages were delivered to the specified consumer.\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1) if COUNT is small.\0" as *const u8
                    as *const libc::c_char,
                since: b"6.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_STREAM,
                history: XAUTOCLAIM_History.as_ptr() as *mut _,
                tips: XAUTOCLAIM_tips.as_ptr() as *mut _,
                proc_0: Some(
                    xautoclaimCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: -(6 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 11 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 7 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: XAUTOCLAIM_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"xclaim\0" as *const u8 as *const libc::c_char,
                summary: b"Changes (or acquires) ownership of a message in a consumer group, as if the message was delivered to the specified consumer.\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(log N) with N being the number of messages in the PEL of the consumer group.\0"
                    as *const u8 as *const libc::c_char,
                since: b"5.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_STREAM,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: XCLAIM_tips.as_ptr() as *mut _,
                proc_0: Some(xclaimCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(6 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 11 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 5 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: XCLAIM_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"xdel\0" as *const u8 as *const libc::c_char,
                summary: b"Removes the specified entries from the stream. Returns the number of items actually deleted, that may be different from the number of IDs passed in case certain IDs do not exist.\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1) for each single item to delete in the stream, regardless of the stream size.\0"
                    as *const u8 as *const libc::c_char,
                since: b"5.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_STREAM,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(xdelCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 11 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 7 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: XDEL_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"xgroup\0" as *const u8 as *const libc::c_char,
                summary: b"A container for consumer groups commands\0" as *const u8
                    as *const libc::c_char,
                complexity: b"Depends on subcommand.\0" as *const u8
                    as *const libc::c_char,
                since: b"5.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_STREAM,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: None,
                arity: -(2 as libc::c_int),
                flags: 0 as libc::c_int as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: XGROUP_Subcommands.as_ptr() as *mut _,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"xinfo\0" as *const u8 as *const libc::c_char,
                summary: b"A container for stream introspection commands\0" as *const u8
                    as *const libc::c_char,
                complexity: b"Depends on subcommand.\0" as *const u8
                    as *const libc::c_char,
                since: b"5.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_STREAM,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: None,
                arity: -(2 as libc::c_int),
                flags: 0 as libc::c_int as uint64_t,
                acl_categories: 0 as libc::c_int as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: XINFO_Subcommands.as_ptr() as *mut _,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"xlen\0" as *const u8 as *const libc::c_char,
                summary: b"Return the number of entries in a stream\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"5.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_STREAM,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(xlenCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 11 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int)
                                as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: XLEN_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"xpending\0" as *const u8 as *const libc::c_char,
                summary: b"Return information and entries from a stream consumer group pending entries list, that are messages fetched but never acknowledged.\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(N) with N being the number of elements returned, so asking for a small fixed number of entries per call is O(1). O(M), where M is the total number of entries scanned when used with the IDLE filter. When the command returns just the summary and the list of consumers is small, it runs in O(1) time; otherwise, an additional O(N) time for iterating every consumer.\0"
                    as *const u8 as *const libc::c_char,
                since: b"5.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_STREAM,
                history: XPENDING_History.as_ptr() as *mut _,
                tips: XPENDING_tips.as_ptr() as *mut _,
                proc_0: Some(xpendingCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 11 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: XPENDING_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"xrange\0" as *const u8 as *const libc::c_char,
                summary: b"Return a range of elements in a stream, with IDs matching the specified IDs interval\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(N) with N being the number of elements being returned. If N is constant (e.g. always asking for the first 10 elements with COUNT), you can consider it O(1).\0"
                    as *const u8 as *const libc::c_char,
                since: b"5.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_STREAM,
                history: XRANGE_History.as_ptr() as *mut _,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(xrangeCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(4 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 11 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: XRANGE_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"xread\0" as *const u8 as *const libc::c_char,
                summary: b"Return never seen elements in multiple streams, with IDs greater than the ones reported by the caller for each stream. Can block.\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"For each stream mentioned: O(N) with N being the number of elements being returned, it means that XREAD-ing with a fixed COUNT is O(1). Note that when the BLOCK option is used, XADD will pay O(M) time in order to serve the M clients blocked on the stream getting new data.\0"
                    as *const u8 as *const libc::c_char,
                since: b"5.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_STREAM,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(xreadCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(4 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 8 as libc::c_int
                    | (1 as libc::c_ulonglong) << 1 as libc::c_int
                    | (1 as libc::c_ulonglong) << 8 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 11 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_KEYWORD,
                            bs: C2RustUnnamed_3 {
                                keyword: {
                                    let mut init = C2RustUnnamed_4 {
                                        keyword: b"STREAMS\0" as *const u8 as *const libc::c_char,
                                        startfrom: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: -(1 as libc::c_int),
                                        keystep: 1 as libc::c_int,
                                        limit: 2 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: Some(
                    xreadGetKeys
                        as unsafe extern "C" fn(
                            *mut redisCommand,
                            *mut *mut robj,
                            libc::c_int,
                            *mut getKeysResult,
                        ) -> libc::c_int,
                ),
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: XREAD_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"xreadgroup\0" as *const u8 as *const libc::c_char,
                summary: b"Return new entries from a stream using a consumer group, or access the history of the pending entries for a given consumer. Can block.\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"For each stream mentioned: O(M) with M being the number of elements returned. If M is constant (e.g. always asking for the first 10 elements with COUNT), you can consider it O(1). On the other side when XREADGROUP blocks, XADD will pay the O(N) time in order to serve the N clients blocked on the stream getting new data.\0"
                    as *const u8 as *const libc::c_char,
                since: b"5.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_STREAM,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(xreadCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(7 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 8 as libc::c_int
                    | (1 as libc::c_ulonglong) << 0 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 11 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_KEYWORD,
                            bs: C2RustUnnamed_3 {
                                keyword: {
                                    let mut init = C2RustUnnamed_4 {
                                        keyword: b"STREAMS\0" as *const u8 as *const libc::c_char,
                                        startfrom: 4 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: -(1 as libc::c_int),
                                        keystep: 1 as libc::c_int,
                                        limit: 2 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: Some(
                    xreadGetKeys
                        as unsafe extern "C" fn(
                            *mut redisCommand,
                            *mut *mut robj,
                            libc::c_int,
                            *mut getKeysResult,
                        ) -> libc::c_int,
                ),
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: XREADGROUP_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"xrevrange\0" as *const u8 as *const libc::c_char,
                summary: b"Return a range of elements in a stream, with IDs matching the specified IDs interval, in reverse order (from greater to smaller IDs) compared to XRANGE\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(N) with N being the number of elements returned. If N is constant (e.g. always asking for the first 10 elements with COUNT), you can consider it O(1).\0"
                    as *const u8 as *const libc::c_char,
                since: b"5.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_STREAM,
                history: XREVRANGE_History.as_ptr() as *mut _,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(
                    xrevrangeCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: -(4 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 11 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: XREVRANGE_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"xsetid\0" as *const u8 as *const libc::c_char,
                summary: b"An internal command for replicating stream values\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"5.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_STREAM,
                history: XSETID_History.as_ptr() as *mut _,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(xsetidCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 2 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 11 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 5 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: XSETID_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"xtrim\0" as *const u8 as *const libc::c_char,
                summary: b"Trims the stream to (approximately if '~' is passed) a certain size\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(N), with N being the number of evicted entries. Constant times are very small however, since entries are organized in macro nodes containing multiple entries that can be released with a single deallocation.\0"
                    as *const u8 as *const libc::c_char,
                since: b"5.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_STREAM,
                history: XTRIM_History.as_ptr() as *mut _,
                tips: XTRIM_tips.as_ptr() as *mut _,
                proc_0: Some(xtrimCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(4 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 11 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 7 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: XTRIM_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"append\0" as *const u8 as *const libc::c_char,
                summary: b"Append a value to a key\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1). The amortized time complexity is O(1) assuming the appended value is small and the already present value is of any size, since the dynamic string library used by Redis will double the free space available on every reallocation.\0"
                    as *const u8 as *const libc::c_char,
                since: b"2.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_STRING,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(appendCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 3 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 2 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 7 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 6 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: APPEND_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"decr\0" as *const u8 as *const libc::c_char,
                summary: b"Decrement the integer value of a key by one\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"1.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_STRING,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(decrCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 2 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 7 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int
                                | (1 as libc::c_ulonglong) << 5 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: DECR_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"decrby\0" as *const u8 as *const libc::c_char,
                summary: b"Decrement the integer value of a key by the given number\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"1.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_STRING,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(decrbyCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 3 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 2 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 7 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int
                                | (1 as libc::c_ulonglong) << 5 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: DECRBY_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"get\0" as *const u8 as *const libc::c_char,
                summary: b"Get the value of a key\0" as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"1.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_STRING,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(getCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 7 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: GET_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"getdel\0" as *const u8 as *const libc::c_char,
                summary: b"Get the value of a key and delete the key\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"6.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_STRING,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(getdelCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 7 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int
                                | (1 as libc::c_ulonglong) << 7 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: GETDEL_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"getex\0" as *const u8 as *const libc::c_char,
                summary: b"Get the value of a key and optionally set its expiration\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"6.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_STRING,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(getexCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(2 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 7 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: b"RW and UPDATE because it changes the TTL\0"
                                as *const u8 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int
                                | (1 as libc::c_ulonglong) << 5 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: GETEX_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"getrange\0" as *const u8 as *const libc::c_char,
                summary: b"Get a substring of the string stored at a key\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N) where N is the length of the returned string. The complexity is ultimately determined by the returned length, but because creating a substring from an existing string is very cheap, it can be considered O(1) for small strings.\0"
                    as *const u8 as *const libc::c_char,
                since: b"2.4.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_STRING,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(getrangeCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 4 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 7 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: GETRANGE_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"getset\0" as *const u8 as *const libc::c_char,
                summary: b"Set the string value of a key and return its old value\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"1.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: (1 as libc::c_int) << 0 as libc::c_int,
                replaced_by: b"`SET` with the `!GET` argument\0" as *const u8
                    as *const libc::c_char,
                deprecated_since: b"6.2.0\0" as *const u8 as *const libc::c_char,
                group: COMMAND_GROUP_STRING,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(getsetCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 3 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 2 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 7 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int
                                | (1 as libc::c_ulonglong) << 5 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: GETSET_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"incr\0" as *const u8 as *const libc::c_char,
                summary: b"Increment the integer value of a key by one\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"1.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_STRING,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(incrCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 2 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 7 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int
                                | (1 as libc::c_ulonglong) << 5 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: INCR_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"incrby\0" as *const u8 as *const libc::c_char,
                summary: b"Increment the integer value of a key by the given amount\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"1.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_STRING,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(incrbyCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 3 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 2 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 7 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int
                                | (1 as libc::c_ulonglong) << 5 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: INCRBY_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"incrbyfloat\0" as *const u8 as *const libc::c_char,
                summary: b"Increment the float value of a key by the given amount\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"2.6.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_STRING,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(
                    incrbyfloatCommand as unsafe extern "C" fn(*mut client) -> (),
                ),
                arity: 3 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 2 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 7 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int
                                | (1 as libc::c_ulonglong) << 5 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: INCRBYFLOAT_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"lcs\0" as *const u8 as *const libc::c_char,
                summary: b"Find longest common substring\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N*M) where N and M are the lengths of s1 and s2, respectively\0"
                    as *const u8 as *const libc::c_char,
                since: b"7.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_STRING,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(lcsCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 7 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 1 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: LCS_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"mget\0" as *const u8 as *const libc::c_char,
                summary: b"Get the values of all the given keys\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N) where N is the number of keys to retrieve.\0"
                    as *const u8 as *const libc::c_char,
                since: b"1.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_STRING,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: MGET_tips.as_ptr() as *mut _,
                proc_0: Some(mgetCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(2 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 7 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: -(1 as libc::c_int),
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: MGET_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"mset\0" as *const u8 as *const libc::c_char,
                summary: b"Set multiple keys to multiple values\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N) where N is the number of keys to set.\0" as *const u8
                    as *const libc::c_char,
                since: b"1.0.1\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_STRING,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: MSET_tips.as_ptr() as *mut _,
                proc_0: Some(msetCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 2 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 7 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 2 as libc::c_int
                                | (1 as libc::c_ulonglong) << 5 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: -(1 as libc::c_int),
                                        keystep: 2 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: MSET_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"msetnx\0" as *const u8 as *const libc::c_char,
                summary: b"Set multiple keys to multiple values, only if none of the keys exist\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(N) where N is the number of keys to set.\0" as *const u8
                    as *const libc::c_char,
                since: b"1.0.1\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_STRING,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: MSETNX_tips.as_ptr() as *mut _,
                proc_0: Some(msetnxCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 2 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 7 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 2 as libc::c_int
                                | (1 as libc::c_ulonglong) << 6 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: -(1 as libc::c_int),
                                        keystep: 2 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: MSETNX_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"psetex\0" as *const u8 as *const libc::c_char,
                summary: b"Set the value and expiration in milliseconds of a key\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"2.6.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_STRING,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(psetexCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 4 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 2 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 7 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 2 as libc::c_int
                                | (1 as libc::c_ulonglong) << 5 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: PSETEX_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"set\0" as *const u8 as *const libc::c_char,
                summary: b"Set the string value of a key\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"1.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_STRING,
                history: SET_History.as_ptr() as *mut _,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(setCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(3 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 2 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 7 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: b"RW and ACCESS due to the optional `GET` argument\0"
                                as *const u8 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int
                                | (1 as libc::c_ulonglong) << 5 as libc::c_int
                                | (1 as libc::c_ulonglong) << 10 as libc::c_int)
                                as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: Some(
                    setGetKeys
                        as unsafe extern "C" fn(
                            *mut redisCommand,
                            *mut *mut robj,
                            libc::c_int,
                            *mut getKeysResult,
                        ) -> libc::c_int,
                ),
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: SET_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"setex\0" as *const u8 as *const libc::c_char,
                summary: b"Set the value and expiration of a key\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"2.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_STRING,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(setexCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 4 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 2 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 7 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 2 as libc::c_int
                                | (1 as libc::c_ulonglong) << 5 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: SETEX_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"setnx\0" as *const u8 as *const libc::c_char,
                summary: b"Set the value of a key, only if the key does not exist\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"1.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_STRING,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(setnxCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 3 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 2 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 7 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 2 as libc::c_int
                                | (1 as libc::c_ulonglong) << 6 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: SETNX_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"setrange\0" as *const u8 as *const libc::c_char,
                summary: b"Overwrite part of a string at key starting at the specified offset\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1), not counting the time taken to copy the new string in place. Usually, this string is very small so the amortized complexity is O(1). Otherwise, complexity is O(M) with M being the length of the value argument.\0"
                    as *const u8 as *const libc::c_char,
                since: b"2.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_STRING,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(setrangeCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 4 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                    | (1 as libc::c_ulonglong) << 2 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 7 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                                | (1 as libc::c_ulonglong) << 5 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: SETRANGE_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"strlen\0" as *const u8 as *const libc::c_char,
                summary: b"Get the length of the value stored in a key\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"2.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_STRING,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(strlenCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 2 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 7 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int)
                                as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: STRLEN_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"substr\0" as *const u8 as *const libc::c_char,
                summary: b"Get a substring of the string stored at a key\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N) where N is the length of the returned string. The complexity is ultimately determined by the returned length, but because creating a substring from an existing string is very cheap, it can be considered O(1) for small strings.\0"
                    as *const u8 as *const libc::c_char,
                since: b"1.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: (1 as libc::c_int) << 0 as libc::c_int,
                replaced_by: b"`GETRANGE`\0" as *const u8 as *const libc::c_char,
                deprecated_since: b"2.0.0\0" as *const u8 as *const libc::c_char,
                group: COMMAND_GROUP_STRING,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(getrangeCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 4 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 1 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 7 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int
                                | (1 as libc::c_ulonglong) << 4 as libc::c_int) as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: 0 as libc::c_int,
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: SUBSTR_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"discard\0" as *const u8 as *const libc::c_char,
                summary: b"Discard all commands issued after MULTI\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(N), when N is the number of queued commands\0"
                    as *const u8 as *const libc::c_char,
                since: b"2.0.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_TRANSACTIONS,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(discardCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 1 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int
                    | (1 as libc::c_ulonglong) << 26 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 19 as libc::c_int)
                    as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"exec\0" as *const u8 as *const libc::c_char,
                summary: b"Execute all commands issued after MULTI\0" as *const u8
                    as *const libc::c_char,
                complexity: b"Depends on commands in the transaction\0" as *const u8
                    as *const libc::c_char,
                since: b"1.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_TRANSACTIONS,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(execCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 1 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 12 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 19 as libc::c_int)
                    as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"multi\0" as *const u8 as *const libc::c_char,
                summary: b"Mark the start of a transaction block\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"1.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_TRANSACTIONS,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(multiCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 1 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int
                    | (1 as libc::c_ulonglong) << 26 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 19 as libc::c_int)
                    as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"unwatch\0" as *const u8 as *const libc::c_char,
                summary: b"Forget about all watched keys\0" as *const u8
                    as *const libc::c_char,
                complexity: b"O(1)\0" as *const u8 as *const libc::c_char,
                since: b"2.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_TRANSACTIONS,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(unwatchCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: 1 as libc::c_int,
                flags: ((1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int
                    | (1 as libc::c_ulonglong) << 26 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 19 as libc::c_int)
                    as uint64_t,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: b"watch\0" as *const u8 as *const libc::c_char,
                summary: b"Watch the given keys to determine execution of the MULTI/EXEC block\0"
                    as *const u8 as *const libc::c_char,
                complexity: b"O(1) for every key.\0" as *const u8 as *const libc::c_char,
                since: b"2.2.0\0" as *const u8 as *const libc::c_char,
                doc_flags: 0 as libc::c_int,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_TRANSACTIONS,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: Some(watchCommand as unsafe extern "C" fn(*mut client) -> ()),
                arity: -(2 as libc::c_int),
                flags: ((1 as libc::c_ulonglong) << 6 as libc::c_int
                    | (1 as libc::c_ulonglong) << 9 as libc::c_int
                    | (1 as libc::c_ulonglong) << 10 as libc::c_int
                    | (1 as libc::c_ulonglong) << 14 as libc::c_int
                    | (1 as libc::c_ulonglong) << 26 as libc::c_int) as uint64_t,
                acl_categories: ((1 as libc::c_ulonglong) << 19 as libc::c_int)
                    as uint64_t,
                key_specs_static: [
                    {
                        let mut init = keySpec {
                            notes: 0 as *const libc::c_char,
                            flags: ((1 as libc::c_ulonglong) << 0 as libc::c_int)
                                as uint64_t,
                            begin_search_type: KSPEC_BS_INDEX,
                            bs: C2RustUnnamed_3 {
                                index: {
                                    let mut init = C2RustUnnamed_5 {
                                        pos: 1 as libc::c_int,
                                    };
                                    init
                                },
                            },
                            find_keys_type: KSPEC_FK_RANGE,
                            fk: C2RustUnnamed_0 {
                                range: {
                                    let mut init = C2RustUnnamed_2 {
                                        lastkey: -(1 as libc::c_int),
                                        keystep: 1 as libc::c_int,
                                        limit: 0 as libc::c_int,
                                    };
                                    init
                                },
                            },
                        };
                        init
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                    keySpec {
                        notes: 0 as *const libc::c_char,
                        flags: 0,
                        begin_search_type: KSPEC_BS_INVALID,
                        bs: C2RustUnnamed_3 {
                            index: C2RustUnnamed_5 { pos: 0 },
                        },
                        find_keys_type: KSPEC_FK_INVALID,
                        fk: C2RustUnnamed_0 {
                            range: C2RustUnnamed_2 {
                                lastkey: 0,
                                keystep: 0,
                                limit: 0,
                            },
                        },
                    },
                ],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: WATCH_Args.as_ptr() as *mut _,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
        {
            let mut init = redisCommand {
                declared_name: 0 as *const libc::c_char,
                summary: 0 as *const libc::c_char,
                complexity: 0 as *const libc::c_char,
                since: 0 as *const libc::c_char,
                doc_flags: 0,
                replaced_by: 0 as *const libc::c_char,
                deprecated_since: 0 as *const libc::c_char,
                group: COMMAND_GROUP_GENERIC,
                history: 0 as *const commandHistory as *mut commandHistory,
                tips: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                proc_0: None,
                arity: 0,
                flags: 0,
                acl_categories: 0,
                key_specs_static: [keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                }; 4],
                getkeys_proc: None,
                subcommands: 0 as *const redisCommand as *mut redisCommand,
                args: 0 as *const redisCommandArg as *mut redisCommandArg,
                microseconds: 0,
                calls: 0,
                rejected_calls: 0,
                failed_calls: 0,
                id: 0,
                fullname: 0 as *const libc::c_char as *mut libc::c_char,
                latency_histogram: 0 as *const hdr_histogram as *mut hdr_histogram,
                key_specs: 0 as *const keySpec as *mut keySpec,
                legacy_range_key_spec: keySpec {
                    notes: 0 as *const libc::c_char,
                    flags: 0,
                    begin_search_type: KSPEC_BS_INVALID,
                    bs: C2RustUnnamed_3 {
                        index: C2RustUnnamed_5 { pos: 0 },
                    },
                    find_keys_type: KSPEC_FK_INVALID,
                    fk: C2RustUnnamed_0 {
                        range: C2RustUnnamed_2 {
                            lastkey: 0,
                            keystep: 0,
                            limit: 0,
                        },
                    },
                },
                num_args: 0,
                num_history: 0,
                num_tips: 0,
                key_specs_num: 0,
                key_specs_max: 0,
                subcommands_dict: 0 as *const dict as *mut dict,
                parent: 0 as *const redisCommand as *mut redisCommand,
                module_cmd: 0 as *const RedisModuleCommand as *mut RedisModuleCommand,
            };
            init
        },
    ]
};
